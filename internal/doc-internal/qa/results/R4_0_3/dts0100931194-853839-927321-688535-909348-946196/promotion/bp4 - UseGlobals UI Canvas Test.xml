<?xml version="1.0" encoding="UTF-8"?>
<testrun name="bp4 - UseGlobals UI Canvas Test" project="com.mentor.nucleus.bp.ui.canvas.test" tests="258" started="258" failures="10" errors="0" ignored="0">
  <testsuite name="CanvasGlobalsTestSuite" time="2529.449">
    <testsuite name="com.mentor.nucleus.bp.ui.canvas.test.CanvasGlobalsTest" time="0.265">
      <testcase name="testGlobally" classname="com.mentor.nucleus.bp.ui.canvas.test.CanvasGlobalsTest" time="0.265"/>
    </testsuite>
    <testsuite name="com.mentor.nucleus.bp.ui.canvas.test.CanvasTestsSuite" time="0.561">
      <testcase name="testCanvasTestSuite" classname="com.mentor.nucleus.bp.ui.canvas.test.CanvasTestsSuite" time="0.561"/>
    </testsuite>
    <testsuite name="com.mentor.nucleus.bp.ui.canvas.test.ErrorPathsTest" time="0.141">
      <testcase name="testGetConnectorText" classname="com.mentor.nucleus.bp.ui.canvas.test.ErrorPathsTest" time="0.063"/>
      <testcase name="testGetCompartmentText" classname="com.mentor.nucleus.bp.ui.canvas.test.ErrorPathsTest" time="0.031"/>
      <testcase name="testGetCompartments" classname="com.mentor.nucleus.bp.ui.canvas.test.ErrorPathsTest" time="0.015"/>
      <testcase name="testGetConnectorStyle" classname="com.mentor.nucleus.bp.ui.canvas.test.ErrorPathsTest" time="0.032"/>
      <testcase name="testGetOOA_IDfromInstance" classname="com.mentor.nucleus.bp.ui.canvas.test.ErrorPathsTest" time="0.0"/>
    </testsuite>
    <testsuite name="com.mentor.nucleus.bp.ui.canvas.test.SymbolTest" time="17.011">
      <testcase name="testCanvasDomainChart" classname="com.mentor.nucleus.bp.ui.canvas.test.SymbolTest" time="7.457"/>
      <testcase name="testCanvasClassDiagram" classname="com.mentor.nucleus.bp.ui.canvas.test.SymbolTest" time="1.545"/>
      <testcase name="testCanvasExportedClassDiagram" classname="com.mentor.nucleus.bp.ui.canvas.test.SymbolTest" time="1.078"/>
      <testcase name="testCanvas2ndExportedClassDiagram" classname="com.mentor.nucleus.bp.ui.canvas.test.SymbolTest" time="1.14"/>
      <testcase name="testCanvasStateChart" classname="com.mentor.nucleus.bp.ui.canvas.test.SymbolTest" time="1.06"/>
      <testcase name="testCanvasDTPackageDiagram" classname="com.mentor.nucleus.bp.ui.canvas.test.SymbolTest" time="1.031"/>
      <testcase name="testCanvasEEPackageDiagram" classname="com.mentor.nucleus.bp.ui.canvas.test.SymbolTest" time="1.062"/>
      <testcase name="testCanvasActivityDiagram" classname="com.mentor.nucleus.bp.ui.canvas.test.SymbolTest" time="1.373"/>
      <testcase name="test_CanvasPlugin" classname="com.mentor.nucleus.bp.ui.canvas.test.SymbolTest" time="1.265"/>
    </testsuite>
    <testsuite name="com.mentor.nucleus.bp.ui.canvas.test.ODMSTest" time="31.108">
      <testcase name="testODMSDomainChart" classname="com.mentor.nucleus.bp.ui.canvas.test.ODMSTest" time="5.976"/>
      <testcase name="testODMSClassDiagramDisplayWithSelection" classname="com.mentor.nucleus.bp.ui.canvas.test.ODMSTest" time="2.73">
        <failure>
          <expected>drawRectangle(1629, 1286, 149, 106)&#13;
drawText("Robot", 1690, 1289, true)&#13;
drawText("{12,D_R}", 1730, 1301, true)&#13;
drawline(1629, 1317, 1778, 1317)&#13;
drawText("Robot_ID:integer", 1632, 1319, true)&#13;
drawText("{I}", 1762, 1319, true)&#13;
drawText("Disk_Transfer_ID:uniqu...", 1632, 1332, true)&#13;
drawText("{R9}", 1753, 1332, true)&#13;
drawText("Actual_X_Coordinate:integer", 1632, 1345, true)&#13;
drawText("Actual_Y_Coordinate:integer", 1632, 1358, true)&#13;
drawText("Actual_Theta_Coordinate:in...", 1632, 1370, true)&#13;
drawline(1629, 1398, 1778, 1398)&#13;
drawRectangle(1597, 1490, 138, 74)&#13;
drawText("Disk Transfer", 1635, 1492, true)&#13;
drawText("{13,D_DT}", 1680, 1505, true)&#13;
drawline(1597, 1520, 1735, 1520)&#13;
drawText("Disk_Transfer_ID:uniq...", 1599, 1523, true)&#13;
drawText("{I}", 1719, 1523, true)&#13;
drawText("Source_ID:integer", 1599, 1536, true)&#13;
drawText("{R10}", 1704, 1536, true)&#13;
drawText("Destination_ID:integer", 1599, 1549, true)&#13;
drawText("{R11}", 1704, 1549, true)&#13;
drawline(1597, 1577, 1735, 1577)&#13;
drawRectangle(954, 1307, 117, 75)&#13;
drawText("Entry_Exit Port", 977, 1310, true)&#13;
drawText("{8,D_P}", 1029, 1323, true)&#13;
drawline(954, 1338, 1071, 1338)&#13;
drawText("Port_ID:integer", 956, 1341, true)&#13;
drawText("{I,R7}", 1038, 1341, true)&#13;
drawText("current_state:state&lt;S...", 956, 1354, true)&#13;
drawText("Disk_Transfer_I...", 956, 1366, true)&#13;
drawText("{R8}", 1045, 1366, true)&#13;
drawline(954, 1382, 1071, 1382)&#13;
drawRectangle(1125, 1318, 96, 64)&#13;
drawText("Drive", 1161, 1321, true)&#13;
drawText("{7,D_DR}", 1171, 1334, true)&#13;
drawline(1125, 1349, 1221, 1349)&#13;
drawText("Drive_ID:i...", 1128, 1352, true)&#13;
drawText("{I,R7}", 1188, 1352, true)&#13;
drawText("Idle:boolean", 1128, 1364, true)&#13;
drawline(1125, 1392, 1221, 1392)&#13;
drawRectangle(1222, 1222, 149, 63)&#13;
drawText("Slot_Disk Assignment", 1245, 1224, true)&#13;
drawText("{5,D_SDA}", 1315, 1237, true)&#13;
drawline(1222, 1252, 1371, 1252)&#13;
drawText("Disk_ID:integer", 1224, 1255, true)&#13;
drawText("{I,R6}", 1338, 1255, true)&#13;
drawText("Slot_ID:integer", 1224, 1268, true)&#13;
drawText("{R6}", 1346, 1268, true)&#13;
drawline(1222, 1283, 1371, 1283)&#13;
drawRectangle(1297, 1479, 149, 96)&#13;
drawText("Online Location", 1335, 1482, true)&#13;
drawText("{15,D_OL}", 1391, 1494, true)&#13;
drawline(1297, 1510, 1446, 1510)&#13;
drawText("Online_Location_ID:integer", 1299, 1512, true)&#13;
drawText("{I}", 1429, 1512, true)&#13;
drawText("X_Coordinate:integer", 1299, 1525, true)&#13;
drawText("Y_Coordinate:integer", 1299, 1538, true)&#13;
drawText("Theta_Coordinate:integer", 1299, 1551, true)&#13;
drawText("current_state:state&lt;State_M...", 1299, 1563, true)&#13;
drawline(1297, 1579, 1446, 1579)&#13;
drawRectangle(1318, 1318, 107, 64)&#13;
drawText("Slot", 1363, 1321, true)&#13;
drawText("{6,D_S}", 1383, 1334, true)&#13;
drawline(1318, 1349, 1425, 1349)&#13;
drawText("Slot_ID:integer", 1321, 1352, true)&#13;
drawText("{I,R7}", 1392, 1352, true)&#13;
drawText("Unassigned:boolean", 1321, 1364, true)&#13;
drawline(1318, 1392, 1425, 1392)&#13;
drawRectangle(943, 1168, 160, 64)&#13;
drawText("Drive_Disk Assignment", 968, 1171, true)&#13;
drawText("{14,D_DDA}", 1039, 1183, true)&#13;
drawline(943, 1199, 1103, 1199)&#13;
drawText("Drive_ID:integer", 946, 1202, true)&#13;
drawText("{I,R5}", 1070, 1202, true)&#13;
drawText("Disk_ID:integer", 946, 1214, true)&#13;
drawText("{R5}", 1078, 1214, true)&#13;
drawline(943, 1230, 1103, 1230)&#13;
drawRectangle(1104, 1061, 138, 53)&#13;
drawText("Disk Ownership", 1136, 1064, true)&#13;
drawText("{11,D_DO}", 1185, 1076, true)&#13;
drawline(1104, 1092, 1242, 1092)&#13;
drawText("Disk_ID:integer", 1106, 1094, true)&#13;
drawText("{I,R2}", 1210, 1094, true)&#13;
drawline(1104, 1122, 1242, 1122)&#13;
drawRectangle(889, 964, 150, 75)&#13;
drawText("Qualified Process", 924, 967, true)&#13;
drawText("{9,D_QP}", 989, 980, true)&#13;
drawline(889, 995, 1039, 995)&#13;
drawText("Qualified_Process_ID:inte...", 892, 998, true)&#13;
drawText("{I}", 1022, 998, true)&#13;
drawText("current_state:state&lt;State_M...", 892, 1011, true)&#13;
drawline(889, 1026, 1039, 1026)&#13;
drawRectangle(1093, 814, 149, 96)&#13;
drawText("Disk Request", 1138, 817, true)&#13;
drawText("{10,D_DQ}", 1185, 830, true)&#13;
drawline(1093, 845, 1242, 845)&#13;
drawText("Qualified_Process_ID:...", 1096, 848, true)&#13;
drawText("{I,R1}", 1210, 848, true)&#13;
drawText("Disk_ID:integer", 1096, 861, true)&#13;
drawText("{I,R1}", 1210, 861, true)&#13;
drawText("Time_of_Request:integer", 1096, 873, true)&#13;
drawText("{I}", 1226, 873, true)&#13;
drawText("Time_Request_Completed:i...", 1096, 886, true)&#13;
drawText("Request_Pending:boolean", 1096, 899, true)&#13;
drawline(1093, 927, 1242, 927)&#13;
drawRectangle(1532, 1125, 128, 53)&#13;
drawText("Offline Disk", 1569, 1128, true)&#13;
drawText("{3,D_OD}", 1610, 1141, true)&#13;
drawline(1532, 1156, 1660, 1156)&#13;
drawText("Disk_ID:integer", 1535, 1159, true)&#13;
drawText("{I,R3}", 1628, 1159, true)&#13;
drawline(1532, 1174, 1660, 1174)&#13;
drawRectangle(1307, 1125, 139, 53)&#13;
drawText("Online Disk", 1350, 1128, true)&#13;
drawText("{4,D_OND}", 1388, 1141, true)&#13;
drawline(1307, 1156, 1446, 1156)&#13;
drawText("Disk_ID:integer", 1310, 1159, true)&#13;
drawText("{I,R3}", 1413, 1159, true)&#13;
drawline(1307, 1174, 1446, 1174)&#13;
drawRectangle(1629, 964, 160, 85)&#13;
drawText("Permanent Home in Library", 1644, 967, true)&#13;
drawText("{2,D_H}", 1746, 980, true)&#13;
drawline(1629, 995, 1789, 995)&#13;
drawText("Row_Number:integer", 1632, 998, true)&#13;
drawText("{I}", 1772, 998, true)&#13;
drawText("Column_Number:integer", 1632, 1011, true)&#13;
drawText("{I}", 1772, 1011, true)&#13;
drawline(1629, 1026, 1789, 1026)&#13;
drawRectangle(1297, 921, 149, 150)&#13;
drawText("Disk", 1362, 924, true)&#13;
drawText("{1,D_D}", 1403, 937, true)&#13;
drawline(1297, 952, 1446, 952)&#13;
drawText("Disk_ID:integer", 1299, 955, true)&#13;
drawText("{I}", 1429, 955, true)&#13;
drawText("Serial_Number:integer", 1299, 968, true)&#13;
drawText("Row_Number:integer", 1299, 980, true)&#13;
drawText("{R4}", 1421, 980, true)&#13;
drawText("Column_Number:integer", 1299, 993, true)&#13;
drawText("{R4}", 1421, 993, true)&#13;
drawText("Number_of_Bytes_Available...", 1299, 1006, true)&#13;
drawText("Address_to_Start_Writing:in...", 1299, 1019, true)&#13;
drawText("Write_Protect_ Status:boolean", 1299, 1031, true)&#13;
drawText("Waiting_for_Slot:boolean", 1299, 1044, true)&#13;
drawText("Waiting_for_Drive:boolean", 1299, 1057, true)&#13;
drawline(1297, 1110, 1446, 1110)&#13;
drawPolyline("1715, 1490, 1715, 1393)&#13;
drawText("is", 0, 0, true)&#13;
drawText("executing", 0, 13, true)&#13;
drawText("R9", 0, 0, true)&#13;
drawText("is being", 0, 1, true)&#13;
drawText("executed", 0, 14, true)&#13;
drawText("by", 0, 27, true)&#13;
drawText("0..1", 0, 1, true)&#13;
drawText("0..1", 0, 0, true)&#13;
drawPolyline("1618, 1490, 1618, 1436, 975, 1436, 975, 1382)&#13;
drawText("is", 0, 1, true)&#13;
drawText("executing", 0, 13, true)&#13;
drawText("R8", 0, 0, true)&#13;
drawText("is being", 0, 1, true)&#13;
drawText("executed", 0, 13, true)&#13;
drawText("by", 0, 26, true)&#13;
drawText("0..1", 0, 1, true)&#13;
drawText("0..1", 0, 1, true)&#13;
drawPolyline("1447, 1554, 1597, 1554)&#13;
drawText("completes", 0, 1, true)&#13;
drawText("at", 0, 13, true)&#13;
drawText("R11", 0, 1, true)&#13;
drawText("is", 0, 0, true)&#13;
drawText("destination", 0, 13, true)&#13;
drawText("for", 0, 26, true)&#13;
drawText("1", 0, 1, true)&#13;
drawText("0..1", 0, 1, true)&#13;
drawPolyline("1447, 1500, 1597, 1500)&#13;
drawText("originates", 0, 1, true)&#13;
drawText("at", 0, 14, true)&#13;
drawText("R10", 0, 1, true)&#13;
drawText("is", 0, 1, true)&#13;
drawText("source", 0, 14, true)&#13;
drawText("for", 0, 27, true)&#13;
drawText("1", 0, 1, true)&#13;
drawText("0..1", 0, 1, true)&#13;
drawPolyline("1039, 1382, 1039, 1415, 1372, 1415)&#13;
drawPolyline("1168, 1382, 1168, 1393, 1372, 1415)&#13;
drawPolyline("1307, 1157, 1168, 1157, 1168, 1318)&#13;
drawText("is", 0, 0, true)&#13;
drawText("assigned", 0, 13, true)&#13;
drawText("to", 0, 26, true)&#13;
drawText("R5", 0, 1, true)&#13;
drawText("is", 0, 1, true)&#13;
drawText("assigned", 0, 14, true)&#13;
drawText("to", 0, 26, true)&#13;
drawText("0..1", 0, 1, true)&#13;
drawText("0..1", 0, 0, true)&#13;
drawPolyline("1104, 1200, 1168, 1200)&#13;
drawPolyline("1372, 1254, 1415, 1254)&#13;
drawPolyline("1372, 1479, 1372, 1415)&#13;
drawText("R7", 0, 0, true)&#13;
drawPolyline("1372, 1382, 1372, 1415)&#13;
drawPolyline("1415, 1318, 1415, 1179)&#13;
drawText("is", 0, 1, true)&#13;
drawText("assigned", 0, 14, true)&#13;
drawText("to", 0, 26, true)&#13;
drawText("R6", 0, 0, true)&#13;
drawText("is", 0, 1, true)&#13;
drawText("assigned", 0, 14, true)&#13;
drawText("to", 0, 26, true)&#13;
drawText("1", 0, 0, true)&#13;
drawText("0..1", 0, 1, true)&#13;
drawPolyline("1168, 1061, 1168, 1007)&#13;
drawPolyline("1039, 1007, 1297, 1007)&#13;
drawText("is", 0, 1, true)&#13;
drawText("owned", 0, 13, true)&#13;
drawText("by", 0, 26, true)&#13;
drawText("R2", 0, 0, true)&#13;
drawText("owns", 0, 0, true)&#13;
drawText("0..1", 0, 0, true)&#13;
drawText("*", 0, 0, true)&#13;
drawPolyline("1039, 975, 1297, 975)&#13;
drawText("needed", 0, 1, true)&#13;
drawText("by", 0, 14, true)&#13;
drawText("R1", 0, 1, true)&#13;
drawText("needs", 0, 1, true)&#13;
drawText("*", 0, 0, true)&#13;
drawText("*", 0, 0, true)&#13;
drawPolyline("1168, 911, 1168, 975)&#13;
drawText("{*}", 0, 0, true)&#13;
drawPolyline("1597, 1125, 1597, 1104, 1372, 1104)&#13;
drawPolyline("1372, 1125, 1372, 1104)&#13;
drawPolyline("1447, 1007, 1629, 1007)&#13;
drawText("is", 0, 1, true)&#13;
drawText("permanent", 0, 14, true)&#13;
drawText("home", 0, 27, true)&#13;
drawText("for", 0, 39, true)&#13;
drawText("R4", 0, 1, true)&#13;
drawText("is", 0, 1, true)&#13;
drawText("permanently", 0, 14, true)&#13;
drawText("assigned", 0, 26, true)&#13;
drawText("to", 0, 39, true)&#13;
drawText("0..1", 0, 0, true)&#13;
drawText("1", 0, 0, true)&#13;
drawPolyline("1372, 1072, 1372, 1104)&#13;
drawText("R3", 0, 0, true)&#13;
drawRectangle(1296, 920, 151, 152)&#13;
drawRectangle(1444, 993, 5, 5)&#13;
drawRectangle(1444, 1069, 5, 5)&#13;
drawRectangle(1369, 1069, 5, 5)&#13;
drawRectangle(1294, 1069, 5, 5)&#13;
drawRectangle(1294, 993, 5, 5)&#13;
drawRectangle(1294, 918, 5, 5)&#13;
drawRectangle(1369, 918, 5, 5)&#13;
drawRectangle(1444, 918, 5, 5)&#13;
drawRectangle(942, 1167, 162, 66)&#13;
drawRectangle(1101, 1197, 5, 5)&#13;
drawRectangle(1101, 1230, 5, 5)&#13;
drawRectangle(1020, 1230, 5, 5)&#13;
drawRectangle(940, 1230, 5, 5)&#13;
drawRectangle(940, 1197, 5, 5)&#13;
drawRectangle(940, 1165, 5, 5)&#13;
drawRectangle(1020, 1165, 5, 5)&#13;
drawRectangle(1101, 1165, 5, 5)&#13;
drawRectangle(1531, 1124, 130, 55)&#13;
drawRectangle(1658, 1149, 5, 5)&#13;
drawRectangle(1658, 1176, 5, 5)&#13;
drawRectangle(1593, 1176, 5, 5)&#13;
drawRectangle(1529, 1176, 5, 5)&#13;
drawRectangle(1529, 1149, 5, 5)&#13;
drawRectangle(1529, 1122, 5, 5)&#13;
drawRectangle(1593, 1122, 5, 5)&#13;
drawRectangle(1658, 1122, 5, 5)</expected>
          <actual>drawRectangle(1629, 1286, 149, 106)&#13;
drawText("Robot", 1690, 1289, true)&#13;
drawText("{12,D_R}", 1730, 1301, true)&#13;
drawline(1629, 1317, 1778, 1317)&#13;
drawText("Robot_ID:integer", 1632, 1319, true)&#13;
drawText("{I}", 1762, 1319, true)&#13;
drawText("Disk_Transfer_ID:uniqu...", 1632, 1332, true)&#13;
drawText("{R9}", 1753, 1332, true)&#13;
drawText("Actual_X_Coordinate:integer", 1632, 1345, true)&#13;
drawText("Actual_Y_Coordinate:integer", 1632, 1358, true)&#13;
drawText("Actual_Theta_Coordinate:in...", 1632, 1370, true)&#13;
drawline(1629, 1398, 1778, 1398)&#13;
drawRectangle(1597, 1490, 138, 74)&#13;
drawText("Disk Transfer", 1635, 1492, true)&#13;
drawText("{13,D_DT}", 1680, 1505, true)&#13;
drawline(1597, 1520, 1735, 1520)&#13;
drawText("Disk_Transfer_ID:uniq...", 1599, 1523, true)&#13;
drawText("{I}", 1719, 1523, true)&#13;
drawText("Source_ID:integer", 1599, 1536, true)&#13;
drawText("{R10}", 1704, 1536, true)&#13;
drawText("Destination_ID:integer", 1599, 1549, true)&#13;
drawText("{R11}", 1704, 1549, true)&#13;
drawline(1597, 1577, 1735, 1577)&#13;
drawRectangle(954, 1307, 117, 75)&#13;
drawText("Entry_Exit Port", 977, 1310, true)&#13;
drawText("{8,D_P}", 1029, 1323, true)&#13;
drawline(954, 1338, 1071, 1338)&#13;
drawText("Port_ID:integer", 956, 1341, true)&#13;
drawText("{I,R7}", 1038, 1341, true)&#13;
drawText("current_state:state&lt;S...", 956, 1354, true)&#13;
drawText("Disk_Transfer_I...", 956, 1366, true)&#13;
drawText("{R8}", 1045, 1366, true)&#13;
drawline(954, 1382, 1071, 1382)&#13;
drawRectangle(1125, 1318, 96, 64)&#13;
drawText("Drive", 1161, 1321, true)&#13;
drawText("{7,D_DR}", 1171, 1334, true)&#13;
drawline(1125, 1349, 1221, 1349)&#13;
drawText("Drive_ID:i...", 1128, 1352, true)&#13;
drawText("{I,R7}", 1188, 1352, true)&#13;
drawText("Idle:boolean", 1128, 1364, true)&#13;
drawline(1125, 1392, 1221, 1392)&#13;
drawRectangle(1222, 1222, 149, 63)&#13;
drawText("Slot_Disk Assignment", 1245, 1224, true)&#13;
drawText("{5,D_SDA}", 1315, 1237, true)&#13;
drawline(1222, 1252, 1371, 1252)&#13;
drawText("Disk_ID:integer", 1224, 1255, true)&#13;
drawText("{I,R6}", 1338, 1255, true)&#13;
drawText("Slot_ID:integer", 1224, 1268, true)&#13;
drawText("{R6}", 1346, 1268, true)&#13;
drawline(1222, 1283, 1371, 1283)&#13;
drawRectangle(1297, 1479, 149, 96)&#13;
drawText("Online Location", 1335, 1482, true)&#13;
drawText("{15,D_OL}", 1391, 1494, true)&#13;
drawline(1297, 1510, 1446, 1510)&#13;
drawText("Online_Location_ID:integer", 1299, 1512, true)&#13;
drawText("{I}", 1429, 1512, true)&#13;
drawText("X_Coordinate:integer", 1299, 1525, true)&#13;
drawText("Y_Coordinate:integer", 1299, 1538, true)&#13;
drawText("Theta_Coordinate:integer", 1299, 1551, true)&#13;
drawText("current_state:state&lt;State_M...", 1299, 1563, true)&#13;
drawline(1297, 1579, 1446, 1579)&#13;
drawRectangle(1318, 1318, 107, 64)&#13;
drawText("Slot", 1363, 1321, true)&#13;
drawText("{6,D_S}", 1383, 1334, true)&#13;
drawline(1318, 1349, 1425, 1349)&#13;
drawText("Slot_ID:integer", 1321, 1352, true)&#13;
drawText("{I,R7}", 1392, 1352, true)&#13;
drawText("Unassigned:boolean", 1321, 1364, true)&#13;
drawline(1318, 1392, 1425, 1392)&#13;
drawRectangle(943, 1168, 160, 64)&#13;
drawText("Drive_Disk Assignment", 968, 1171, true)&#13;
drawText("{14,D_DDA}", 1039, 1183, true)&#13;
drawline(943, 1199, 1103, 1199)&#13;
drawText("Drive_ID:integer", 946, 1202, true)&#13;
drawText("{I,R5}", 1070, 1202, true)&#13;
drawText("Disk_ID:integer", 946, 1214, true)&#13;
drawText("{R5}", 1078, 1214, true)&#13;
drawline(943, 1230, 1103, 1230)&#13;
drawRectangle(1104, 1061, 138, 53)&#13;
drawText("Disk Ownership", 1136, 1064, true)&#13;
drawText("{11,D_DO}", 1185, 1076, true)&#13;
drawline(1104, 1092, 1242, 1092)&#13;
drawText("Disk_ID:integer", 1106, 1094, true)&#13;
drawText("{I,R2}", 1210, 1094, true)&#13;
drawline(1104, 1122, 1242, 1122)&#13;
drawRectangle(889, 964, 150, 75)&#13;
drawText("Qualified Process", 924, 967, true)&#13;
drawText("{9,D_QP}", 989, 980, true)&#13;
drawline(889, 995, 1039, 995)&#13;
drawText("Qualified_Process_ID:inte...", 892, 998, true)&#13;
drawText("{I}", 1022, 998, true)&#13;
drawText("current_state:state&lt;State_M...", 892, 1011, true)&#13;
drawline(889, 1026, 1039, 1026)&#13;
drawRectangle(1093, 814, 149, 96)&#13;
drawText("Disk Request", 1138, 817, true)&#13;
drawText("{10,D_DQ}", 1185, 830, true)&#13;
drawline(1093, 845, 1242, 845)&#13;
drawText("Qualified_Process_ID:...", 1096, 848, true)&#13;
drawText("{I,R1}", 1210, 848, true)&#13;
drawText("Disk_ID:integer", 1096, 861, true)&#13;
drawText("{I,R1}", 1210, 861, true)&#13;
drawText("Time_of_Request:integer", 1096, 873, true)&#13;
drawText("{I}", 1226, 873, true)&#13;
drawText("Time_Request_Completed:i...", 1096, 886, true)&#13;
drawText("Request_Pending:boolean", 1096, 899, true)&#13;
drawline(1093, 927, 1242, 927)&#13;
drawRectangle(1532, 1125, 128, 53)&#13;
drawText("Offline Disk", 1569, 1128, true)&#13;
drawText("{3,D_OD}", 1610, 1141, true)&#13;
drawline(1532, 1156, 1660, 1156)&#13;
drawText("Disk_ID:integer", 1535, 1159, true)&#13;
drawText("{I,R3}", 1628, 1159, true)&#13;
drawline(1532, 1174, 1660, 1174)&#13;
drawRectangle(1307, 1125, 139, 53)&#13;
drawText("Online Disk", 1350, 1128, true)&#13;
drawText("{4,D_OND}", 1388, 1141, true)&#13;
drawline(1307, 1156, 1446, 1156)&#13;
drawText("Disk_ID:integer", 1310, 1159, true)&#13;
drawText("{I,R3}", 1413, 1159, true)&#13;
drawline(1307, 1174, 1446, 1174)&#13;
drawRectangle(1629, 964, 160, 85)&#13;
drawText("Permanent Home in Library", 1644, 967, true)&#13;
drawText("{2,D_H}", 1746, 980, true)&#13;
drawline(1629, 995, 1789, 995)&#13;
drawText("Row_Number:integer", 1632, 998, true)&#13;
drawText("{I}", 1772, 998, true)&#13;
drawText("Column_Number:integer", 1632, 1011, true)&#13;
drawText("{I}", 1772, 1011, true)&#13;
drawline(1629, 1026, 1789, 1026)&#13;
drawRectangle(1297, 921, 149, 150)&#13;
drawText("Disk", 1362, 924, true)&#13;
drawText("{1,D_D}", 1403, 937, true)&#13;
drawline(1297, 952, 1446, 952)&#13;
drawText("Disk_ID:integer", 1299, 955, true)&#13;
drawText("{I}", 1429, 955, true)&#13;
drawText("Serial_Number:integer", 1299, 968, true)&#13;
drawText("Row_Number:integer", 1299, 980, true)&#13;
drawText("{R4}", 1421, 980, true)&#13;
drawText("Column_Number:integer", 1299, 993, true)&#13;
drawText("{R4}", 1421, 993, true)&#13;
drawText("Number_of_Bytes_Available...", 1299, 1006, true)&#13;
drawText("Address_to_Start_Writing:in...", 1299, 1019, true)&#13;
drawText("Write_Protect_ Status:boolean", 1299, 1031, true)&#13;
drawText("Waiting_for_Slot:boolean", 1299, 1044, true)&#13;
drawText("Waiting_for_Drive:boolean", 1299, 1057, true)&#13;
drawline(1297, 1110, 1446, 1110)&#13;
drawPolyline("1715, 1490, 1715, 1393)&#13;
drawText("is", 0, 0, true)&#13;
drawText("executing", 0, 13, true)&#13;
drawText("R9", 0, 0, true)&#13;
drawText("is being", 0, 1, true)&#13;
drawText("executed", 0, 14, true)&#13;
drawText("by", 0, 27, true)&#13;
drawText("0..1", 0, 1, true)&#13;
drawText("0..1", 0, 0, true)&#13;
drawPolyline("1618, 1490, 1618, 1436, 975, 1436, 975, 1382)&#13;
drawText("is", 0, 1, true)&#13;
drawText("executing", 0, 13, true)&#13;
drawText("R8", 0, 0, true)&#13;
drawText("is being", 0, 1, true)&#13;
drawText("executed", 0, 13, true)&#13;
drawText("by", 0, 26, true)&#13;
drawText("0..1", 0, 1, true)&#13;
drawText("0..1", 0, 1, true)&#13;
drawPolyline("1447, 1554, 1597, 1554)&#13;
drawText("completes", 0, 1, true)&#13;
drawText("at", 0, 13, true)&#13;
drawText("R11", 0, 1, true)&#13;
drawText("is", 0, 0, true)&#13;
drawText("destination", 0, 13, true)&#13;
drawText("for", 0, 26, true)&#13;
drawText("1", 0, 1, true)&#13;
drawText("0..1", 0, 1, true)&#13;
drawPolyline("1447, 1500, 1597, 1500)&#13;
drawText("originates", 0, 1, true)&#13;
drawText("at", 0, 14, true)&#13;
drawText("R10", 0, 1, true)&#13;
drawText("is", 0, 1, true)&#13;
drawText("source", 0, 14, true)&#13;
drawText("for", 0, 27, true)&#13;
drawText("1", 0, 1, true)&#13;
drawText("0..1", 0, 1, true)&#13;
drawPolyline("1039, 1382, 1039, 1415, 1372, 1415)&#13;
drawPolyline("1168, 1382, 1168, 1393, 1372, 1415)&#13;
drawPolyline("1307, 1157, 1168, 1157, 1168, 1318)&#13;
drawText("is", 0, 0, true)&#13;
drawText("assigned", 0, 13, true)&#13;
drawText("to", 0, 26, true)&#13;
drawText("R5", 0, 1, true)&#13;
drawText("is", 0, 1, true)&#13;
drawText("assigned", 0, 14, true)&#13;
drawText("to", 0, 26, true)&#13;
drawText("0..1", 0, 1, true)&#13;
drawText("0..1", 0, 0, true)&#13;
drawPolyline("1104, 1200, 1168, 1200)&#13;
drawPolyline("1372, 1254, 1415, 1254)&#13;
drawPolyline("1372, 1479, 1372, 1415)&#13;
drawText("R7", 0, 0, true)&#13;
drawPolyline("1372, 1382, 1372, 1415)&#13;
drawPolyline("1415, 1318, 1415, 1179)&#13;
drawText("is", 0, 1, true)&#13;
drawText("assigned", 0, 14, true)&#13;
drawText("to", 0, 26, true)&#13;
drawText("R6", 0, 0, true)&#13;
drawText("is", 0, 1, true)&#13;
drawText("assigned", 0, 14, true)&#13;
drawText("to", 0, 26, true)&#13;
drawText("1", 0, 0, true)&#13;
drawText("0..1", 0, 1, true)&#13;
drawPolyline("1168, 1061, 1168, 1007)&#13;
drawPolyline("1039, 1007, 1297, 1007)&#13;
drawText("is", 0, 1, true)&#13;
drawText("owned", 0, 13, true)&#13;
drawText("by", 0, 26, true)&#13;
drawText("R2", 0, 0, true)&#13;
drawText("owns", 0, 0, true)&#13;
drawText("0..1", 0, 0, true)&#13;
drawText("*", 0, 0, true)&#13;
drawPolyline("1039, 975, 1297, 975)&#13;
drawText("needed", 0, 1, true)&#13;
drawText("by", 0, 14, true)&#13;
drawText("R1", 0, 1, true)&#13;
drawText("needs", 0, 1, true)&#13;
drawText("*", 0, 0, true)&#13;
drawText("*", 0, 0, true)&#13;
drawPolyline("1168, 911, 1168, 975)&#13;
drawText("{*}", 0, 0, true)&#13;
drawPolyline("1597, 1125, 1597, 1104, 1372, 1104)&#13;
drawPolyline("1372, 1125, 1372, 1104)&#13;
drawPolyline("1447, 1007, 1629, 1007)&#13;
drawText("is", 0, 1, true)&#13;
drawText("permanent", 0, 14, true)&#13;
drawText("home", 0, 27, true)&#13;
drawText("for", 0, 39, true)&#13;
drawText("R4", 0, 1, true)&#13;
drawText("is", 0, 1, true)&#13;
drawText("permanently", 0, 14, true)&#13;
drawText("assigned", 0, 26, true)&#13;
drawText("to", 0, 39, true)&#13;
drawText("0..1", 0, 0, true)&#13;
drawText("1", 0, 0, true)&#13;
drawPolyline("1372, 1072, 1372, 1104)&#13;
drawText("R3", 0, 0, true)&#13;
drawRectangle(1296, 920, 151, 151)&#13;
drawRectangle(1369, 918, 5, 5)&#13;
drawRectangle(1444, 993, 5, 5)&#13;
drawRectangle(1369, 1068, 5, 5)&#13;
drawRectangle(1294, 993, 5, 5)&#13;
drawRectangle(1444, 1068, 5, 5)&#13;
drawRectangle(1294, 1068, 5, 5)&#13;
drawRectangle(1294, 918, 5, 5)&#13;
drawRectangle(1444, 918, 5, 5)&#13;
drawRectangle(942, 1167, 162, 65)&#13;
drawRectangle(1020, 1165, 5, 5)&#13;
drawRectangle(1101, 1197, 5, 5)&#13;
drawRectangle(1020, 1229, 5, 5)&#13;
drawRectangle(940, 1197, 5, 5)&#13;
drawRectangle(1101, 1229, 5, 5)&#13;
drawRectangle(940, 1229, 5, 5)&#13;
drawRectangle(940, 1165, 5, 5)&#13;
drawRectangle(1101, 1165, 5, 5)&#13;
drawRectangle(1531, 1124, 129, 54)&#13;
drawRectangle(1593, 1122, 5, 5)&#13;
drawRectangle(1657, 1148, 5, 5)&#13;
drawRectangle(1593, 1175, 5, 5)&#13;
drawRectangle(1529, 1148, 5, 5)&#13;
drawRectangle(1657, 1175, 5, 5)&#13;
drawRectangle(1529, 1175, 5, 5)&#13;
drawRectangle(1529, 1122, 5, 5)&#13;
drawRectangle(1657, 1122, 5, 5)</actual>junit.framework.ComparisonFailure: Actual results differ from those expected, file: 
1048578-5
 expected:&lt;...e(1296, 920, 151, 15[2)&#13;
drawRectangle(1444, 993, 5, 5)&#13;
drawRectangle(1444, 1069, 5, 5)&#13;
drawRectangle(1369, 1069, 5, 5)&#13;
drawRectangle(1294, 1069, 5, 5)&#13;
drawRectangle(1294, 993, 5, 5)&#13;
drawRectangle(1294, 918, 5, 5)&#13;
drawRectangle(1369, 918, 5, 5)&#13;
drawRectangle(1444, 918, 5, 5)&#13;
drawRectangle(942, 1167, 162, 66)&#13;
drawRectangle(1101, 1197, 5, 5)&#13;
drawRectangle(1101, 1230, 5, 5)&#13;
drawRectangle(1020, 1230, 5, 5)&#13;
drawRectangle(940, 1230, 5, 5)&#13;
drawRectangle(940, 1197, 5, 5)&#13;
drawRectangle(940, 1165, 5, 5)&#13;
drawRectangle(1020, 1165, 5, 5)&#13;
drawRectangle(1101, 1165, 5, 5)&#13;
drawRectangle(1531, 1124, 130, 55)&#13;
drawRectangle(1658, 1149, 5, 5)&#13;
drawRectangle(1658, 1176, 5, 5)&#13;
drawRectangle(1593, 1176, 5, 5)&#13;
drawRectangle(1529, 1176, 5, 5)&#13;
drawRectangle(1529, 1149, 5, 5)&#13;
drawRectangle(1529, 1122, 5, 5)&#13;
drawRectangle(1593, 1122, 5, 5)&#13;
drawRectangle(1658], 1122, 5, 5)&gt; but was:&lt;...e(1296, 920, 151, 15[1)&#13;
drawRectangle(1369, 918, 5, 5)&#13;
drawRectangle(1444, 993, 5, 5)&#13;
drawRectangle(1369, 1068, 5, 5)&#13;
drawRectangle(1294, 993, 5, 5)&#13;
drawRectangle(1444, 1068, 5, 5)&#13;
drawRectangle(1294, 1068, 5, 5)&#13;
drawRectangle(1294, 918, 5, 5)&#13;
drawRectangle(1444, 918, 5, 5)&#13;
drawRectangle(942, 1167, 162, 65)&#13;
drawRectangle(1020, 1165, 5, 5)&#13;
drawRectangle(1101, 1197, 5, 5)&#13;
drawRectangle(1020, 1229, 5, 5)&#13;
drawRectangle(940, 1197, 5, 5)&#13;
drawRectangle(1101, 1229, 5, 5)&#13;
drawRectangle(940, 1229, 5, 5)&#13;
drawRectangle(940, 1165, 5, 5)&#13;
drawRectangle(1101, 1165, 5, 5)&#13;
drawRectangle(1531, 1124, 129, 54)&#13;
drawRectangle(1593, 1122, 5, 5)&#13;
drawRectangle(1657, 1148, 5, 5)&#13;
drawRectangle(1593, 1175, 5, 5)&#13;
drawRectangle(1529, 1148, 5, 5)&#13;
drawRectangle(1657, 1175, 5, 5)&#13;
drawRectangle(1529, 1175, 5, 5)&#13;
drawRectangle(1529, 1122, 5, 5)&#13;
drawRectangle(1657], 1122, 5, 5)&gt;&#13;
	at junit.framework.Assert.assertEquals(Assert.java:81)&#13;
	at com.mentor.nucleus.bp.ui.canvas.test.CanvasTest.doTestDiagram(CanvasTest.java:154)&#13;
	at com.mentor.nucleus.bp.ui.canvas.test.ODMSTest.testODMSClassDiagramDisplayWithSelection(ODMSTest.java:94)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at junit.framework.TestCase.runTest(TestCase.java:168)&#13;
	at junit.framework.TestCase.runBare(TestCase.java:134)&#13;
	at junit.framework.TestResult$1.protect(TestResult.java:110)&#13;
	at junit.framework.TestResult.runProtected(TestResult.java:128)&#13;
	at junit.framework.TestResult.run(TestResult.java:113)&#13;
	at junit.framework.TestCase.run(TestCase.java:124)&#13;
	at junit.framework.TestSuite.runTest(TestSuite.java:243)&#13;
	at junit.framework.TestSuite.run(TestSuite.java:238)&#13;
	at junit.framework.TestSuite.runTest(TestSuite.java:243)&#13;
	at junit.framework.TestSuite.run(TestSuite.java:238)&#13;
	at org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run(JUnit3TestReference.java:130)&#13;
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)&#13;
	at org.eclipse.pde.internal.junit.runtime.RemotePluginTestRunner.main(RemotePluginTestRunner.java:62)&#13;
	at org.eclipse.pde.internal.junit.runtime.PlatformUITestHarness$1.run(PlatformUITestHarness.java:47)&#13;
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)&#13;
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:135)&#13;
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4140)&#13;
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3757)&#13;
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2701)&#13;
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2665)&#13;
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2499)&#13;
	at org.eclipse.ui.internal.Workbench$7.run(Workbench.java:679)&#13;
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)&#13;
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:668)&#13;
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)&#13;
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:123)&#13;
	at org.eclipse.pde.internal.junit.runtime.NonUIThreadTestApplication.runApp(NonUIThreadTestApplication.java:54)&#13;
	at org.eclipse.pde.internal.junit.runtime.UITestApplication.runApp(UITestApplication.java:41)&#13;
	at org.eclipse.pde.internal.junit.runtime.NonUIThreadTestApplication.start(NonUIThreadTestApplication.java:48)&#13;
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:196)&#13;
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)&#13;
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)&#13;
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:344)&#13;
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:622)&#13;
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:577)&#13;
	at org.eclipse.equinox.launcher.Main.run(Main.java:1410)&#13;
	at org.eclipse.equinox.launcher.Main.main(Main.java:1386)&#13;
&#13;
</failure>
      </testcase>
      <testcase name="testODMSClassDiagramDisplayZoomedToSelection" classname="com.mentor.nucleus.bp.ui.canvas.test.ODMSTest" time="1.608">
        <failure>
          <expected>drawRectangle(1629, 1286, 149, 106)&#13;
drawText("Robot", 1690, 1289, true)&#13;
drawText("{12,D_R}", 1730, 1301, true)&#13;
drawline(1629, 1317, 1778, 1317)&#13;
drawText("Robot_ID:integer", 1632, 1319, true)&#13;
drawText("{I}", 1762, 1319, true)&#13;
drawText("Disk_Transfer_ID:uniqu...", 1632, 1332, true)&#13;
drawText("{R9}", 1753, 1332, true)&#13;
drawText("Actual_X_Coordinate:integer", 1632, 1345, true)&#13;
drawText("Actual_Y_Coordinate:integer", 1632, 1358, true)&#13;
drawText("Actual_Theta_Coordinate:in...", 1632, 1370, true)&#13;
drawline(1629, 1398, 1778, 1398)&#13;
drawRectangle(1597, 1490, 138, 74)&#13;
drawText("Disk Transfer", 1635, 1492, true)&#13;
drawText("{13,D_DT}", 1680, 1505, true)&#13;
drawline(1597, 1520, 1735, 1520)&#13;
drawText("Disk_Transfer_ID:uniq...", 1599, 1523, true)&#13;
drawText("{I}", 1719, 1523, true)&#13;
drawText("Source_ID:integer", 1599, 1536, true)&#13;
drawText("{R10}", 1704, 1536, true)&#13;
drawText("Destination_ID:integer", 1599, 1549, true)&#13;
drawText("{R11}", 1704, 1549, true)&#13;
drawline(1597, 1577, 1735, 1577)&#13;
drawRectangle(954, 1307, 117, 75)&#13;
drawText("Entry_Exit Port", 977, 1310, true)&#13;
drawText("{8,D_P}", 1029, 1323, true)&#13;
drawline(954, 1338, 1071, 1338)&#13;
drawText("Port_ID:integer", 956, 1341, true)&#13;
drawText("{I,R7}", 1038, 1341, true)&#13;
drawText("current_state:state&lt;S...", 956, 1354, true)&#13;
drawText("Disk_Transfer_I...", 956, 1366, true)&#13;
drawText("{R8}", 1045, 1366, true)&#13;
drawline(954, 1382, 1071, 1382)&#13;
drawRectangle(1125, 1318, 96, 64)&#13;
drawText("Drive", 1161, 1321, true)&#13;
drawText("{7,D_DR}", 1171, 1334, true)&#13;
drawline(1125, 1349, 1221, 1349)&#13;
drawText("Drive_ID:i...", 1128, 1352, true)&#13;
drawText("{I,R7}", 1188, 1352, true)&#13;
drawText("Idle:boolean", 1128, 1364, true)&#13;
drawline(1125, 1392, 1221, 1392)&#13;
drawRectangle(1222, 1222, 149, 63)&#13;
drawText("Slot_Disk Assignment", 1245, 1224, true)&#13;
drawText("{5,D_SDA}", 1315, 1237, true)&#13;
drawline(1222, 1252, 1371, 1252)&#13;
drawText("Disk_ID:integer", 1224, 1255, true)&#13;
drawText("{I,R6}", 1338, 1255, true)&#13;
drawText("Slot_ID:integer", 1224, 1268, true)&#13;
drawText("{R6}", 1346, 1268, true)&#13;
drawline(1222, 1283, 1371, 1283)&#13;
drawRectangle(1297, 1479, 149, 96)&#13;
drawText("Online Location", 1335, 1482, true)&#13;
drawText("{15,D_OL}", 1391, 1494, true)&#13;
drawline(1297, 1510, 1446, 1510)&#13;
drawText("Online_Location_ID:integer", 1299, 1512, true)&#13;
drawText("{I}", 1429, 1512, true)&#13;
drawText("X_Coordinate:integer", 1299, 1525, true)&#13;
drawText("Y_Coordinate:integer", 1299, 1538, true)&#13;
drawText("Theta_Coordinate:integer", 1299, 1551, true)&#13;
drawText("current_state:state&lt;State_M...", 1299, 1563, true)&#13;
drawline(1297, 1579, 1446, 1579)&#13;
drawRectangle(1318, 1318, 107, 64)&#13;
drawText("Slot", 1363, 1321, true)&#13;
drawText("{6,D_S}", 1383, 1334, true)&#13;
drawline(1318, 1349, 1425, 1349)&#13;
drawText("Slot_ID:integer", 1321, 1352, true)&#13;
drawText("{I,R7}", 1392, 1352, true)&#13;
drawText("Unassigned:boolean", 1321, 1364, true)&#13;
drawline(1318, 1392, 1425, 1392)&#13;
drawRectangle(943, 1168, 160, 64)&#13;
drawText("Drive_Disk Assignment", 968, 1171, true)&#13;
drawText("{14,D_DDA}", 1039, 1183, true)&#13;
drawline(943, 1199, 1103, 1199)&#13;
drawText("Drive_ID:integer", 946, 1202, true)&#13;
drawText("{I,R5}", 1070, 1202, true)&#13;
drawText("Disk_ID:integer", 946, 1214, true)&#13;
drawText("{R5}", 1078, 1214, true)&#13;
drawline(943, 1230, 1103, 1230)&#13;
drawRectangle(1104, 1061, 138, 53)&#13;
drawText("Disk Ownership", 1136, 1064, true)&#13;
drawText("{11,D_DO}", 1185, 1076, true)&#13;
drawline(1104, 1092, 1242, 1092)&#13;
drawText("Disk_ID:integer", 1106, 1094, true)&#13;
drawText("{I,R2}", 1210, 1094, true)&#13;
drawline(1104, 1122, 1242, 1122)&#13;
drawRectangle(889, 964, 150, 75)&#13;
drawText("Qualified Process", 924, 967, true)&#13;
drawText("{9,D_QP}", 989, 980, true)&#13;
drawline(889, 995, 1039, 995)&#13;
drawText("Qualified_Process_ID:inte...", 892, 998, true)&#13;
drawText("{I}", 1022, 998, true)&#13;
drawText("current_state:state&lt;State_M...", 892, 1011, true)&#13;
drawline(889, 1026, 1039, 1026)&#13;
drawRectangle(1093, 814, 149, 96)&#13;
drawText("Disk Request", 1138, 817, true)&#13;
drawText("{10,D_DQ}", 1185, 830, true)&#13;
drawline(1093, 845, 1242, 845)&#13;
drawText("Qualified_Process_ID:...", 1096, 848, true)&#13;
drawText("{I,R1}", 1210, 848, true)&#13;
drawText("Disk_ID:integer", 1096, 861, true)&#13;
drawText("{I,R1}", 1210, 861, true)&#13;
drawText("Time_of_Request:integer", 1096, 873, true)&#13;
drawText("{I}", 1226, 873, true)&#13;
drawText("Time_Request_Completed:i...", 1096, 886, true)&#13;
drawText("Request_Pending:boolean", 1096, 899, true)&#13;
drawline(1093, 927, 1242, 927)&#13;
drawRectangle(1532, 1125, 128, 53)&#13;
drawText("Offline Disk", 1569, 1128, true)&#13;
drawText("{3,D_OD}", 1610, 1141, true)&#13;
drawline(1532, 1156, 1660, 1156)&#13;
drawText("Disk_ID:integer", 1535, 1159, true)&#13;
drawText("{I,R3}", 1628, 1159, true)&#13;
drawline(1532, 1174, 1660, 1174)&#13;
drawRectangle(1307, 1125, 139, 53)&#13;
drawText("Online Disk", 1350, 1128, true)&#13;
drawText("{4,D_OND}", 1388, 1141, true)&#13;
drawline(1307, 1156, 1446, 1156)&#13;
drawText("Disk_ID:integer", 1310, 1159, true)&#13;
drawText("{I,R3}", 1413, 1159, true)&#13;
drawline(1307, 1174, 1446, 1174)&#13;
drawRectangle(1629, 964, 160, 85)&#13;
drawText("Permanent Home in Library", 1644, 967, true)&#13;
drawText("{2,D_H}", 1746, 980, true)&#13;
drawline(1629, 995, 1789, 995)&#13;
drawText("Row_Number:integer", 1632, 998, true)&#13;
drawText("{I}", 1772, 998, true)&#13;
drawText("Column_Number:integer", 1632, 1011, true)&#13;
drawText("{I}", 1772, 1011, true)&#13;
drawline(1629, 1026, 1789, 1026)&#13;
drawRectangle(1297, 921, 149, 150)&#13;
drawText("Disk", 1362, 924, true)&#13;
drawText("{1,D_D}", 1403, 937, true)&#13;
drawline(1297, 952, 1446, 952)&#13;
drawText("Disk_ID:integer", 1299, 955, true)&#13;
drawText("{I}", 1429, 955, true)&#13;
drawText("Serial_Number:integer", 1299, 968, true)&#13;
drawText("Row_Number:integer", 1299, 980, true)&#13;
drawText("{R4}", 1421, 980, true)&#13;
drawText("Column_Number:integer", 1299, 993, true)&#13;
drawText("{R4}", 1421, 993, true)&#13;
drawText("Number_of_Bytes_Available...", 1299, 1006, true)&#13;
drawText("Address_to_Start_Writing:in...", 1299, 1019, true)&#13;
drawText("Write_Protect_ Status:boolean", 1299, 1031, true)&#13;
drawText("Waiting_for_Slot:boolean", 1299, 1044, true)&#13;
drawText("Waiting_for_Drive:boolean", 1299, 1057, true)&#13;
drawline(1297, 1110, 1446, 1110)&#13;
drawPolyline("1715, 1490, 1715, 1393)&#13;
drawText("is", 0, 0, true)&#13;
drawText("executing", 0, 13, true)&#13;
drawText("R9", 0, 0, true)&#13;
drawText("is being", 0, 1, true)&#13;
drawText("executed", 0, 14, true)&#13;
drawText("by", 0, 27, true)&#13;
drawText("0..1", 0, 1, true)&#13;
drawText("0..1", 0, 0, true)&#13;
drawPolyline("1618, 1490, 1618, 1436, 975, 1436, 975, 1382)&#13;
drawText("is", 0, 1, true)&#13;
drawText("executing", 0, 13, true)&#13;
drawText("R8", 0, 0, true)&#13;
drawText("is being", 0, 1, true)&#13;
drawText("executed", 0, 13, true)&#13;
drawText("by", 0, 26, true)&#13;
drawText("0..1", 0, 1, true)&#13;
drawText("0..1", 0, 1, true)&#13;
drawPolyline("1447, 1554, 1597, 1554)&#13;
drawText("completes", 0, 1, true)&#13;
drawText("at", 0, 13, true)&#13;
drawText("R11", 0, 1, true)&#13;
drawText("is", 0, 0, true)&#13;
drawText("destination", 0, 13, true)&#13;
drawText("for", 0, 26, true)&#13;
drawText("1", 0, 1, true)&#13;
drawText("0..1", 0, 1, true)&#13;
drawPolyline("1447, 1500, 1597, 1500)&#13;
drawText("originates", 0, 1, true)&#13;
drawText("at", 0, 14, true)&#13;
drawText("R10", 0, 1, true)&#13;
drawText("is", 0, 1, true)&#13;
drawText("source", 0, 14, true)&#13;
drawText("for", 0, 27, true)&#13;
drawText("1", 0, 1, true)&#13;
drawText("0..1", 0, 1, true)&#13;
drawPolyline("1039, 1382, 1039, 1415, 1372, 1415)&#13;
drawPolyline("1168, 1382, 1168, 1393, 1372, 1415)&#13;
drawPolyline("1307, 1157, 1168, 1157, 1168, 1318)&#13;
drawText("is", 0, 0, true)&#13;
drawText("assigned", 0, 13, true)&#13;
drawText("to", 0, 26, true)&#13;
drawText("R5", 0, 1, true)&#13;
drawText("is", 0, 1, true)&#13;
drawText("assigned", 0, 14, true)&#13;
drawText("to", 0, 26, true)&#13;
drawText("0..1", 0, 1, true)&#13;
drawText("0..1", 0, 0, true)&#13;
drawPolyline("1104, 1200, 1168, 1200)&#13;
drawPolyline("1372, 1254, 1415, 1254)&#13;
drawPolyline("1372, 1479, 1372, 1415)&#13;
drawText("R7", 0, 0, true)&#13;
drawPolyline("1372, 1382, 1372, 1415)&#13;
drawPolyline("1415, 1318, 1415, 1179)&#13;
drawText("is", 0, 1, true)&#13;
drawText("assigned", 0, 14, true)&#13;
drawText("to", 0, 26, true)&#13;
drawText("R6", 0, 0, true)&#13;
drawText("is", 0, 1, true)&#13;
drawText("assigned", 0, 14, true)&#13;
drawText("to", 0, 26, true)&#13;
drawText("1", 0, 0, true)&#13;
drawText("0..1", 0, 1, true)&#13;
drawPolyline("1168, 1061, 1168, 1007)&#13;
drawPolyline("1039, 1007, 1297, 1007)&#13;
drawText("is", 0, 1, true)&#13;
drawText("owned", 0, 13, true)&#13;
drawText("by", 0, 26, true)&#13;
drawText("R2", 0, 0, true)&#13;
drawText("owns", 0, 0, true)&#13;
drawText("0..1", 0, 0, true)&#13;
drawText("*", 0, 0, true)&#13;
drawPolyline("1039, 975, 1297, 975)&#13;
drawText("needed", 0, 1, true)&#13;
drawText("by", 0, 14, true)&#13;
drawText("R1", 0, 1, true)&#13;
drawText("needs", 0, 1, true)&#13;
drawText("*", 0, 0, true)&#13;
drawText("*", 0, 0, true)&#13;
drawPolyline("1168, 911, 1168, 975)&#13;
drawText("{*}", 0, 0, true)&#13;
drawPolyline("1597, 1125, 1597, 1104, 1372, 1104)&#13;
drawPolyline("1372, 1125, 1372, 1104)&#13;
drawPolyline("1447, 1007, 1629, 1007)&#13;
drawText("is", 0, 1, true)&#13;
drawText("permanent", 0, 14, true)&#13;
drawText("home", 0, 27, true)&#13;
drawText("for", 0, 39, true)&#13;
drawText("R4", 0, 1, true)&#13;
drawText("is", 0, 1, true)&#13;
drawText("permanently", 0, 14, true)&#13;
drawText("assigned", 0, 26, true)&#13;
drawText("to", 0, 39, true)&#13;
drawText("0..1", 0, 0, true)&#13;
drawText("1", 0, 0, true)&#13;
drawPolyline("1372, 1072, 1372, 1104)&#13;
drawText("R3", 0, 0, true)&#13;
drawRectangle(1531, 1124, 130, 55)&#13;
drawRectangle(1658, 1149, 5, 5)&#13;
drawRectangle(1658, 1176, 5, 5)&#13;
drawRectangle(1593, 1176, 5, 5)&#13;
drawRectangle(1529, 1176, 5, 5)&#13;
drawRectangle(1529, 1149, 5, 5)&#13;
drawRectangle(1529, 1122, 5, 5)&#13;
drawRectangle(1593, 1122, 5, 5)&#13;
drawRectangle(1658, 1122, 5, 5)&#13;
drawRectangle(942, 1167, 162, 66)&#13;
drawRectangle(1101, 1197, 5, 5)&#13;
drawRectangle(1101, 1230, 5, 5)&#13;
drawRectangle(1020, 1230, 5, 5)&#13;
drawRectangle(940, 1230, 5, 5)&#13;
drawRectangle(940, 1197, 5, 5)&#13;
drawRectangle(940, 1165, 5, 5)&#13;
drawRectangle(1020, 1165, 5, 5)&#13;
drawRectangle(1101, 1165, 5, 5)&#13;
drawRectangle(888, 963, 152, 77)&#13;
drawRectangle(1037, 999, 5, 5)&#13;
drawRectangle(1037, 1037, 5, 5)&#13;
drawRectangle(961, 1037, 5, 5)&#13;
drawRectangle(886, 1037, 5, 5)&#13;
drawRectangle(886, 999, 5, 5)&#13;
drawRectangle(886, 961, 5, 5)&#13;
drawRectangle(961, 961, 5, 5)&#13;
drawRectangle(1037, 961, 5, 5)</expected>
          <actual>drawRectangle(1629, 1286, 149, 106)&#13;
drawText("Robot", 1690, 1289, true)&#13;
drawText("{12,D_R}", 1730, 1301, true)&#13;
drawline(1629, 1317, 1778, 1317)&#13;
drawText("Robot_ID:integer", 1632, 1319, true)&#13;
drawText("{I}", 1762, 1319, true)&#13;
drawText("Disk_Transfer_ID:uniqu...", 1632, 1332, true)&#13;
drawText("{R9}", 1753, 1332, true)&#13;
drawText("Actual_X_Coordinate:integer", 1632, 1345, true)&#13;
drawText("Actual_Y_Coordinate:integer", 1632, 1358, true)&#13;
drawText("Actual_Theta_Coordinate:in...", 1632, 1370, true)&#13;
drawline(1629, 1398, 1778, 1398)&#13;
drawRectangle(1597, 1490, 138, 74)&#13;
drawText("Disk Transfer", 1635, 1492, true)&#13;
drawText("{13,D_DT}", 1680, 1505, true)&#13;
drawline(1597, 1520, 1735, 1520)&#13;
drawText("Disk_Transfer_ID:uniq...", 1599, 1523, true)&#13;
drawText("{I}", 1719, 1523, true)&#13;
drawText("Source_ID:integer", 1599, 1536, true)&#13;
drawText("{R10}", 1704, 1536, true)&#13;
drawText("Destination_ID:integer", 1599, 1549, true)&#13;
drawText("{R11}", 1704, 1549, true)&#13;
drawline(1597, 1577, 1735, 1577)&#13;
drawRectangle(954, 1307, 117, 75)&#13;
drawText("Entry_Exit Port", 977, 1310, true)&#13;
drawText("{8,D_P}", 1029, 1323, true)&#13;
drawline(954, 1338, 1071, 1338)&#13;
drawText("Port_ID:integer", 956, 1341, true)&#13;
drawText("{I,R7}", 1038, 1341, true)&#13;
drawText("current_state:state&lt;S...", 956, 1354, true)&#13;
drawText("Disk_Transfer_I...", 956, 1366, true)&#13;
drawText("{R8}", 1045, 1366, true)&#13;
drawline(954, 1382, 1071, 1382)&#13;
drawRectangle(1125, 1318, 96, 64)&#13;
drawText("Drive", 1161, 1321, true)&#13;
drawText("{7,D_DR}", 1171, 1334, true)&#13;
drawline(1125, 1349, 1221, 1349)&#13;
drawText("Drive_ID:i...", 1128, 1352, true)&#13;
drawText("{I,R7}", 1188, 1352, true)&#13;
drawText("Idle:boolean", 1128, 1364, true)&#13;
drawline(1125, 1392, 1221, 1392)&#13;
drawRectangle(1222, 1222, 149, 63)&#13;
drawText("Slot_Disk Assignment", 1245, 1224, true)&#13;
drawText("{5,D_SDA}", 1315, 1237, true)&#13;
drawline(1222, 1252, 1371, 1252)&#13;
drawText("Disk_ID:integer", 1224, 1255, true)&#13;
drawText("{I,R6}", 1338, 1255, true)&#13;
drawText("Slot_ID:integer", 1224, 1268, true)&#13;
drawText("{R6}", 1346, 1268, true)&#13;
drawline(1222, 1283, 1371, 1283)&#13;
drawRectangle(1297, 1479, 149, 96)&#13;
drawText("Online Location", 1335, 1482, true)&#13;
drawText("{15,D_OL}", 1391, 1494, true)&#13;
drawline(1297, 1510, 1446, 1510)&#13;
drawText("Online_Location_ID:integer", 1299, 1512, true)&#13;
drawText("{I}", 1429, 1512, true)&#13;
drawText("X_Coordinate:integer", 1299, 1525, true)&#13;
drawText("Y_Coordinate:integer", 1299, 1538, true)&#13;
drawText("Theta_Coordinate:integer", 1299, 1551, true)&#13;
drawText("current_state:state&lt;State_M...", 1299, 1563, true)&#13;
drawline(1297, 1579, 1446, 1579)&#13;
drawRectangle(1318, 1318, 107, 64)&#13;
drawText("Slot", 1363, 1321, true)&#13;
drawText("{6,D_S}", 1383, 1334, true)&#13;
drawline(1318, 1349, 1425, 1349)&#13;
drawText("Slot_ID:integer", 1321, 1352, true)&#13;
drawText("{I,R7}", 1392, 1352, true)&#13;
drawText("Unassigned:boolean", 1321, 1364, true)&#13;
drawline(1318, 1392, 1425, 1392)&#13;
drawRectangle(943, 1168, 160, 64)&#13;
drawText("Drive_Disk Assignment", 968, 1171, true)&#13;
drawText("{14,D_DDA}", 1039, 1183, true)&#13;
drawline(943, 1199, 1103, 1199)&#13;
drawText("Drive_ID:integer", 946, 1202, true)&#13;
drawText("{I,R5}", 1070, 1202, true)&#13;
drawText("Disk_ID:integer", 946, 1214, true)&#13;
drawText("{R5}", 1078, 1214, true)&#13;
drawline(943, 1230, 1103, 1230)&#13;
drawRectangle(1104, 1061, 138, 53)&#13;
drawText("Disk Ownership", 1136, 1064, true)&#13;
drawText("{11,D_DO}", 1185, 1076, true)&#13;
drawline(1104, 1092, 1242, 1092)&#13;
drawText("Disk_ID:integer", 1106, 1094, true)&#13;
drawText("{I,R2}", 1210, 1094, true)&#13;
drawline(1104, 1122, 1242, 1122)&#13;
drawRectangle(889, 964, 150, 75)&#13;
drawText("Qualified Process", 924, 967, true)&#13;
drawText("{9,D_QP}", 989, 980, true)&#13;
drawline(889, 995, 1039, 995)&#13;
drawText("Qualified_Process_ID:inte...", 892, 998, true)&#13;
drawText("{I}", 1022, 998, true)&#13;
drawText("current_state:state&lt;State_M...", 892, 1011, true)&#13;
drawline(889, 1026, 1039, 1026)&#13;
drawRectangle(1093, 814, 149, 96)&#13;
drawText("Disk Request", 1138, 817, true)&#13;
drawText("{10,D_DQ}", 1185, 830, true)&#13;
drawline(1093, 845, 1242, 845)&#13;
drawText("Qualified_Process_ID:...", 1096, 848, true)&#13;
drawText("{I,R1}", 1210, 848, true)&#13;
drawText("Disk_ID:integer", 1096, 861, true)&#13;
drawText("{I,R1}", 1210, 861, true)&#13;
drawText("Time_of_Request:integer", 1096, 873, true)&#13;
drawText("{I}", 1226, 873, true)&#13;
drawText("Time_Request_Completed:i...", 1096, 886, true)&#13;
drawText("Request_Pending:boolean", 1096, 899, true)&#13;
drawline(1093, 927, 1242, 927)&#13;
drawRectangle(1532, 1125, 128, 53)&#13;
drawText("Offline Disk", 1569, 1128, true)&#13;
drawText("{3,D_OD}", 1610, 1141, true)&#13;
drawline(1532, 1156, 1660, 1156)&#13;
drawText("Disk_ID:integer", 1535, 1159, true)&#13;
drawText("{I,R3}", 1628, 1159, true)&#13;
drawline(1532, 1174, 1660, 1174)&#13;
drawRectangle(1307, 1125, 139, 53)&#13;
drawText("Online Disk", 1350, 1128, true)&#13;
drawText("{4,D_OND}", 1388, 1141, true)&#13;
drawline(1307, 1156, 1446, 1156)&#13;
drawText("Disk_ID:integer", 1310, 1159, true)&#13;
drawText("{I,R3}", 1413, 1159, true)&#13;
drawline(1307, 1174, 1446, 1174)&#13;
drawRectangle(1629, 964, 160, 85)&#13;
drawText("Permanent Home in Library", 1644, 967, true)&#13;
drawText("{2,D_H}", 1746, 980, true)&#13;
drawline(1629, 995, 1789, 995)&#13;
drawText("Row_Number:integer", 1632, 998, true)&#13;
drawText("{I}", 1772, 998, true)&#13;
drawText("Column_Number:integer", 1632, 1011, true)&#13;
drawText("{I}", 1772, 1011, true)&#13;
drawline(1629, 1026, 1789, 1026)&#13;
drawRectangle(1297, 921, 149, 150)&#13;
drawText("Disk", 1362, 924, true)&#13;
drawText("{1,D_D}", 1403, 937, true)&#13;
drawline(1297, 952, 1446, 952)&#13;
drawText("Disk_ID:integer", 1299, 955, true)&#13;
drawText("{I}", 1429, 955, true)&#13;
drawText("Serial_Number:integer", 1299, 968, true)&#13;
drawText("Row_Number:integer", 1299, 980, true)&#13;
drawText("{R4}", 1421, 980, true)&#13;
drawText("Column_Number:integer", 1299, 993, true)&#13;
drawText("{R4}", 1421, 993, true)&#13;
drawText("Number_of_Bytes_Available...", 1299, 1006, true)&#13;
drawText("Address_to_Start_Writing:in...", 1299, 1019, true)&#13;
drawText("Write_Protect_ Status:boolean", 1299, 1031, true)&#13;
drawText("Waiting_for_Slot:boolean", 1299, 1044, true)&#13;
drawText("Waiting_for_Drive:boolean", 1299, 1057, true)&#13;
drawline(1297, 1110, 1446, 1110)&#13;
drawPolyline("1715, 1490, 1715, 1393)&#13;
drawText("is", 0, 0, true)&#13;
drawText("executing", 0, 13, true)&#13;
drawText("R9", 0, 0, true)&#13;
drawText("is being", 0, 1, true)&#13;
drawText("executed", 0, 14, true)&#13;
drawText("by", 0, 27, true)&#13;
drawText("0..1", 0, 1, true)&#13;
drawText("0..1", 0, 0, true)&#13;
drawPolyline("1618, 1490, 1618, 1436, 975, 1436, 975, 1382)&#13;
drawText("is", 0, 1, true)&#13;
drawText("executing", 0, 13, true)&#13;
drawText("R8", 0, 0, true)&#13;
drawText("is being", 0, 1, true)&#13;
drawText("executed", 0, 13, true)&#13;
drawText("by", 0, 26, true)&#13;
drawText("0..1", 0, 1, true)&#13;
drawText("0..1", 0, 1, true)&#13;
drawPolyline("1447, 1554, 1597, 1554)&#13;
drawText("completes", 0, 1, true)&#13;
drawText("at", 0, 13, true)&#13;
drawText("R11", 0, 1, true)&#13;
drawText("is", 0, 0, true)&#13;
drawText("destination", 0, 13, true)&#13;
drawText("for", 0, 26, true)&#13;
drawText("1", 0, 1, true)&#13;
drawText("0..1", 0, 1, true)&#13;
drawPolyline("1447, 1500, 1597, 1500)&#13;
drawText("originates", 0, 1, true)&#13;
drawText("at", 0, 14, true)&#13;
drawText("R10", 0, 1, true)&#13;
drawText("is", 0, 1, true)&#13;
drawText("source", 0, 14, true)&#13;
drawText("for", 0, 27, true)&#13;
drawText("1", 0, 1, true)&#13;
drawText("0..1", 0, 1, true)&#13;
drawPolyline("1039, 1382, 1039, 1415, 1372, 1415)&#13;
drawPolyline("1168, 1382, 1168, 1393, 1372, 1415)&#13;
drawPolyline("1307, 1157, 1168, 1157, 1168, 1318)&#13;
drawText("is", 0, 0, true)&#13;
drawText("assigned", 0, 13, true)&#13;
drawText("to", 0, 26, true)&#13;
drawText("R5", 0, 1, true)&#13;
drawText("is", 0, 1, true)&#13;
drawText("assigned", 0, 14, true)&#13;
drawText("to", 0, 26, true)&#13;
drawText("0..1", 0, 1, true)&#13;
drawText("0..1", 0, 0, true)&#13;
drawPolyline("1104, 1200, 1168, 1200)&#13;
drawPolyline("1372, 1254, 1415, 1254)&#13;
drawPolyline("1372, 1479, 1372, 1415)&#13;
drawText("R7", 0, 0, true)&#13;
drawPolyline("1372, 1382, 1372, 1415)&#13;
drawPolyline("1415, 1318, 1415, 1179)&#13;
drawText("is", 0, 1, true)&#13;
drawText("assigned", 0, 14, true)&#13;
drawText("to", 0, 26, true)&#13;
drawText("R6", 0, 0, true)&#13;
drawText("is", 0, 1, true)&#13;
drawText("assigned", 0, 14, true)&#13;
drawText("to", 0, 26, true)&#13;
drawText("1", 0, 0, true)&#13;
drawText("0..1", 0, 1, true)&#13;
drawPolyline("1168, 1061, 1168, 1007)&#13;
drawPolyline("1039, 1007, 1297, 1007)&#13;
drawText("is", 0, 1, true)&#13;
drawText("owned", 0, 13, true)&#13;
drawText("by", 0, 26, true)&#13;
drawText("R2", 0, 0, true)&#13;
drawText("owns", 0, 0, true)&#13;
drawText("0..1", 0, 0, true)&#13;
drawText("*", 0, 0, true)&#13;
drawPolyline("1039, 975, 1297, 975)&#13;
drawText("needed", 0, 1, true)&#13;
drawText("by", 0, 14, true)&#13;
drawText("R1", 0, 1, true)&#13;
drawText("needs", 0, 1, true)&#13;
drawText("*", 0, 0, true)&#13;
drawText("*", 0, 0, true)&#13;
drawPolyline("1168, 911, 1168, 975)&#13;
drawText("{*}", 0, 0, true)&#13;
drawPolyline("1597, 1125, 1597, 1104, 1372, 1104)&#13;
drawPolyline("1372, 1125, 1372, 1104)&#13;
drawPolyline("1447, 1007, 1629, 1007)&#13;
drawText("is", 0, 1, true)&#13;
drawText("permanent", 0, 14, true)&#13;
drawText("home", 0, 27, true)&#13;
drawText("for", 0, 39, true)&#13;
drawText("R4", 0, 1, true)&#13;
drawText("is", 0, 1, true)&#13;
drawText("permanently", 0, 14, true)&#13;
drawText("assigned", 0, 26, true)&#13;
drawText("to", 0, 39, true)&#13;
drawText("0..1", 0, 0, true)&#13;
drawText("1", 0, 0, true)&#13;
drawPolyline("1372, 1072, 1372, 1104)&#13;
drawText("R3", 0, 0, true)&#13;
drawRectangle(1296, 920, 151, 151)&#13;
drawRectangle(1369, 918, 5, 5)&#13;
drawRectangle(1444, 993, 5, 5)&#13;
drawRectangle(1369, 1068, 5, 5)&#13;
drawRectangle(1294, 993, 5, 5)&#13;
drawRectangle(1444, 1068, 5, 5)&#13;
drawRectangle(1294, 1068, 5, 5)&#13;
drawRectangle(1294, 918, 5, 5)&#13;
drawRectangle(1444, 918, 5, 5)&#13;
drawRectangle(1531, 1124, 129, 54)&#13;
drawRectangle(1593, 1122, 5, 5)&#13;
drawRectangle(1657, 1148, 5, 5)&#13;
drawRectangle(1593, 1175, 5, 5)&#13;
drawRectangle(1529, 1148, 5, 5)&#13;
drawRectangle(1657, 1175, 5, 5)&#13;
drawRectangle(1529, 1175, 5, 5)&#13;
drawRectangle(1529, 1122, 5, 5)&#13;
drawRectangle(1657, 1122, 5, 5)&#13;
drawRectangle(942, 1167, 162, 65)&#13;
drawRectangle(1020, 1165, 5, 5)&#13;
drawRectangle(1101, 1197, 5, 5)&#13;
drawRectangle(1020, 1229, 5, 5)&#13;
drawRectangle(940, 1197, 5, 5)&#13;
drawRectangle(1101, 1229, 5, 5)&#13;
drawRectangle(940, 1229, 5, 5)&#13;
drawRectangle(940, 1165, 5, 5)&#13;
drawRectangle(1101, 1165, 5, 5)&#13;
drawRectangle(888, 963, 151, 76)&#13;
drawRectangle(961, 961, 5, 5)&#13;
drawRectangle(1036, 998, 5, 5)&#13;
drawRectangle(961, 1036, 5, 5)&#13;
drawRectangle(886, 998, 5, 5)&#13;
drawRectangle(1036, 1036, 5, 5)&#13;
drawRectangle(886, 1036, 5, 5)&#13;
drawRectangle(886, 961, 5, 5)&#13;
drawRectangle(1036, 961, 5, 5)</actual>junit.framework.ComparisonFailure: Actual results differ from those expected, file: 
1048578-5
 expected:&lt;...ue)&#13;
drawRectangle(1[531, 1124, 130, 55)&#13;
drawRectangle(1658, 1149, 5, 5)&#13;
drawRectangle(1658, 1176, 5, 5)&#13;
drawRectangle(1593, 1176, 5, 5)&#13;
drawRectangle(1529, 1176, 5, 5)&#13;
drawRectangle(1529, 1149, 5, 5)&#13;
drawRectangle(1529, 1122, 5, 5)&#13;
drawRectangle(1593, 1122, 5, 5)&#13;
drawRectangle(1658, 1122, 5, 5)&#13;
drawRectangle(942, 1167, 162, 66)&#13;
drawRectangle(1101, 1197, 5, 5)&#13;
drawRectangle(1101, 1230, 5, 5)&#13;
drawRectangle(1020, 1230, 5, 5)&#13;
drawRectangle(940, 1230, 5, 5)&#13;
drawRectangle(940, 1197, 5, 5)&#13;
drawRectangle(940, 1165, 5, 5)&#13;
drawRectangle(1020, 1165, 5, 5)&#13;
drawRectangle(1101, 1165, 5, 5)&#13;
drawRectangle(888, 963, 152, 77)&#13;
drawRectangle(1037, 999, 5, 5)&#13;
drawRectangle(1037, 1037, 5, 5)&#13;
drawRectangle(961, 1037, 5, 5)&#13;
drawRectangle(886, 1037, 5, 5)&#13;
drawRectangle(886, 999, 5, 5)&#13;
drawRectangle(886, 961, 5, 5)&#13;
drawRectangle(961, 961, 5, 5)&#13;
drawRectangle(1037], 961, 5, 5)&gt; but was:&lt;...ue)&#13;
drawRectangle(1[296, 920, 151, 151)&#13;
drawRectangle(1369, 918, 5, 5)&#13;
drawRectangle(1444, 993, 5, 5)&#13;
drawRectangle(1369, 1068, 5, 5)&#13;
drawRectangle(1294, 993, 5, 5)&#13;
drawRectangle(1444, 1068, 5, 5)&#13;
drawRectangle(1294, 1068, 5, 5)&#13;
drawRectangle(1294, 918, 5, 5)&#13;
drawRectangle(1444, 918, 5, 5)&#13;
drawRectangle(1531, 1124, 129, 54)&#13;
drawRectangle(1593, 1122, 5, 5)&#13;
drawRectangle(1657, 1148, 5, 5)&#13;
drawRectangle(1593, 1175, 5, 5)&#13;
drawRectangle(1529, 1148, 5, 5)&#13;
drawRectangle(1657, 1175, 5, 5)&#13;
drawRectangle(1529, 1175, 5, 5)&#13;
drawRectangle(1529, 1122, 5, 5)&#13;
drawRectangle(1657, 1122, 5, 5)&#13;
drawRectangle(942, 1167, 162, 65)&#13;
drawRectangle(1020, 1165, 5, 5)&#13;
drawRectangle(1101, 1197, 5, 5)&#13;
drawRectangle(1020, 1229, 5, 5)&#13;
drawRectangle(940, 1197, 5, 5)&#13;
drawRectangle(1101, 1229, 5, 5)&#13;
drawRectangle(940, 1229, 5, 5)&#13;
drawRectangle(940, 1165, 5, 5)&#13;
drawRectangle(1101, 1165, 5, 5)&#13;
drawRectangle(888, 963, 151, 76)&#13;
drawRectangle(961, 961, 5, 5)&#13;
drawRectangle(1036, 998, 5, 5)&#13;
drawRectangle(961, 1036, 5, 5)&#13;
drawRectangle(886, 998, 5, 5)&#13;
drawRectangle(1036, 1036, 5, 5)&#13;
drawRectangle(886, 1036, 5, 5)&#13;
drawRectangle(886, 961, 5, 5)&#13;
drawRectangle(1036], 961, 5, 5)&gt;&#13;
	at junit.framework.Assert.assertEquals(Assert.java:81)&#13;
	at com.mentor.nucleus.bp.ui.canvas.test.CanvasTest.doTestDiagram(CanvasTest.java:154)&#13;
	at com.mentor.nucleus.bp.ui.canvas.test.ODMSTest.testODMSClassDiagramDisplayZoomedToSelection(ODMSTest.java:130)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at junit.framework.TestCase.runTest(TestCase.java:168)&#13;
	at junit.framework.TestCase.runBare(TestCase.java:134)&#13;
	at junit.framework.TestResult$1.protect(TestResult.java:110)&#13;
	at junit.framework.TestResult.runProtected(TestResult.java:128)&#13;
	at junit.framework.TestResult.run(TestResult.java:113)&#13;
	at junit.framework.TestCase.run(TestCase.java:124)&#13;
	at junit.framework.TestSuite.runTest(TestSuite.java:243)&#13;
	at junit.framework.TestSuite.run(TestSuite.java:238)&#13;
	at junit.framework.TestSuite.runTest(TestSuite.java:243)&#13;
	at junit.framework.TestSuite.run(TestSuite.java:238)&#13;
	at org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run(JUnit3TestReference.java:130)&#13;
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)&#13;
	at org.eclipse.pde.internal.junit.runtime.RemotePluginTestRunner.main(RemotePluginTestRunner.java:62)&#13;
	at org.eclipse.pde.internal.junit.runtime.PlatformUITestHarness$1.run(PlatformUITestHarness.java:47)&#13;
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)&#13;
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:135)&#13;
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4140)&#13;
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3757)&#13;
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2701)&#13;
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2665)&#13;
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2499)&#13;
	at org.eclipse.ui.internal.Workbench$7.run(Workbench.java:679)&#13;
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)&#13;
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:668)&#13;
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)&#13;
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:123)&#13;
	at org.eclipse.pde.internal.junit.runtime.NonUIThreadTestApplication.runApp(NonUIThreadTestApplication.java:54)&#13;
	at org.eclipse.pde.internal.junit.runtime.UITestApplication.runApp(UITestApplication.java:41)&#13;
	at org.eclipse.pde.internal.junit.runtime.NonUIThreadTestApplication.start(NonUIThreadTestApplication.java:48)&#13;
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:196)&#13;
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)&#13;
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)&#13;
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:344)&#13;
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:622)&#13;
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:577)&#13;
	at org.eclipse.equinox.launcher.Main.run(Main.java:1410)&#13;
	at org.eclipse.equinox.launcher.Main.main(Main.java:1386)&#13;
&#13;
</failure>
      </testcase>
      <testcase name="testODMSClassDiagram" classname="com.mentor.nucleus.bp.ui.canvas.test.ODMSTest" time="1.78">
        <failure>
          <expected>drawRectangle(1629, 1286, 149, 106)&#13;
drawText("Robot", 1690, 1289, true)&#13;
drawText("{12,D_R}", 1730, 1301, true)&#13;
drawline(1629, 1317, 1778, 1317)&#13;
drawText("Robot_ID:integer", 1632, 1319, true)&#13;
drawText("{I}", 1762, 1319, true)&#13;
drawText("Disk_Transfer_ID:uniqu...", 1632, 1332, true)&#13;
drawText("{R9}", 1753, 1332, true)&#13;
drawText("Actual_X_Coordinate:integer", 1632, 1345, true)&#13;
drawText("Actual_Y_Coordinate:integer", 1632, 1358, true)&#13;
drawText("Actual_Theta_Coordinate:in...", 1632, 1370, true)&#13;
drawline(1629, 1398, 1778, 1398)&#13;
drawRectangle(1597, 1490, 138, 74)&#13;
drawText("Disk Transfer", 1635, 1492, true)&#13;
drawText("{13,D_DT}", 1680, 1505, true)&#13;
drawline(1597, 1520, 1735, 1520)&#13;
drawText("Disk_Transfer_ID:uniq...", 1599, 1523, true)&#13;
drawText("{I}", 1719, 1523, true)&#13;
drawText("Source_ID:integer", 1599, 1536, true)&#13;
drawText("{R10}", 1704, 1536, true)&#13;
drawText("Destination_ID:integer", 1599, 1549, true)&#13;
drawText("{R11}", 1704, 1549, true)&#13;
drawline(1597, 1577, 1735, 1577)&#13;
drawRectangle(954, 1307, 117, 75)&#13;
drawText("Entry_Exit Port", 977, 1310, true)&#13;
drawText("{8,D_P}", 1029, 1323, true)&#13;
drawline(954, 1338, 1071, 1338)&#13;
drawText("Port_ID:integer", 956, 1341, true)&#13;
drawText("{I,R7}", 1038, 1341, true)&#13;
drawText("current_state:state&lt;S...", 956, 1354, true)&#13;
drawText("Disk_Transfer_I...", 956, 1366, true)&#13;
drawText("{R8}", 1045, 1366, true)&#13;
drawline(954, 1382, 1071, 1382)&#13;
drawRectangle(1125, 1318, 96, 64)&#13;
drawText("Drive", 1161, 1321, true)&#13;
drawText("{7,D_DR}", 1171, 1334, true)&#13;
drawline(1125, 1349, 1221, 1349)&#13;
drawText("Drive_ID:i...", 1128, 1352, true)&#13;
drawText("{I,R7}", 1188, 1352, true)&#13;
drawText("Idle:boolean", 1128, 1364, true)&#13;
drawline(1125, 1392, 1221, 1392)&#13;
drawRectangle(1222, 1222, 149, 63)&#13;
drawText("Slot_Disk Assignment", 1245, 1224, true)&#13;
drawText("{5,D_SDA}", 1315, 1237, true)&#13;
drawline(1222, 1252, 1371, 1252)&#13;
drawText("Disk_ID:integer", 1224, 1255, true)&#13;
drawText("{I,R6}", 1338, 1255, true)&#13;
drawText("Slot_ID:integer", 1224, 1268, true)&#13;
drawText("{R6}", 1346, 1268, true)&#13;
drawline(1222, 1283, 1371, 1283)&#13;
drawRectangle(1297, 1479, 149, 96)&#13;
drawText("Online Location", 1335, 1482, true)&#13;
drawText("{15,D_OL}", 1391, 1494, true)&#13;
drawline(1297, 1510, 1446, 1510)&#13;
drawText("Online_Location_ID:integer", 1299, 1512, true)&#13;
drawText("{I}", 1429, 1512, true)&#13;
drawText("X_Coordinate:integer", 1299, 1525, true)&#13;
drawText("Y_Coordinate:integer", 1299, 1538, true)&#13;
drawText("Theta_Coordinate:integer", 1299, 1551, true)&#13;
drawText("current_state:state&lt;State_M...", 1299, 1563, true)&#13;
drawline(1297, 1579, 1446, 1579)&#13;
drawRectangle(1318, 1318, 107, 64)&#13;
drawText("Slot", 1363, 1321, true)&#13;
drawText("{6,D_S}", 1383, 1334, true)&#13;
drawline(1318, 1349, 1425, 1349)&#13;
drawText("Slot_ID:integer", 1321, 1352, true)&#13;
drawText("{I,R7}", 1392, 1352, true)&#13;
drawText("Unassigned:boolean", 1321, 1364, true)&#13;
drawline(1318, 1392, 1425, 1392)&#13;
drawRectangle(943, 1168, 160, 64)&#13;
drawText("Drive_Disk Assignment", 968, 1171, true)&#13;
drawText("{14,D_DDA}", 1039, 1183, true)&#13;
drawline(943, 1199, 1103, 1199)&#13;
drawText("Drive_ID:integer", 946, 1202, true)&#13;
drawText("{I,R5}", 1070, 1202, true)&#13;
drawText("Disk_ID:integer", 946, 1214, true)&#13;
drawText("{R5}", 1078, 1214, true)&#13;
drawline(943, 1230, 1103, 1230)&#13;
drawRectangle(1104, 1061, 138, 53)&#13;
drawText("Disk Ownership", 1136, 1064, true)&#13;
drawText("{11,D_DO}", 1185, 1076, true)&#13;
drawline(1104, 1092, 1242, 1092)&#13;
drawText("Disk_ID:integer", 1106, 1094, true)&#13;
drawText("{I,R2}", 1210, 1094, true)&#13;
drawline(1104, 1122, 1242, 1122)&#13;
drawRectangle(889, 964, 150, 75)&#13;
drawText("Qualified Process", 924, 967, true)&#13;
drawText("{9,D_QP}", 989, 980, true)&#13;
drawline(889, 995, 1039, 995)&#13;
drawText("Qualified_Process_ID:inte...", 892, 998, true)&#13;
drawText("{I}", 1022, 998, true)&#13;
drawText("current_state:state&lt;State_M...", 892, 1011, true)&#13;
drawline(889, 1026, 1039, 1026)&#13;
drawRectangle(1093, 814, 149, 96)&#13;
drawText("Disk Request", 1138, 817, true)&#13;
drawText("{10,D_DQ}", 1185, 830, true)&#13;
drawline(1093, 845, 1242, 845)&#13;
drawText("Qualified_Process_ID:...", 1096, 848, true)&#13;
drawText("{I,R1}", 1210, 848, true)&#13;
drawText("Disk_ID:integer", 1096, 861, true)&#13;
drawText("{I,R1}", 1210, 861, true)&#13;
drawText("Time_of_Request:integer", 1096, 873, true)&#13;
drawText("{I}", 1226, 873, true)&#13;
drawText("Time_Request_Completed:i...", 1096, 886, true)&#13;
drawText("Request_Pending:boolean", 1096, 899, true)&#13;
drawline(1093, 927, 1242, 927)&#13;
drawRectangle(1532, 1125, 128, 53)&#13;
drawText("Offline Disk", 1569, 1128, true)&#13;
drawText("{3,D_OD}", 1610, 1141, true)&#13;
drawline(1532, 1156, 1660, 1156)&#13;
drawText("Disk_ID:integer", 1535, 1159, true)&#13;
drawText("{I,R3}", 1628, 1159, true)&#13;
drawline(1532, 1174, 1660, 1174)&#13;
drawRectangle(1307, 1125, 139, 53)&#13;
drawText("Online Disk", 1350, 1128, true)&#13;
drawText("{4,D_OND}", 1388, 1141, true)&#13;
drawline(1307, 1156, 1446, 1156)&#13;
drawText("Disk_ID:integer", 1310, 1159, true)&#13;
drawText("{I,R3}", 1413, 1159, true)&#13;
drawline(1307, 1174, 1446, 1174)&#13;
drawRectangle(1629, 964, 160, 85)&#13;
drawText("Permanent Home in Library", 1644, 967, true)&#13;
drawText("{2,D_H}", 1746, 980, true)&#13;
drawline(1629, 995, 1789, 995)&#13;
drawText("Row_Number:integer", 1632, 998, true)&#13;
drawText("{I}", 1772, 998, true)&#13;
drawText("Column_Number:integer", 1632, 1011, true)&#13;
drawText("{I}", 1772, 1011, true)&#13;
drawline(1629, 1026, 1789, 1026)&#13;
drawRectangle(1297, 921, 149, 150)&#13;
drawText("Disk", 1362, 924, true)&#13;
drawText("{1,D_D}", 1403, 937, true)&#13;
drawline(1297, 952, 1446, 952)&#13;
drawText("Disk_ID:integer", 1299, 955, true)&#13;
drawText("{I}", 1429, 955, true)&#13;
drawText("Serial_Number:integer", 1299, 968, true)&#13;
drawText("Row_Number:integer", 1299, 980, true)&#13;
drawText("{R4}", 1421, 980, true)&#13;
drawText("Column_Number:integer", 1299, 993, true)&#13;
drawText("{R4}", 1421, 993, true)&#13;
drawText("Number_of_Bytes_Available...", 1299, 1006, true)&#13;
drawText("Address_to_Start_Writing:in...", 1299, 1019, true)&#13;
drawText("Write_Protect_ Status:boolean", 1299, 1031, true)&#13;
drawText("Waiting_for_Slot:boolean", 1299, 1044, true)&#13;
drawText("Waiting_for_Drive:boolean", 1299, 1057, true)&#13;
drawline(1297, 1110, 1446, 1110)&#13;
drawPolyline("1715, 1490, 1715, 1393)&#13;
drawText("is", 0, 0, true)&#13;
drawText("executing", 0, 13, true)&#13;
drawText("R9", 0, 0, true)&#13;
drawText("is being", 0, 1, true)&#13;
drawText("executed", 0, 14, true)&#13;
drawText("by", 0, 27, true)&#13;
drawText("0..1", 0, 1, true)&#13;
drawText("0..1", 0, 0, true)&#13;
drawPolyline("1618, 1490, 1618, 1436, 975, 1436, 975, 1382)&#13;
drawText("is", 0, 1, true)&#13;
drawText("executing", 0, 13, true)&#13;
drawText("R8", 0, 0, true)&#13;
drawText("is being", 0, 1, true)&#13;
drawText("executed", 0, 13, true)&#13;
drawText("by", 0, 26, true)&#13;
drawText("0..1", 0, 1, true)&#13;
drawText("0..1", 0, 1, true)&#13;
drawPolyline("1447, 1554, 1597, 1554)&#13;
drawText("completes", 0, 1, true)&#13;
drawText("at", 0, 13, true)&#13;
drawText("R11", 0, 1, true)&#13;
drawText("is", 0, 0, true)&#13;
drawText("destination", 0, 13, true)&#13;
drawText("for", 0, 26, true)&#13;
drawText("1", 0, 1, true)&#13;
drawText("0..1", 0, 1, true)&#13;
drawPolyline("1447, 1500, 1597, 1500)&#13;
drawText("originates", 0, 1, true)&#13;
drawText("at", 0, 14, true)&#13;
drawText("R10", 0, 1, true)&#13;
drawText("is", 0, 1, true)&#13;
drawText("source", 0, 14, true)&#13;
drawText("for", 0, 27, true)&#13;
drawText("1", 0, 1, true)&#13;
drawText("0..1", 0, 1, true)&#13;
drawPolyline("1039, 1382, 1039, 1415, 1372, 1415)&#13;
drawPolyline("1168, 1382, 1168, 1393, 1372, 1415)&#13;
drawPolyline("1307, 1157, 1168, 1157, 1168, 1318)&#13;
drawText("is", 0, 0, true)&#13;
drawText("assigned", 0, 13, true)&#13;
drawText("to", 0, 26, true)&#13;
drawText("R5", 0, 1, true)&#13;
drawText("is", 0, 1, true)&#13;
drawText("assigned", 0, 14, true)&#13;
drawText("to", 0, 26, true)&#13;
drawText("0..1", 0, 1, true)&#13;
drawText("0..1", 0, 0, true)&#13;
drawPolyline("1104, 1200, 1168, 1200)&#13;
drawPolyline("1372, 1254, 1415, 1254)&#13;
drawPolyline("1372, 1479, 1372, 1415)&#13;
drawText("R7", 0, 0, true)&#13;
drawPolyline("1372, 1382, 1372, 1415)&#13;
drawPolyline("1415, 1318, 1415, 1179)&#13;
drawText("is", 0, 1, true)&#13;
drawText("assigned", 0, 14, true)&#13;
drawText("to", 0, 26, true)&#13;
drawText("R6", 0, 0, true)&#13;
drawText("is", 0, 1, true)&#13;
drawText("assigned", 0, 14, true)&#13;
drawText("to", 0, 26, true)&#13;
drawText("1", 0, 0, true)&#13;
drawText("0..1", 0, 1, true)&#13;
drawPolyline("1168, 1061, 1168, 1007)&#13;
drawPolyline("1039, 1007, 1297, 1007)&#13;
drawText("is", 0, 1, true)&#13;
drawText("owned", 0, 13, true)&#13;
drawText("by", 0, 26, true)&#13;
drawText("R2", 0, 0, true)&#13;
drawText("owns", 0, 0, true)&#13;
drawText("0..1", 0, 0, true)&#13;
drawText("*", 0, 0, true)&#13;
drawPolyline("1039, 975, 1297, 975)&#13;
drawText("needed", 0, 1, true)&#13;
drawText("by", 0, 14, true)&#13;
drawText("R1", 0, 1, true)&#13;
drawText("needs", 0, 1, true)&#13;
drawText("*", 0, 0, true)&#13;
drawText("*", 0, 0, true)&#13;
drawPolyline("1168, 911, 1168, 975)&#13;
drawText("{*}", 0, 0, true)&#13;
drawPolyline("1597, 1125, 1597, 1104, 1372, 1104)&#13;
drawPolyline("1372, 1125, 1372, 1104)&#13;
drawPolyline("1447, 1007, 1629, 1007)&#13;
drawText("is", 0, 1, true)&#13;
drawText("permanent", 0, 14, true)&#13;
drawText("home", 0, 27, true)&#13;
drawText("for", 0, 39, true)&#13;
drawText("R4", 0, 1, true)&#13;
drawText("is", 0, 1, true)&#13;
drawText("permanently", 0, 14, true)&#13;
drawText("assigned", 0, 26, true)&#13;
drawText("to", 0, 39, true)&#13;
drawText("0..1", 0, 0, true)&#13;
drawText("1", 0, 0, true)&#13;
drawPolyline("1372, 1072, 1372, 1104)&#13;
drawText("R3", 0, 0, true)</expected>
          <actual>drawRectangle(1629, 1286, 149, 106)&#13;
drawText("Robot", 1690, 1289, true)&#13;
drawText("{12,D_R}", 1730, 1301, true)&#13;
drawline(1629, 1317, 1778, 1317)&#13;
drawText("Robot_ID:integer", 1632, 1319, true)&#13;
drawText("{I}", 1762, 1319, true)&#13;
drawText("Disk_Transfer_ID:uniqu...", 1632, 1332, true)&#13;
drawText("{R9}", 1753, 1332, true)&#13;
drawText("Actual_X_Coordinate:integer", 1632, 1345, true)&#13;
drawText("Actual_Y_Coordinate:integer", 1632, 1358, true)&#13;
drawText("Actual_Theta_Coordinate:in...", 1632, 1370, true)&#13;
drawline(1629, 1398, 1778, 1398)&#13;
drawRectangle(1597, 1490, 138, 74)&#13;
drawText("Disk Transfer", 1635, 1492, true)&#13;
drawText("{13,D_DT}", 1680, 1505, true)&#13;
drawline(1597, 1520, 1735, 1520)&#13;
drawText("Disk_Transfer_ID:uniq...", 1599, 1523, true)&#13;
drawText("{I}", 1719, 1523, true)&#13;
drawText("Source_ID:integer", 1599, 1536, true)&#13;
drawText("{R10}", 1704, 1536, true)&#13;
drawText("Destination_ID:integer", 1599, 1549, true)&#13;
drawText("{R11}", 1704, 1549, true)&#13;
drawline(1597, 1577, 1735, 1577)&#13;
drawRectangle(954, 1307, 117, 75)&#13;
drawText("Entry_Exit Port", 977, 1310, true)&#13;
drawText("{8,D_P}", 1029, 1323, true)&#13;
drawline(954, 1338, 1071, 1338)&#13;
drawText("Port_ID:integer", 956, 1341, true)&#13;
drawText("{I,R7}", 1038, 1341, true)&#13;
drawText("current_state:state&lt;S...", 956, 1354, true)&#13;
drawText("Disk_Transfer_I...", 956, 1366, true)&#13;
drawText("{R8}", 1045, 1366, true)&#13;
drawline(954, 1382, 1071, 1382)&#13;
drawRectangle(1125, 1318, 96, 64)&#13;
drawText("Drive", 1161, 1321, true)&#13;
drawText("{7,D_DR}", 1171, 1334, true)&#13;
drawline(1125, 1349, 1221, 1349)&#13;
drawText("Drive_ID:i...", 1128, 1352, true)&#13;
drawText("{I,R7}", 1188, 1352, true)&#13;
drawText("Idle:boolean", 1128, 1364, true)&#13;
drawline(1125, 1392, 1221, 1392)&#13;
drawRectangle(1222, 1222, 149, 63)&#13;
drawText("Slot_Disk Assignment", 1245, 1224, true)&#13;
drawText("{5,D_SDA}", 1315, 1237, true)&#13;
drawline(1222, 1252, 1371, 1252)&#13;
drawText("Disk_ID:integer", 1224, 1255, true)&#13;
drawText("{I,R6}", 1338, 1255, true)&#13;
drawText("Slot_ID:integer", 1224, 1268, true)&#13;
drawText("{R6}", 1346, 1268, true)&#13;
drawline(1222, 1283, 1371, 1283)&#13;
drawRectangle(1297, 1479, 149, 96)&#13;
drawText("Online Location", 1335, 1482, true)&#13;
drawText("{15,D_OL}", 1391, 1494, true)&#13;
drawline(1297, 1510, 1446, 1510)&#13;
drawText("Online_Location_ID:integer", 1299, 1512, true)&#13;
drawText("{I}", 1429, 1512, true)&#13;
drawText("X_Coordinate:integer", 1299, 1525, true)&#13;
drawText("Y_Coordinate:integer", 1299, 1538, true)&#13;
drawText("Theta_Coordinate:integer", 1299, 1551, true)&#13;
drawText("current_state:state&lt;State_M...", 1299, 1563, true)&#13;
drawline(1297, 1579, 1446, 1579)&#13;
drawRectangle(1318, 1318, 107, 64)&#13;
drawText("Slot", 1363, 1321, true)&#13;
drawText("{6,D_S}", 1383, 1334, true)&#13;
drawline(1318, 1349, 1425, 1349)&#13;
drawText("Slot_ID:integer", 1321, 1352, true)&#13;
drawText("{I,R7}", 1392, 1352, true)&#13;
drawText("Unassigned:boolean", 1321, 1364, true)&#13;
drawline(1318, 1392, 1425, 1392)&#13;
drawRectangle(943, 1168, 160, 64)&#13;
drawText("Drive_Disk Assignment", 968, 1171, true)&#13;
drawText("{14,D_DDA}", 1039, 1183, true)&#13;
drawline(943, 1199, 1103, 1199)&#13;
drawText("Drive_ID:integer", 946, 1202, true)&#13;
drawText("{I,R5}", 1070, 1202, true)&#13;
drawText("Disk_ID:integer", 946, 1214, true)&#13;
drawText("{R5}", 1078, 1214, true)&#13;
drawline(943, 1230, 1103, 1230)&#13;
drawRectangle(1104, 1061, 138, 53)&#13;
drawText("Disk Ownership", 1136, 1064, true)&#13;
drawText("{11,D_DO}", 1185, 1076, true)&#13;
drawline(1104, 1092, 1242, 1092)&#13;
drawText("Disk_ID:integer", 1106, 1094, true)&#13;
drawText("{I,R2}", 1210, 1094, true)&#13;
drawline(1104, 1122, 1242, 1122)&#13;
drawRectangle(889, 964, 150, 75)&#13;
drawText("Qualified Process", 924, 967, true)&#13;
drawText("{9,D_QP}", 989, 980, true)&#13;
drawline(889, 995, 1039, 995)&#13;
drawText("Qualified_Process_ID:inte...", 892, 998, true)&#13;
drawText("{I}", 1022, 998, true)&#13;
drawText("current_state:state&lt;State_M...", 892, 1011, true)&#13;
drawline(889, 1026, 1039, 1026)&#13;
drawRectangle(1093, 814, 149, 96)&#13;
drawText("Disk Request", 1138, 817, true)&#13;
drawText("{10,D_DQ}", 1185, 830, true)&#13;
drawline(1093, 845, 1242, 845)&#13;
drawText("Qualified_Process_ID:...", 1096, 848, true)&#13;
drawText("{I,R1}", 1210, 848, true)&#13;
drawText("Disk_ID:integer", 1096, 861, true)&#13;
drawText("{I,R1}", 1210, 861, true)&#13;
drawText("Time_of_Request:integer", 1096, 873, true)&#13;
drawText("{I}", 1226, 873, true)&#13;
drawText("Time_Request_Completed:i...", 1096, 886, true)&#13;
drawText("Request_Pending:boolean", 1096, 899, true)&#13;
drawline(1093, 927, 1242, 927)&#13;
drawRectangle(1532, 1125, 128, 53)&#13;
drawText("Offline Disk", 1569, 1128, true)&#13;
drawText("{3,D_OD}", 1610, 1141, true)&#13;
drawline(1532, 1156, 1660, 1156)&#13;
drawText("Disk_ID:integer", 1535, 1159, true)&#13;
drawText("{I,R3}", 1628, 1159, true)&#13;
drawline(1532, 1174, 1660, 1174)&#13;
drawRectangle(1307, 1125, 139, 53)&#13;
drawText("Online Disk", 1350, 1128, true)&#13;
drawText("{4,D_OND}", 1388, 1141, true)&#13;
drawline(1307, 1156, 1446, 1156)&#13;
drawText("Disk_ID:integer", 1310, 1159, true)&#13;
drawText("{I,R3}", 1413, 1159, true)&#13;
drawline(1307, 1174, 1446, 1174)&#13;
drawRectangle(1629, 964, 160, 85)&#13;
drawText("Permanent Home in Library", 1644, 967, true)&#13;
drawText("{2,D_H}", 1746, 980, true)&#13;
drawline(1629, 995, 1789, 995)&#13;
drawText("Row_Number:integer", 1632, 998, true)&#13;
drawText("{I}", 1772, 998, true)&#13;
drawText("Column_Number:integer", 1632, 1011, true)&#13;
drawText("{I}", 1772, 1011, true)&#13;
drawline(1629, 1026, 1789, 1026)&#13;
drawRectangle(1297, 921, 149, 150)&#13;
drawText("Disk", 1362, 924, true)&#13;
drawText("{1,D_D}", 1403, 937, true)&#13;
drawline(1297, 952, 1446, 952)&#13;
drawText("Disk_ID:integer", 1299, 955, true)&#13;
drawText("{I}", 1429, 955, true)&#13;
drawText("Serial_Number:integer", 1299, 968, true)&#13;
drawText("Row_Number:integer", 1299, 980, true)&#13;
drawText("{R4}", 1421, 980, true)&#13;
drawText("Column_Number:integer", 1299, 993, true)&#13;
drawText("{R4}", 1421, 993, true)&#13;
drawText("Number_of_Bytes_Available...", 1299, 1006, true)&#13;
drawText("Address_to_Start_Writing:in...", 1299, 1019, true)&#13;
drawText("Write_Protect_ Status:boolean", 1299, 1031, true)&#13;
drawText("Waiting_for_Slot:boolean", 1299, 1044, true)&#13;
drawText("Waiting_for_Drive:boolean", 1299, 1057, true)&#13;
drawline(1297, 1110, 1446, 1110)&#13;
drawPolyline("1715, 1490, 1715, 1393)&#13;
drawText("is", 0, 0, true)&#13;
drawText("executing", 0, 13, true)&#13;
drawText("R9", 0, 0, true)&#13;
drawText("is being", 0, 1, true)&#13;
drawText("executed", 0, 14, true)&#13;
drawText("by", 0, 27, true)&#13;
drawText("0..1", 0, 1, true)&#13;
drawText("0..1", 0, 0, true)&#13;
drawPolyline("1618, 1490, 1618, 1436, 975, 1436, 975, 1382)&#13;
drawText("is", 0, 1, true)&#13;
drawText("executing", 0, 13, true)&#13;
drawText("R8", 0, 0, true)&#13;
drawText("is being", 0, 1, true)&#13;
drawText("executed", 0, 13, true)&#13;
drawText("by", 0, 26, true)&#13;
drawText("0..1", 0, 1, true)&#13;
drawText("0..1", 0, 1, true)&#13;
drawPolyline("1447, 1554, 1597, 1554)&#13;
drawText("completes", 0, 1, true)&#13;
drawText("at", 0, 13, true)&#13;
drawText("R11", 0, 1, true)&#13;
drawText("is", 0, 0, true)&#13;
drawText("destination", 0, 13, true)&#13;
drawText("for", 0, 26, true)&#13;
drawText("1", 0, 1, true)&#13;
drawText("0..1", 0, 1, true)&#13;
drawPolyline("1447, 1500, 1597, 1500)&#13;
drawText("originates", 0, 1, true)&#13;
drawText("at", 0, 14, true)&#13;
drawText("R10", 0, 1, true)&#13;
drawText("is", 0, 1, true)&#13;
drawText("source", 0, 14, true)&#13;
drawText("for", 0, 27, true)&#13;
drawText("1", 0, 1, true)&#13;
drawText("0..1", 0, 1, true)&#13;
drawPolyline("1039, 1382, 1039, 1415, 1372, 1415)&#13;
drawPolyline("1168, 1382, 1168, 1393, 1372, 1415)&#13;
drawPolyline("1307, 1157, 1168, 1157, 1168, 1318)&#13;
drawText("is", 0, 0, true)&#13;
drawText("assigned", 0, 13, true)&#13;
drawText("to", 0, 26, true)&#13;
drawText("R5", 0, 1, true)&#13;
drawText("is", 0, 1, true)&#13;
drawText("assigned", 0, 14, true)&#13;
drawText("to", 0, 26, true)&#13;
drawText("0..1", 0, 1, true)&#13;
drawText("0..1", 0, 0, true)&#13;
drawPolyline("1104, 1200, 1168, 1200)&#13;
drawPolyline("1372, 1254, 1415, 1254)&#13;
drawPolyline("1372, 1479, 1372, 1415)&#13;
drawText("R7", 0, 0, true)&#13;
drawPolyline("1372, 1382, 1372, 1415)&#13;
drawPolyline("1415, 1318, 1415, 1179)&#13;
drawText("is", 0, 1, true)&#13;
drawText("assigned", 0, 14, true)&#13;
drawText("to", 0, 26, true)&#13;
drawText("R6", 0, 0, true)&#13;
drawText("is", 0, 1, true)&#13;
drawText("assigned", 0, 14, true)&#13;
drawText("to", 0, 26, true)&#13;
drawText("1", 0, 0, true)&#13;
drawText("0..1", 0, 1, true)&#13;
drawPolyline("1168, 1061, 1168, 1007)&#13;
drawPolyline("1039, 1007, 1297, 1007)&#13;
drawText("is", 0, 1, true)&#13;
drawText("owned", 0, 13, true)&#13;
drawText("by", 0, 26, true)&#13;
drawText("R2", 0, 0, true)&#13;
drawText("owns", 0, 0, true)&#13;
drawText("0..1", 0, 0, true)&#13;
drawText("*", 0, 0, true)&#13;
drawPolyline("1039, 975, 1297, 975)&#13;
drawText("needed", 0, 1, true)&#13;
drawText("by", 0, 14, true)&#13;
drawText("R1", 0, 1, true)&#13;
drawText("needs", 0, 1, true)&#13;
drawText("*", 0, 0, true)&#13;
drawText("*", 0, 0, true)&#13;
drawPolyline("1168, 911, 1168, 975)&#13;
drawText("{*}", 0, 0, true)&#13;
drawPolyline("1597, 1125, 1597, 1104, 1372, 1104)&#13;
drawPolyline("1372, 1125, 1372, 1104)&#13;
drawPolyline("1447, 1007, 1629, 1007)&#13;
drawText("is", 0, 1, true)&#13;
drawText("permanent", 0, 14, true)&#13;
drawText("home", 0, 27, true)&#13;
drawText("for", 0, 39, true)&#13;
drawText("R4", 0, 1, true)&#13;
drawText("is", 0, 1, true)&#13;
drawText("permanently", 0, 14, true)&#13;
drawText("assigned", 0, 26, true)&#13;
drawText("to", 0, 39, true)&#13;
drawText("0..1", 0, 0, true)&#13;
drawText("1", 0, 0, true)&#13;
drawPolyline("1372, 1072, 1372, 1104)&#13;
drawText("R3", 0, 0, true)&#13;
drawRectangle(1296, 920, 151, 151)&#13;
drawRectangle(1369, 918, 5, 5)&#13;
drawRectangle(1444, 993, 5, 5)&#13;
drawRectangle(1369, 1068, 5, 5)&#13;
drawRectangle(1294, 993, 5, 5)&#13;
drawRectangle(1444, 1068, 5, 5)&#13;
drawRectangle(1294, 1068, 5, 5)&#13;
drawRectangle(1294, 918, 5, 5)&#13;
drawRectangle(1444, 918, 5, 5)&#13;
drawRectangle(1531, 1124, 129, 54)&#13;
drawRectangle(1593, 1122, 5, 5)&#13;
drawRectangle(1657, 1148, 5, 5)&#13;
drawRectangle(1593, 1175, 5, 5)&#13;
drawRectangle(1529, 1148, 5, 5)&#13;
drawRectangle(1657, 1175, 5, 5)&#13;
drawRectangle(1529, 1175, 5, 5)&#13;
drawRectangle(1529, 1122, 5, 5)&#13;
drawRectangle(1657, 1122, 5, 5)&#13;
drawRectangle(942, 1167, 162, 65)&#13;
drawRectangle(1020, 1165, 5, 5)&#13;
drawRectangle(1101, 1197, 5, 5)&#13;
drawRectangle(1020, 1229, 5, 5)&#13;
drawRectangle(940, 1197, 5, 5)&#13;
drawRectangle(1101, 1229, 5, 5)&#13;
drawRectangle(940, 1229, 5, 5)&#13;
drawRectangle(940, 1165, 5, 5)&#13;
drawRectangle(1101, 1165, 5, 5)&#13;
drawRectangle(888, 963, 151, 76)&#13;
drawRectangle(961, 961, 5, 5)&#13;
drawRectangle(1036, 998, 5, 5)&#13;
drawRectangle(961, 1036, 5, 5)&#13;
drawRectangle(886, 998, 5, 5)&#13;
drawRectangle(1036, 1036, 5, 5)&#13;
drawRectangle(886, 1036, 5, 5)&#13;
drawRectangle(886, 961, 5, 5)&#13;
drawRectangle(1036, 961, 5, 5)</actual>junit.framework.ComparisonFailure: Actual results differ from those expected, file: 
1048578-5
 expected:&lt;...xt("R3", 0, 0, true)[]&gt; but was:&lt;...xt("R3", 0, 0, true)[&#13;
drawRectangle(1296, 920, 151, 151)&#13;
drawRectangle(1369, 918, 5, 5)&#13;
drawRectangle(1444, 993, 5, 5)&#13;
drawRectangle(1369, 1068, 5, 5)&#13;
drawRectangle(1294, 993, 5, 5)&#13;
drawRectangle(1444, 1068, 5, 5)&#13;
drawRectangle(1294, 1068, 5, 5)&#13;
drawRectangle(1294, 918, 5, 5)&#13;
drawRectangle(1444, 918, 5, 5)&#13;
drawRectangle(1531, 1124, 129, 54)&#13;
drawRectangle(1593, 1122, 5, 5)&#13;
drawRectangle(1657, 1148, 5, 5)&#13;
drawRectangle(1593, 1175, 5, 5)&#13;
drawRectangle(1529, 1148, 5, 5)&#13;
drawRectangle(1657, 1175, 5, 5)&#13;
drawRectangle(1529, 1175, 5, 5)&#13;
drawRectangle(1529, 1122, 5, 5)&#13;
drawRectangle(1657, 1122, 5, 5)&#13;
drawRectangle(942, 1167, 162, 65)&#13;
drawRectangle(1020, 1165, 5, 5)&#13;
drawRectangle(1101, 1197, 5, 5)&#13;
drawRectangle(1020, 1229, 5, 5)&#13;
drawRectangle(940, 1197, 5, 5)&#13;
drawRectangle(1101, 1229, 5, 5)&#13;
drawRectangle(940, 1229, 5, 5)&#13;
drawRectangle(940, 1165, 5, 5)&#13;
drawRectangle(1101, 1165, 5, 5)&#13;
drawRectangle(888, 963, 151, 76)&#13;
drawRectangle(961, 961, 5, 5)&#13;
drawRectangle(1036, 998, 5, 5)&#13;
drawRectangle(961, 1036, 5, 5)&#13;
drawRectangle(886, 998, 5, 5)&#13;
drawRectangle(1036, 1036, 5, 5)&#13;
drawRectangle(886, 1036, 5, 5)&#13;
drawRectangle(886, 961, 5, 5)&#13;
drawRectangle(1036, 961, 5, 5)]&gt;&#13;
	at junit.framework.Assert.assertEquals(Assert.java:81)&#13;
	at com.mentor.nucleus.bp.ui.canvas.test.CanvasTest.doTestDiagram(CanvasTest.java:154)&#13;
	at com.mentor.nucleus.bp.ui.canvas.test.ODMSTest.testODMSClassDiagram(ODMSTest.java:139)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at junit.framework.TestCase.runTest(TestCase.java:168)&#13;
	at junit.framework.TestCase.runBare(TestCase.java:134)&#13;
	at junit.framework.TestResult$1.protect(TestResult.java:110)&#13;
	at junit.framework.TestResult.runProtected(TestResult.java:128)&#13;
	at junit.framework.TestResult.run(TestResult.java:113)&#13;
	at junit.framework.TestCase.run(TestCase.java:124)&#13;
	at junit.framework.TestSuite.runTest(TestSuite.java:243)&#13;
	at junit.framework.TestSuite.run(TestSuite.java:238)&#13;
	at junit.framework.TestSuite.runTest(TestSuite.java:243)&#13;
	at junit.framework.TestSuite.run(TestSuite.java:238)&#13;
	at org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run(JUnit3TestReference.java:130)&#13;
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)&#13;
	at org.eclipse.pde.internal.junit.runtime.RemotePluginTestRunner.main(RemotePluginTestRunner.java:62)&#13;
	at org.eclipse.pde.internal.junit.runtime.PlatformUITestHarness$1.run(PlatformUITestHarness.java:47)&#13;
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)&#13;
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:135)&#13;
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4140)&#13;
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3757)&#13;
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2701)&#13;
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2665)&#13;
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2499)&#13;
	at org.eclipse.ui.internal.Workbench$7.run(Workbench.java:679)&#13;
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)&#13;
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:668)&#13;
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)&#13;
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:123)&#13;
	at org.eclipse.pde.internal.junit.runtime.NonUIThreadTestApplication.runApp(NonUIThreadTestApplication.java:54)&#13;
	at org.eclipse.pde.internal.junit.runtime.UITestApplication.runApp(UITestApplication.java:41)&#13;
	at org.eclipse.pde.internal.junit.runtime.NonUIThreadTestApplication.start(NonUIThreadTestApplication.java:48)&#13;
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:196)&#13;
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)&#13;
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)&#13;
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:344)&#13;
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:622)&#13;
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:577)&#13;
	at org.eclipse.equinox.launcher.Main.run(Main.java:1410)&#13;
	at org.eclipse.equinox.launcher.Main.main(Main.java:1386)&#13;
&#13;
</failure>
      </testcase>
      <testcase name="testDiskStateChart" classname="com.mentor.nucleus.bp.ui.canvas.test.ODMSTest" time="1.092"/>
      <testcase name="testDiskRequestStateChart" classname="com.mentor.nucleus.bp.ui.canvas.test.ODMSTest" time="1.312"/>
      <testcase name="testQualifiedProcessStateChart" classname="com.mentor.nucleus.bp.ui.canvas.test.ODMSTest" time="1.264"/>
      <testcase name="testDiskOwnershipAssignerStateChart" classname="com.mentor.nucleus.bp.ui.canvas.test.ODMSTest" time="2.061">
        <failure>
          <expected>drawText(" 6. Satisfying Disk Request", 744, 737, true)&#13;
drawline(742, 748, 955, 748)&#13;
drawText("entry/Select many disks from instances of D_D;Assign disk_found = FALSE;For each disk in disks    If (disk_found == FALSE)        If (disk.Serial_Number == rcvd_evt.serial_...            Assign disk_found = TRUE;            Select any disk_request related by disk-...            Select one process related by disk_requ...            Unrelate disk from process across R1 us...            Generate D_DQ2:'Disk Request Satisfied...        End if;    End if;", 744, 752, true)&#13;
drawText(" 5. Establishing Ownership of an Offline Disk", 754, 969, true)&#13;
drawline(751, 980, 955, 980)&#13;
drawText("entry/Select many disks from instances of D_D;Assign disk_found = FALSE;For each disk in disks    If (disk_found == FALSE)    If (disk.Unowned_in_Library == TRUE)        Select any disk_request related by disk-...        If (not_empty disk_request)             Assign disk_found = TRUE;            Create object instance disk_owner of ...            Select one process related by disk_re...            Relate disk to process across R2 using...            Generate D_D1:'Disk Ownership Esta...        End if;    End if;", 754, 984, true)&#13;
drawText(" 4. Tying to Eject Disk", 1097, 1358, true)&#13;
drawline(1095, 1370, 1326, 1370)&#13;
drawText("entry/Select many disk_set from instances of D_D;Assign disk_found = FALSE;For each disk in disk_set    If (disk_found == FALSE)    If (disk.Unowned_in_Cabinet == TRUE)        Select one disk_owner related by disk-&gt;D_DO[...        If (empty disk_owner)            Select many disk_request related by disk-&gt;D...            If (empty disk_request)                Assign disk_found = TRUE;                Generate D_D6:'Return Unowned Disk to ...            End if;        End if;    End if;    End if;", 1097, 1374, true)&#13;
drawText(" 3. Establishing Ownership of an Online Disk", 1542, 969, true)&#13;
drawline(1540, 980, 1762, 980)&#13;
drawText("entry/Select many disks from instances of D_D;Assign disk_found = FALSE;For each disk in disks    If (disk_found == FALSE)    If (disk.Unowned_in_Cabinet == TRUE)        Select any disk_request related by disk-&gt;D_...        If (not_empty disk_request)            Assign disk_found = TRUE;            Select one process related by disk_request...            Create  object instance owner of D_DO;            Relate disk to process across R2 using ow...            Generate D_D1:'Disk Ownership Establish...            Generate D_DQ2:'Disk Request Satisfied'()...        End if;    End if;    End if;", 1542, 984, true)&#13;
drawText(" 2. Waiting for a Requested Disk to be Ownable", 1097, 969, true)&#13;
drawline(1095, 980, 1391, 980)&#13;
drawText("entry/Select many disk_requests from instances of D_DQ;For each disk_request in disk_requestsif (disk_request.Request_Pending == TRUE)Select one disk related by disk_request-&gt;D_D[R1];    If (disk.Unowned_in_Cabinet == TRUE)        Select one disk_owner related by disk-&gt;D_DO[R2];        If (empty disk_owner)            Generate D_DO_A3:'Establish Ownership of an Online Disk' ...        End if;    Else     If (disk.Unowned_in_Library == TRUE)        Select one disk_owner related by disk-&gt;D_DO[R2];        If (empty disk_owner)            Assign number_of_online = 0;            Select many online_disks from instances of D_OND;            For each online_disk in online_disks                Assign number_of_online = number_of_online + 1;            End for;             Assign number_of_slots = 0;             Select many slots from instances of D_S;             For each slot in slots                 Assign number_of_slots = number_of_slots + 1;             End for;             If (number_of_online &lt; number_of_slots)", 1097, 984, true)&#13;
drawText(" 1. Waiting for a Disk Request", 1097, 737, true)&#13;
drawline(1095, 748, 1354, 748)&#13;
drawText("entry/Select many disk_requests from instances of D_DQ;Assign request_found = FALSE;For each disk_request in disk_requests    If (request_found == FALSE)        If (disk_request.Request_Pending == TRUE)            Assign request_found = TRUE;            Generate D_DO_A1:'Disk Requested by QP' () to D...        End if;    End if;End for;", 1097, 752, true)&#13;
drawPolyline("955, 798, 1095, 798)&#13;
drawText("D_DO_A6:", 0, 1, true)&#13;
drawText("Ownership", 0, 12, true)&#13;
drawText("Established", 0, 23, true)&#13;
drawPolyline("1088, 794, 1095, 798, 1088, 801)&#13;
drawPolyline("835, 965, 835, 881)&#13;
drawText("D_DO_A7: Disk", 0, 2, true)&#13;
drawText("Now Online", 0, 13, true)&#13;
drawText("(serial_number)", 0, 24, true)&#13;
drawPolyline("831, 888, 835, 881, 838, 888)&#13;
drawPolyline("1095, 1447, 844, 1447, 844, 1132)&#13;
drawText("D_DO_A8: Disk", 0, 2, true)&#13;
drawText("Now Offline", 0, 13, true)&#13;
drawPolyline("840, 1139, 844, 1132, 847, 1139)&#13;
drawPolyline("1095, 1030, 955, 1030)&#13;
drawText("D_DO_A2: Establish", 0, 2, true)&#13;
drawText("Ownership of an", 0, 13, true)&#13;
drawText("Offline Disk", 0, 24, true)&#13;
drawPolyline("962, 1033, 955, 1030, 962, 1026)&#13;
drawPolyline("1299, 1354, 1299, 1271)&#13;
drawText("D_DO_A5: Disk", 0, 2, true)&#13;
drawText("Ownership Released", 0, 13, true)&#13;
drawPolyline("1295, 1278, 1299, 1271, 1302, 1278)&#13;
drawPolyline("1122, 1271, 1122, 1354)&#13;
drawText("D_DO_A4: Eject", 0, 2, true)&#13;
drawText("Disk if Possible", 0, 13, true)&#13;
drawPolyline("1126, 1347, 1122, 1354, 1119, 1347)&#13;
drawPolyline("1642, 965, 1642, 798, 1354, 798)&#13;
drawText("D_DO_A6: Ownership", 0, 2, true)&#13;
drawText("Established", 0, 13, true)&#13;
drawPolyline("1361, 801, 1354, 798, 1361, 794)&#13;
drawPolyline("1392, 1030, 1540, 1030)&#13;
drawText("D_DO_A3: Establish", 0, 2, true)&#13;
drawText("Ownership of an Online", 0, 13, true)&#13;
drawText("Disk", 0, 24, true)&#13;
drawPolyline("1533, 1026, 1540, 1030, 1533, 1033)&#13;
drawPolyline("1392, 1150, 1447, 1150, 1447, 1243, 1392, 1243)&#13;
drawText("D_DO_A5: Disk", 0, 2, true)&#13;
drawText("Ownership", 0, 13, true)&#13;
drawText("Released", 0, 24, true)&#13;
drawPolyline("1398, 1247, 1392, 1243, 1398, 1240)&#13;
drawPolyline("1095, 1150, 1020, 1150, 1020, 1243, 1095, 1243)&#13;
drawText("D_DO_A1:", 0, 2, true)&#13;
drawText("Disk", 0, 13, true)&#13;
drawText("Requested", 0, 24, true)&#13;
drawText("by QP", 0, 35, true)&#13;
drawPolyline("1088, 1240, 1095, 1243, 1088, 1247)&#13;
drawPolyline("1262, 872, 1262, 965)&#13;
drawText("D_DO_A1: Disk", 0, 2, true)&#13;
drawText("Requested by QP", 0, 13, true)&#13;
drawPolyline("1265, 958, 1262, 965, 1258, 958)</expected>
          <actual>drawText(" 6. Satisfying Disk Request", 744, 737, true)&#13;
drawline(742, 748, 955, 748)&#13;
drawText("entry/Select many disks from instances of D_D;Assign disk_found = FALSE;For each disk in disks    If (disk_found == FALSE)        If (disk.Serial_Number == rcvd_evt.serial_...            Assign disk_found = TRUE;            Select any disk_request related by disk-...            Select one process related by disk_requ...            Unrelate disk from process across R1 us...            Generate D_DQ2:'Disk Request Satisfied...        End if;    End if;", 744, 752, true)&#13;
drawText(" 5. Establishing Ownership of an Offline Disk", 754, 969, true)&#13;
drawline(751, 980, 955, 980)&#13;
drawText("entry/Select many disks from instances of D_D;Assign disk_found = FALSE;For each disk in disks    If (disk_found == FALSE)    If (disk.Unowned_in_Library == TRUE)        Select any disk_request related by disk-...        If (not_empty disk_request)             Assign disk_found = TRUE;            Create object instance disk_owner of ...            Select one process related by disk_re...            Relate disk to process across R2 using...            Generate D_D1:'Disk Ownership Esta...        End if;    End if;", 754, 984, true)&#13;
drawText(" 4. Tying to Eject Disk", 1097, 1358, true)&#13;
drawline(1095, 1370, 1326, 1370)&#13;
drawText("entry/Select many disk_set from instances of D_D;Assign disk_found = FALSE;For each disk in disk_set    If (disk_found == FALSE)    If (disk.Unowned_in_Cabinet == TRUE)        Select one disk_owner related by disk-&gt;D_DO[...        If (empty disk_owner)            Select many disk_request related by disk-&gt;D...            If (empty disk_request)                Assign disk_found = TRUE;                Generate D_D6:'Return Unowned Disk to ...            End if;        End if;    End if;    End if;", 1097, 1374, true)&#13;
drawText(" 3. Establishing Ownership of an Online Disk", 1542, 969, true)&#13;
drawline(1540, 980, 1762, 980)&#13;
drawText("entry/Select many disks from instances of D_D;Assign disk_found = FALSE;For each disk in disks    If (disk_found == FALSE)    If (disk.Unowned_in_Cabinet == TRUE)        Select any disk_request related by disk-&gt;D_...        If (not_empty disk_request)            Assign disk_found = TRUE;            Select one process related by disk_request...            Create  object instance owner of D_DO;            Relate disk to process across R2 using ow...            Generate D_D1:'Disk Ownership Establish...            Generate D_DQ2:'Disk Request Satisfied'()...        End if;    End if;    End if;", 1542, 984, true)&#13;
drawText(" 2. Waiting for a Requested Disk to be Ownable", 1097, 969, true)&#13;
drawline(1095, 980, 1391, 980)&#13;
drawText("entry/Select many disk_requests from instances of D_DQ;For each disk_request in disk_requestsif (disk_request.Request_Pending == TRUE)Select one disk related by disk_request-&gt;D_D[R1];    If (disk.Unowned_in_Cabinet == TRUE)        Select one disk_owner related by disk-&gt;D_DO[R2];        If (empty disk_owner)            Generate D_DO_A3:'Establish Ownership of an Online Disk' ...        End if;    Else     If (disk.Unowned_in_Library == TRUE)        Select one disk_owner related by disk-&gt;D_DO[R2];        If (empty disk_owner)            Assign number_of_online = 0;            Select many online_disks from instances of D_OND;            For each online_disk in online_disks                Assign number_of_online = number_of_online + 1;            End for;             Assign number_of_slots = 0;             Select many slots from instances of D_S;             For each slot in slots                 Assign number_of_slots = number_of_slots + 1;             End for;             If (number_of_online &lt; number_of_slots)", 1097, 984, true)&#13;
drawText(" 1. Waiting for a Disk Request", 1097, 737, true)&#13;
drawline(1095, 748, 1354, 748)&#13;
drawText("entry/Select many disk_requests from instances of D_DQ;Assign request_found = FALSE;For each disk_request in disk_requests    If (request_found == FALSE)        If (disk_request.Request_Pending == TRUE)            Assign request_found = TRUE;            Generate D_DO_A1:'Disk Requested by QP' () to D...        End if;    End if;End for;", 1097, 752, true)&#13;
drawPolyline("955, 798, 1095, 798)&#13;
drawText("D_DO_A6:", 0, 1, true)&#13;
drawText("Ownership", 0, 12, true)&#13;
drawText("Established", 0, 23, true)&#13;
drawPolyline("1088, 794, 1095, 798, 1088, 801)&#13;
drawPolyline("835, 965, 835, 881)&#13;
drawText("D_DO_A7:", 0, 2, true)&#13;
drawText("Disk Now", 0, 13, true)&#13;
drawText("Online(serial_number)", 0, 24, true)&#13;
drawPolyline("831, 888, 835, 881, 838, 888)&#13;
drawPolyline("1095, 1447, 844, 1447, 844, 1132)&#13;
drawText("D_DO_A8: Disk", 0, 2, true)&#13;
drawText("Now Offline", 0, 13, true)&#13;
drawPolyline("840, 1139, 844, 1132, 847, 1139)&#13;
drawPolyline("1095, 1030, 955, 1030)&#13;
drawText("D_DO_A2: Establish", 0, 2, true)&#13;
drawText("Ownership of an", 0, 13, true)&#13;
drawText("Offline Disk", 0, 24, true)&#13;
drawPolyline("962, 1033, 955, 1030, 962, 1026)&#13;
drawPolyline("1299, 1354, 1299, 1271)&#13;
drawText("D_DO_A5: Disk", 0, 2, true)&#13;
drawText("Ownership Released", 0, 13, true)&#13;
drawPolyline("1295, 1278, 1299, 1271, 1302, 1278)&#13;
drawPolyline("1122, 1271, 1122, 1354)&#13;
drawText("D_DO_A4: Eject", 0, 2, true)&#13;
drawText("Disk if Possible", 0, 13, true)&#13;
drawPolyline("1126, 1347, 1122, 1354, 1119, 1347)&#13;
drawPolyline("1642, 965, 1642, 798, 1354, 798)&#13;
drawText("D_DO_A6: Ownership", 0, 2, true)&#13;
drawText("Established", 0, 13, true)&#13;
drawPolyline("1361, 801, 1354, 798, 1361, 794)&#13;
drawPolyline("1392, 1030, 1540, 1030)&#13;
drawText("D_DO_A3: Establish", 0, 2, true)&#13;
drawText("Ownership of an Online", 0, 13, true)&#13;
drawText("Disk", 0, 24, true)&#13;
drawPolyline("1533, 1026, 1540, 1030, 1533, 1033)&#13;
drawPolyline("1392, 1150, 1447, 1150, 1447, 1243, 1392, 1243)&#13;
drawText("D_DO_A5: Disk", 0, 2, true)&#13;
drawText("Ownership", 0, 13, true)&#13;
drawText("Released", 0, 24, true)&#13;
drawPolyline("1398, 1247, 1392, 1243, 1398, 1240)&#13;
drawPolyline("1095, 1150, 1020, 1150, 1020, 1243, 1095, 1243)&#13;
drawText("D_DO_A1:", 0, 2, true)&#13;
drawText("Disk", 0, 13, true)&#13;
drawText("Requested", 0, 24, true)&#13;
drawText("by QP", 0, 35, true)&#13;
drawPolyline("1088, 1240, 1095, 1243, 1088, 1247)&#13;
drawPolyline("1262, 872, 1262, 965)&#13;
drawText("D_DO_A1: Disk", 0, 2, true)&#13;
drawText("Requested by QP", 0, 13, true)&#13;
drawPolyline("1265, 958, 1262, 965, 1258, 958)</actual>junit.framework.ComparisonFailure: Actual results differ from those expected, file: 
3145734-10
 expected:&lt;...&#13;
drawText("D_DO_A7:[ Disk", 0, 2, true)&#13;
drawText("Now Online", 0, 13, true)&#13;
drawText("](serial_number)", 0,...&gt; but was:&lt;...&#13;
drawText("D_DO_A7:[", 0, 2, true)&#13;
drawText("Disk Now", 0, 13, true)&#13;
drawText("Online](serial_number)", 0,...&gt;&#13;
	at junit.framework.Assert.assertEquals(Assert.java:81)&#13;
	at com.mentor.nucleus.bp.ui.canvas.test.CanvasTest.doTestDiagram(CanvasTest.java:154)&#13;
	at com.mentor.nucleus.bp.ui.canvas.test.ODMSTest.testDiskOwnershipAssignerStateChart(ODMSTest.java:167)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at junit.framework.TestCase.runTest(TestCase.java:168)&#13;
	at junit.framework.TestCase.runBare(TestCase.java:134)&#13;
	at junit.framework.TestResult$1.protect(TestResult.java:110)&#13;
	at junit.framework.TestResult.runProtected(TestResult.java:128)&#13;
	at junit.framework.TestResult.run(TestResult.java:113)&#13;
	at junit.framework.TestCase.run(TestCase.java:124)&#13;
	at junit.framework.TestSuite.runTest(TestSuite.java:243)&#13;
	at junit.framework.TestSuite.run(TestSuite.java:238)&#13;
	at junit.framework.TestSuite.runTest(TestSuite.java:243)&#13;
	at junit.framework.TestSuite.run(TestSuite.java:238)&#13;
	at org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run(JUnit3TestReference.java:130)&#13;
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)&#13;
	at org.eclipse.pde.internal.junit.runtime.RemotePluginTestRunner.main(RemotePluginTestRunner.java:62)&#13;
	at org.eclipse.pde.internal.junit.runtime.PlatformUITestHarness$1.run(PlatformUITestHarness.java:47)&#13;
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)&#13;
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:135)&#13;
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4140)&#13;
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3757)&#13;
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2701)&#13;
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2665)&#13;
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2499)&#13;
	at org.eclipse.ui.internal.Workbench$7.run(Workbench.java:679)&#13;
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)&#13;
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:668)&#13;
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)&#13;
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:123)&#13;
	at org.eclipse.pde.internal.junit.runtime.NonUIThreadTestApplication.runApp(NonUIThreadTestApplication.java:54)&#13;
	at org.eclipse.pde.internal.junit.runtime.UITestApplication.runApp(UITestApplication.java:41)&#13;
	at org.eclipse.pde.internal.junit.runtime.NonUIThreadTestApplication.start(NonUIThreadTestApplication.java:48)&#13;
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:196)&#13;
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)&#13;
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)&#13;
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:344)&#13;
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:622)&#13;
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:577)&#13;
	at org.eclipse.equinox.launcher.Main.run(Main.java:1410)&#13;
	at org.eclipse.equinox.launcher.Main.main(Main.java:1386)&#13;
&#13;
</failure>
      </testcase>
      <testcase name="testDriveDiskAssignerStateChart" classname="com.mentor.nucleus.bp.ui.canvas.test.ODMSTest" time="0.936"/>
      <testcase name="testSlotStateChart" classname="com.mentor.nucleus.bp.ui.canvas.test.ODMSTest" time="1.421"/>
      <testcase name="testOnlineLocationChart" classname="com.mentor.nucleus.bp.ui.canvas.test.ODMSTest" time="1.389"/>
      <testcase name="testSlotDiskAssignerStateChart" classname="com.mentor.nucleus.bp.ui.canvas.test.ODMSTest" time="1.39"/>
      <testcase name="testDriveStateChart" classname="com.mentor.nucleus.bp.ui.canvas.test.ODMSTest" time="1.498"/>
      <testcase name="testPortStateChart" classname="com.mentor.nucleus.bp.ui.canvas.test.ODMSTest" time="1.468"/>
      <testcase name="testRobotStateChart" classname="com.mentor.nucleus.bp.ui.canvas.test.ODMSTest" time="1.545"/>
      <testcase name="testODMSDTPackageDiagram" classname="com.mentor.nucleus.bp.ui.canvas.test.ODMSTest" time="1.327"/>
      <testcase name="testODMSFNPackageDiagram" classname="com.mentor.nucleus.bp.ui.canvas.test.ODMSTest" time="1.046"/>
      <testcase name="testODMSEEPackageDiagram" classname="com.mentor.nucleus.bp.ui.canvas.test.ODMSTest" time="1.265"/>
    </testsuite>
    <testsuite name="com.mentor.nucleus.bp.ui.canvas.test.OOAofOOATest" time="52.936">
      <testcase name="testODMSDTPackageDiagram" classname="com.mentor.nucleus.bp.ui.canvas.test.OOAofOOATest" time="15.319"/>
      <testcase name="testODMSEEPackageDiagram" classname="com.mentor.nucleus.bp.ui.canvas.test.OOAofOOATest" time="1.405"/>
      <testcase name="testOOAofOOADomainChart" classname="com.mentor.nucleus.bp.ui.canvas.test.OOAofOOATest" time="1.218"/>
      <testcase name="testOOAofOOASubsystemClassDiagram" classname="com.mentor.nucleus.bp.ui.canvas.test.OOAofOOATest" time="2.185"/>
      <testcase name="testOOAofOOARelationshipClassDiagram" classname="com.mentor.nucleus.bp.ui.canvas.test.OOAofOOATest" time="1.779"/>
      <testcase name="testOOAofOOACandAClassDiagram" classname="com.mentor.nucleus.bp.ui.canvas.test.OOAofOOATest" time="1.967"/>
      <testcase name="testOOAofOOAStateModelClassDiagram" classname="com.mentor.nucleus.bp.ui.canvas.test.OOAofOOATest" time="2.31"/>
      <testcase name="testOOAofOOAObjectClassDiagram" classname="com.mentor.nucleus.bp.ui.canvas.test.OOAofOOATest" time="1.935"/>
      <testcase name="testOOAofOOAGraphicsClassDiagram" classname="com.mentor.nucleus.bp.ui.canvas.test.OOAofOOATest" time="2.201"/>
      <testcase name="testOOAofOOAActionClassDiagram" classname="com.mentor.nucleus.bp.ui.canvas.test.OOAofOOATest" time="2.169"/>
      <testcase name="testOOAofOOAValueClassDiagram" classname="com.mentor.nucleus.bp.ui.canvas.test.OOAofOOATest" time="2.278"/>
      <testcase name="testOOAofOOAAssignClassDiagram" classname="com.mentor.nucleus.bp.ui.canvas.test.OOAofOOATest" time="1.53"/>
      <testcase name="testOOAofOOARelateClassDiagram" classname="com.mentor.nucleus.bp.ui.canvas.test.OOAofOOATest" time="1.764"/>
      <testcase name="testOOAofOOASelectClassDiagram" classname="com.mentor.nucleus.bp.ui.canvas.test.OOAofOOATest" time="1.67"/>
      <testcase name="testOOAofOOAInvokeClassDiagram" classname="com.mentor.nucleus.bp.ui.canvas.test.OOAofOOATest" time="1.688"/>
      <testcase name="testOOAofOOAGenerateClassDiagram" classname="com.mentor.nucleus.bp.ui.canvas.test.OOAofOOATest" time="1.389"/>
      <testcase name="testOOAofOOAUseCaseClassDiagram" classname="com.mentor.nucleus.bp.ui.canvas.test.OOAofOOATest" time="1.592"/>
      <testcase name="testOOAofOOAConnectorToolStateChart" classname="com.mentor.nucleus.bp.ui.canvas.test.OOAofOOATest" time="2.731">
        <failure>
          <expected>drawText(" 1. Idle", 556, 439, true)&#13;
drawline(555, 444, 669, 444)&#13;
drawText("entry/GRAPH::setMouseCursor(type:"default");", 556, 447, true)&#13;
drawText(" 2. Waiting for Start Symbol", 517, 493, true)&#13;
drawline(515, 499, 733, 499)&#13;
drawText("entry/GRAPH::setMouseCursor(type:"pencil");", 517, 502, true)&#13;
drawText(" 3. Determining Mouse Down Location Suitability", 517, 553, true)&#13;
drawline(515, 558, 733, 558)&#13;
drawText("entry/select one canvas related by self-&gt;GD_TOOL[R1012]-&gt;GD_MD[R1011];select many elements related by canvas-&gt;GD_GE[R1007];isOverSymbol = false;if (self.startsWith == "symbol")  // Check only shapes  select many elements related by canvas-&gt;GD_GE[R1007]-&gt;GD_SHP[R1006]-&gt;GD_GE[R1006];  for each element in elements    if (element.isOver(x:rcvd_evt.X, y:rcvd_evt.Y))      relate self to element across R1016;      generate GD_CNT5:'Suitable Location'(X:rcvd_evt.X, Y:rcvd_evt.Y) to self;      isOverSymbol = true;    end if;  end for;  if (not isOverSymbol)    generate GD_CNT4:'Unsuitable Location' to self;  end if;elif (self.startsWith == "white space")  for each element in elements    if (element.isOver(x:rcvd_evt.X, y:rcvd_evt.Y))      isOverSymbol = true;    end if;  end for;  if (isOverSymbol)     generate GD_CNT4:'Unsuitable Location' to self; else    generate GD_CNT5:'Suitable Location'(X:rcvd_evt.X, Y:rcvd_evt.Y) to self;  end if;end if;", 517, 561, true)&#13;
drawText(" 4. Creating First Segment", 527, 741, true)&#13;
drawline(525, 747, 718, 747)&#13;
drawText("entry/select one startElem related by self-&gt;GD_GE[R1016];select one canvas related by self-&gt;GD_TOOL[R1012]-&gt;GD_MD[R1015];// Create connector elementcreate object instance conElem of GD_GE;// GE_ID is an integer, so we must explicity allocate an id.select many elems from instances of GD_GE;conElem.GE_ID = cardinality elems;// id allocatedconElem.waitingForClientElement = true;select one elem_spec related by self-&gt;GD_TOOL[R1012]-&gt;GD_ES[R1014];relate conElem to elem_spec across R1010;relate conElem to canvas across R1007;create object instance connector of GD_CON;relate conElem to connector across R1006;relate connector to startElem across R1001;// Create first line segmentcreate object instance segment of GD_LS;// GE_ID is an integer, so we must explicity allocate an id.select many segs from instances of GD_LS;segment.GE_ID = cardinality segs;// id allocatedrelate connector to segment across R1004;// Prepare canvas for drawing segmentsegment.drawing = true;segment.setStart_X(newValue: (rcvd_evt.X / canvas.ZoomFactor) + canvas.ScrollXPo...segment.setStart_Y(newValue: (rcvd_evt.Y / canvas.ZoomFactor) + canvas.ScrollYP...segment.End_X = segment.Start_X;segment.End_Y = segment.Start_Y;", 527, 750, true)&#13;
drawText(" 5. Dragging First Segment", 531, 940, true)&#13;
drawline(530, 945, 713, 945)&#13;
drawText("entry/select one canvas related by self-&gt;GD_TOOL[R1012]-&gt;GD_MD[R1015];select any segment from instances of GD_LS where (selected.drawing);segment.setEnd_X(newValue:segment.End_X + (rcvd_evt.X / canvas.ZoomFacto...segment.setEnd_Y(newValue:segment.End_Y + (rcvd_evt.Y / canvas.ZoomFact...GRAPH::reDraw();", 531, 948, true)&#13;
drawText(" 6. Determining Mouse Up Location", 487, 1009, true)&#13;
drawline(486, 1015, 753, 1015)&#13;
drawText("entry/select any segment from instances of GD_LS where (selected.drawing);select one canvas related by self-&gt;GD_TOOL[R1012]-&gt;GD_MD[R1011];select many elements related by canvas-&gt;GD_GE[R1007];isOverSymbol = false;if (self.endsWith == "symbol")  // Check only shapes  select many elements related by canvas-&gt;GD_GE[R1007]-&gt;GD_SHP[R1006]-&gt;GD_GE[R1006];  for each element in elements    if (element.isOver(x:rcvd_evt.X, y:rcvd_evt.Y))      select any conElem from instances of GD_GE where (selected.waitingForClientElement);      select one connector related by conElem -&gt;GD_CON[R1006];      select one startElem related by connector-&gt;GD_GE[R1001];      if (startElem == element)        // Start and end symbols are the same        generate GD_CNT4:'Unsuitable Location' to self;      else        relate connector to element across R1000;        generate GD_CNT8:'Complete' to self;      end if;      isOverSymbol = true;    end if;  end for;  if (not isOverSymbol)    // Waypoints are allowed, hence whitespace is OK    generate GD_CNT5:'Suitable Location'(X:rcvd_evt.X, Y:rcvd_evt.Y) to self;  end if;elif (self.endsWith == "white space")  for each element in elements    if (element.isOver(x:rcvd_evt.X, y:rcvd_evt.Y))      isOverSymbol = true;    end if;  end for;  if (isOverSymbol)     generate GD_CNT4:'Unsuitable Location' to self; else    generate GD_CNT8:Complete to self;  end if;end if;", 487, 1018, true)&#13;
drawText(" 7. Creating Element", 1147, 439, true)&#13;
drawline(1145, 444, 1353, 444)&#13;
drawText("entry/select one canvas related by self-&gt;GD_TOOL[R1012]-&gt;GD_MD[R1015];select one parent related by self-&gt;GD_TOOL[R1012];//select any segment from instances of GD_LS where (selected.drawing);if (not_empty segment)  segment.drawing = false;end if;//select any conElem from instances of GD_GE where (selected.waitingForClientElement);select one connector related by conElem-&gt;GD_CON[R1006];select one startElement related by connector-&gt;GD_GE[R1001];select one endElement related by connector-&gt;GD_GE[R1000];//// Create the client instance//CLIENT::invoke2(method:parent.Method, on:canvas.represents,                      p1:startElement.OOA_ID, p2:endElement.OOA_ID);//// The work is done, get ready for another connector creation//generate GD_CNT10:Done to self;", 1147, 447, true)&#13;
drawText(" 9. Preparing to Drag Subsequent Segment", 973, 821, true)&#13;
drawline(972, 826, 1085, 826)&#13;
drawText("entry/", 973, 829, true)&#13;
drawText(" 10. Dragging Subsequent Segments", 1171, 860, true)&#13;
drawline(1170, 866, 1353, 866)&#13;
drawText("entry/select one canvas related by self-&gt;GD_TOOL[R1012]-&gt;GD_MD[R1015];select any segment from instances of GD_LS where (selected.drawing);segment.setEnd_X(newValue:segment.End_X + (rcvd_evt.X / canvas.ZoomFacto...segment.setEnd_Y(newValue:segment.End_Y + (rcvd_evt.Y / canvas.ZoomFact...GRAPH::reDraw();", 1171, 869, true)&#13;
drawText(" 11. Tracking End Segment without Drawing", 819, 816, true)&#13;
drawline(818, 821, 937, 821)&#13;
drawText("entry/select one canvas related by self-&gt;GD_TOOL[R101...select any segment from instances of GD_LS wher...segment.setEnd_X(newValue:segment.End_X + (rc...segment.setEnd_Y(newValue:segment.End_Y + (r...", 819, 824, true)&#13;
drawText(" 12. Determining Subsequent Mouse Up Location Suitability", 1127, 598, true)&#13;
drawline(1125, 603, 1403, 603)&#13;
drawText("entry/select any segment from instances of GD_LS where (selected.drawing);select one canvas related by self-&gt;GD_TOOL[R1012]-&gt;GD_MD[R1011];select many elements related by canvas-&gt;GD_GE[R1007];isOverSymbol = false;if (self.endsWith == "symbol")  // Check only shapes  select many elements related by canvas-&gt;GD_GE[R1007]-&gt;GD_SHP[R1006]-&gt;GD_GE[R1006];  for each element in elements    if (element.isOver(x:rcvd_evt.X, y:rcvd_evt.Y))      select any conElem from instances of GD_GE where (selected.waitingForClientElement);      select one connector related by conElem -&gt;GD_CON[R1006];      relate connector to element across R1000;      generate GD_CNT8:'Complete' to self;      isOverSymbol = true;    end if;  end for;  if (not isOverSymbol)    // Waypoints are allowed, hence whitespace is OK    generate GD_CNT5:'Suitable Location'(X:rcvd_evt.X, Y:rcvd_evt.Y) to self;  end if;elif (self.endsWith == "white space")  for each element in elements    if (element.isOver(x:rcvd_evt.X, y:rcvd_evt.Y))      isOverSymbol = true;    end if;  end for;  if (isOverSymbol)     generate GD_CNT4:'Unsuitable Location' to self; else    generate GD_CNT8:Complete to self;  end if;end if;", 1127, 606, true)&#13;
drawText(" 13. Mouse up at Beginning of Segment", 973, 910, true)&#13;
drawline(972, 916, 1085, 916)&#13;
drawText("entry/", 973, 918, true)&#13;
drawText(" 8. Creating Subsequent Segment", 864, 622, true)&#13;
drawline(863, 628, 1076, 628)&#13;
drawText("entry/select one canvas related by self-&gt;GD_TOOL[R1012]-&gt;GD_MD[R1015];select any conElem from instances of GD_GE where (selected.waitingForClientElement);select one connector related by conElem -&gt;GD_CON[R1006];// Create subsequent line segmentcreate object instance segment of GD_LS;// GE_ID is an integer, so we must explicity allocate an id.select many segs from instances of GD_LS;segment.GE_ID = cardinality segs;// id allocatedrelate connector to segment across R1004;select any lastSegment related by connector-&gt;GD_LS[R1004] where (selected.drawing);lastSegment.setEnd_X(newValue:(rcvd_evt.X / canvas.ZoomFactor) + canvas.ScrollXPos);lastSegment.setEnd_Y(newValue:(rcvd_evt.Y / canvas.ZoomFactor) + canvas.ScrollYPos);relate segment to lastSegment across R1003.'follows';lastSegment.drawing = false;// Prepare segment for drawingsegment.drawing = true;segment.Start_X = lastSegment.End_X;segment.Start_Y = lastSegment.End_Y;segment.End_X = segment.Start_X;segment.End_Y = segment.Start_Y;", 864, 631, true)&#13;
drawText(" 14. Mouse Down Tracking End Segment without Drawing", 1171, 955, true)&#13;
drawline(1170, 960, 1328, 960)&#13;
drawText("entry/", 1171, 963, true)&#13;
drawText(" 15. Determining Mouse Up Location without Drawing", 804, 1009, true)&#13;
drawline(803, 1015, 1071, 1015)&#13;
drawText("entry/select any segment from instances of GD_LS where (selected.drawing);select one canvas related by self-&gt;GD_TOOL[R1012]-&gt;GD_MD[R1011];select many elements related by canvas-&gt;GD_GE[R1007];isOverSymbol = false;if (self.endsWith == "symbol")  // Check only shapes  select many elements related by canvas-&gt;GD_GE[R1007]-&gt;GD_SHP[R1006]-&gt;GD_GE[R1006];  for each element in elements    if (element.isOver(x:rcvd_evt.X, y:rcvd_evt.Y))      select any conElem from instances of GD_GE where (selected.waitingForClientElement);      select one connector related by conElem -&gt;GD_CON[R1006];      relate connector to element across R1000;      generate GD_CNT8:'Complete' to self;      isOverSymbol = true;    end if;  end for;  if (not isOverSymbol)    // If we get here, the mouse button was pressed and released without moving,    //  create a new segment by transitioning back to Creating Subsequent Segment    generate GD_CNT5:'Suitable Location'(X:rcvd_evt.X, Y:rcvd_evt.Y) to self;  end if;elif (self.endsWith == "white space")  for each element in elements    if (element.isOver(x:rcvd_evt.X, y:rcvd_evt.Y))      isOverSymbol = true;    end if;  end for;  if (not isOverSymbol)    generate GD_CNT8:Complete to self;  end if;end if;", 804, 1018, true)&#13;
drawText(" 16. Clearing Partly Drawn Connector", 303, 493, true)&#13;
drawline(302, 499, 465, 499)&#13;
drawText("entry/select many elements related by self-&gt;GD_TOOL[R1012]-&gt;GD_MD[R1...                                                where (selected.waitingForClientElem...for each element in elements  element.delete();end for;generate GD_CNT10:Done to self;", 303, 502, true)&#13;
drawText(" 17. Creating Segment without Mouse Move", 383, 707, true)&#13;
drawline(381, 712, 490, 712)&#13;
drawText("entry/generate GD_CNT4:'Unsuitable Location' to self;", 383, 715, true)&#13;
drawPolyline("585, 471, 585, 491)&#13;
drawText("GD_CNT1:", 0, 1, true)&#13;
drawText("Activate", 0, 7, true)&#13;
drawPolyline("587, 487, 585, 491, 583, 487)&#13;
drawPolyline("634, 491, 634, 471)&#13;
drawText("GD_CNT2:", 0, 1, true)&#13;
drawText("Deactivate", 0, 7, true)&#13;
drawPolyline("633, 474, 634, 471, 636, 474)&#13;
drawPolyline("585, 540, 585, 550)&#13;
drawText("GD_CNT3: Mouse", 0, 1, true)&#13;
drawText("Down(X, Y)", 0, 7, true)&#13;
drawPolyline("587, 546, 585, 550, 583, 546)&#13;
drawPolyline("634, 550, 634, 540)&#13;
drawText("GD_CNT4:", 0, 1, true)&#13;
drawText("Unsuitable Location", 0, 7, true)&#13;
drawPolyline("633, 544, 634, 540, 636, 544)&#13;
drawPolyline("1145, 515, 734, 515)&#13;
drawText("GD_CNT10:", 0, 1, true)&#13;
drawText("Done", 0, 7, true)&#13;
drawPolyline("737, 517, 734, 515, 737, 513)&#13;
drawPolyline("466, 520, 515, 520)&#13;
drawText("GD_CNT10:", 0, 1, true)&#13;
drawText("Done", 0, 7, true)&#13;
drawPolyline("512, 518, 515, 520, 512, 522)&#13;
drawPolyline("610, 724, 610, 739)&#13;
drawText("GD_CNT5: Suitable", 0, 1, true)&#13;
drawText("Location(X, Y)", 0, 7, true)&#13;
drawPolyline("611, 735, 610, 739, 608, 735)&#13;
drawPolyline("610, 917, 610, 937)&#13;
drawText("GD_CNT7: Mouse", 0, 1, true)&#13;
drawText("Move(X, Y)", 0, 7, true)&#13;
drawPolyline("611, 933, 610, 937, 608, 933)&#13;
drawPolyline("525, 843, 436, 843, 436, 773)&#13;
drawText("GD_CNT6: Mouse", 0, 1, true)&#13;
drawText("Up(X, Y)", 0, 7, true)&#13;
drawPolyline("434, 777, 436, 773, 438, 777)&#13;
drawPolyline("585, 987, 585, 1006)&#13;
drawText("GD_CNT6:", 0, 2, true)&#13;
drawText("Mouse Up(X, Y)", 0, 7, true)&#13;
drawPolyline("587, 1003, 585, 1006, 583, 1003)&#13;
drawPolyline("605, 987, 605, 1001, 664, 1001, 664, 987)&#13;
drawText("GD_CNT7:", 0, 1, true)&#13;
drawText("Mouse Move(X,", 0, 7, true)&#13;
drawText("Y)", 0, 13, true)&#13;
drawPolyline("662, 990, 664, 987, 666, 990)&#13;
drawPolyline("753, 1081, 763, 1081, 763, 555, 1145, 555)&#13;
drawText("GD_CNT8:", 0, 1, true)&#13;
drawText("Complete", 0, 7, true)&#13;
drawPolyline("1142, 553, 1145, 555, 1142, 557)&#13;
drawPolyline("753, 1175, 788, 1175, 788, 669, 863, 669)&#13;
drawText("GD_CNT5:", 0, 1, true)&#13;
drawText("Suitable", 0, 7, true)&#13;
drawText("Location(X,", 0, 13, true)&#13;
drawText("Y)", 0, 19, true)&#13;
drawPolyline("859, 667, 863, 669, 859, 671)&#13;
drawPolyline("486, 1091, 367, 1091, 367, 550)&#13;
drawText("GD_CNT4:", 0, 1, true)&#13;
drawText("Unsuitable Location", 0, 7, true)&#13;
drawPolyline("365, 554, 367, 550, 368, 554)&#13;
drawPolyline("1264, 595, 1264, 575)&#13;
drawText("GD_CNT8:", 0, 1, true)&#13;
drawText("Complete", 0, 7, true)&#13;
drawPolyline("1262, 579, 1264, 575, 1266, 579)&#13;
drawPolyline("1071, 1140, 1423, 1140, 1423, 515, 1354, 515)&#13;
drawText("GD_CNT8:", 0, 1, true)&#13;
drawText("Complete", 0, 7, true)&#13;
drawPolyline("1357, 517, 1354, 515, 1357, 513)&#13;
drawPolyline("1086, 843, 1111, 843, 1111, 887, 1170, 887)&#13;
drawText("GD_CNT7:", 0, 1, true)&#13;
drawText("Mouse Move(X,", 0, 7, true)&#13;
drawText("Y)", 0, 13, true)&#13;
drawPolyline("1166, 885, 1170, 887, 1166, 889)&#13;
drawPolyline("1051, 858, 1051, 907)&#13;
drawText("GD_CNT6:", 0, 1, true)&#13;
drawText("Mouse Up(X, Y)", 0, 7, true)&#13;
drawPolyline("1053, 903, 1051, 907, 1049, 903)&#13;
drawPolyline("1026, 758, 1026, 818)&#13;
drawText("GD_CNT3:", 0, 2, true)&#13;
drawText("Mouse Down(X,", 0, 7, true)&#13;
drawText("Y)", 0, 13, true)&#13;
drawPolyline("1028, 814, 1026, 818, 1024, 814)&#13;
drawPolyline("1001, 907, 1001, 858)&#13;
drawText("GD_CNT3:", 0, 1, true)&#13;
drawText("Mouse Down(X,", 0, 7, true)&#13;
drawText("Y)", 0, 13, true)&#13;
drawPolyline("1000, 861, 1001, 858, 1003, 861)&#13;
drawPolyline("1304, 907, 1304, 922, 1254, 922, 1254, 907)&#13;
drawText("GD_CNT7:", 0, 1, true)&#13;
drawText("Mouse Move(X,", 0, 7, true)&#13;
drawText("Y)", 0, 13, true)&#13;
drawPolyline("1253, 911, 1254, 907, 1256, 911)&#13;
drawPolyline("1264, 858, 1264, 798)&#13;
drawText("GD_CNT6: Mouse", 0, 1, true)&#13;
drawText("Up(X, Y)", 0, 7, true)&#13;
drawPolyline("1262, 802, 1264, 798, 1266, 802)&#13;
drawPolyline("1230, 952, 1230, 907)&#13;
drawText("GD_CNT7:", 0, 2, true)&#13;
drawText("Mouse Move(X,", 0, 7, true)&#13;
drawText("Y)", 0, 13, true)&#13;
drawPolyline("1228, 911, 1230, 907, 1231, 911)&#13;
drawPolyline("907, 813, 907, 793, 858, 793, 858, 813)&#13;
drawText("GD_CNT7:", 0, 1, true)&#13;
drawText("Mouse Move(X,", 0, 7, true)&#13;
drawText("Y)", 0, 13, true)&#13;
drawPolyline("859, 809, 858, 813, 856, 809)&#13;
drawPolyline("897, 877, 897, 977, 1170, 977)&#13;
drawText("GD_CNT3:", 0, 1, true)&#13;
drawText("Mouse Down(X,", 0, 7, true)&#13;
drawText("Y)", 0, 13, true)&#13;
drawPolyline("1166, 975, 1170, 977, 1166, 978)&#13;
drawPolyline("972, 932, 952, 932, 952, 843, 937, 843)&#13;
drawText("GD_CNT7:", 0, 1, true)&#13;
drawText("Mouse Move(X,", 0, 7, true)&#13;
drawText("Y)", 0, 13, true)&#13;
drawPolyline("941, 845, 937, 843, 941, 841)&#13;
drawPolyline("863, 719, 833, 719, 833, 813)&#13;
drawText("GD_CNT7:", 0, 1, true)&#13;
drawText("Mouse Move(X,", 0, 7, true)&#13;
drawText("Y)", 0, 13, true)&#13;
drawPolyline("835, 809, 833, 813, 831, 809)&#13;
drawPolyline("1125, 689, 1076, 689)&#13;
drawText("GD_CNT5:", 0, 1, true)&#13;
drawText("Suitable", 0, 7, true)&#13;
drawText("Location(X,", 0, 13, true)&#13;
drawText("Y)", 0, 19, true)&#13;
drawPolyline("1080, 691, 1076, 689, 1080, 687)&#13;
drawPolyline("813, 1006, 813, 699, 863, 699)&#13;
drawText("GD_CNT5:", 0, 1, true)&#13;
drawText("Suitable", 0, 7, true)&#13;
drawText("Location(X,", 0, 13, true)&#13;
drawText("Y)", 0, 19, true)&#13;
drawPolyline("859, 697, 863, 699, 859, 701)&#13;
drawPolyline("1230, 1016, 1230, 1086, 1071, 1086)&#13;
drawText("GD_CNT6: Mouse", 0, 1, true)&#13;
drawText("Up(X, Y)", 0, 7, true)&#13;
drawPolyline("1075, 1088, 1071, 1086, 1075, 1084)&#13;
drawPolyline("436, 704, 436, 550)&#13;
drawText("GD_CNT4:", 0, 1, true)&#13;
drawText("Unsuitable Location", 0, 7, true)&#13;
drawPolyline("434, 554, 436, 550, 438, 554)</expected>
          <actual>drawText(" 1. Idle", 556, 439, true)&#13;
drawline(555, 444, 669, 444)&#13;
drawText("entry/GRAPH::setMouseCursor(type:"default");", 556, 447, true)&#13;
drawText(" 2. Waiting for Start Symbol", 517, 493, true)&#13;
drawline(515, 499, 733, 499)&#13;
drawText("entry/GRAPH::setMouseCursor(type:"pencil");", 517, 502, true)&#13;
drawText(" 3. Determining Mouse Down Location Suitability", 517, 553, true)&#13;
drawline(515, 558, 733, 558)&#13;
drawText("entry/select one canvas related by self-&gt;GD_TOOL[R1012]-&gt;GD_MD[R1011];select many elements related by canvas-&gt;GD_GE[R1007];isOverSymbol = false;if (self.startsWith == "symbol")  // Check only shapes  select many elements related by canvas-&gt;GD_GE[R1007]-&gt;GD_SHP[R1006]-&gt;GD_GE[R1006];  for each element in elements    if (element.isOver(x:rcvd_evt.X, y:rcvd_evt.Y))      relate self to element across R1016;      generate GD_CNT5:'Suitable Location'(X:rcvd_evt.X, Y:rcvd_evt.Y) to self;      isOverSymbol = true;    end if;  end for;  if (not isOverSymbol)    generate GD_CNT4:'Unsuitable Location' to self;  end if;elif (self.startsWith == "white space")  for each element in elements    if (element.isOver(x:rcvd_evt.X, y:rcvd_evt.Y))      isOverSymbol = true;    end if;  end for;  if (isOverSymbol)     generate GD_CNT4:'Unsuitable Location' to self; else    generate GD_CNT5:'Suitable Location'(X:rcvd_evt.X, Y:rcvd_evt.Y) to self;  end if;end if;", 517, 561, true)&#13;
drawText(" 4. Creating First Segment", 527, 741, true)&#13;
drawline(525, 747, 718, 747)&#13;
drawText("entry/select one startElem related by self-&gt;GD_GE[R1016];select one canvas related by self-&gt;GD_TOOL[R1012]-&gt;GD_MD[R1015];// Create connector elementcreate object instance conElem of GD_GE;// GE_ID is an integer, so we must explicity allocate an id.select many elems from instances of GD_GE;conElem.GE_ID = cardinality elems;// id allocatedconElem.waitingForClientElement = true;select one elem_spec related by self-&gt;GD_TOOL[R1012]-&gt;GD_ES[R1014];relate conElem to elem_spec across R1010;relate conElem to canvas across R1007;create object instance connector of GD_CON;relate conElem to connector across R1006;relate connector to startElem across R1001;// Create first line segmentcreate object instance segment of GD_LS;// GE_ID is an integer, so we must explicity allocate an id.select many segs from instances of GD_LS;segment.GE_ID = cardinality segs;// id allocatedrelate connector to segment across R1004;// Prepare canvas for drawing segmentsegment.drawing = true;segment.setStart_X(newValue: (rcvd_evt.X / canvas.ZoomFactor) + canvas.ScrollXPo...segment.setStart_Y(newValue: (rcvd_evt.Y / canvas.ZoomFactor) + canvas.ScrollYP...segment.End_X = segment.Start_X;segment.End_Y = segment.Start_Y;", 527, 750, true)&#13;
drawText(" 5. Dragging First Segment", 531, 940, true)&#13;
drawline(530, 945, 713, 945)&#13;
drawText("entry/select one canvas related by self-&gt;GD_TOOL[R1012]-&gt;GD_MD[R1015];select any segment from instances of GD_LS where (selected.drawing);segment.setEnd_X(newValue:segment.End_X + (rcvd_evt.X / canvas.ZoomFacto...segment.setEnd_Y(newValue:segment.End_Y + (rcvd_evt.Y / canvas.ZoomFact...GRAPH::reDraw();", 531, 948, true)&#13;
drawText(" 6. Determining Mouse Up Location", 487, 1009, true)&#13;
drawline(486, 1015, 753, 1015)&#13;
drawText("entry/select any segment from instances of GD_LS where (selected.drawing);select one canvas related by self-&gt;GD_TOOL[R1012]-&gt;GD_MD[R1011];select many elements related by canvas-&gt;GD_GE[R1007];isOverSymbol = false;if (self.endsWith == "symbol")  // Check only shapes  select many elements related by canvas-&gt;GD_GE[R1007]-&gt;GD_SHP[R1006]-&gt;GD_GE[R1006];  for each element in elements    if (element.isOver(x:rcvd_evt.X, y:rcvd_evt.Y))      select any conElem from instances of GD_GE where (selected.waitingForClientElement);      select one connector related by conElem -&gt;GD_CON[R1006];      select one startElem related by connector-&gt;GD_GE[R1001];      if (startElem == element)        // Start and end symbols are the same        generate GD_CNT4:'Unsuitable Location' to self;      else        relate connector to element across R1000;        generate GD_CNT8:'Complete' to self;      end if;      isOverSymbol = true;    end if;  end for;  if (not isOverSymbol)    // Waypoints are allowed, hence whitespace is OK    generate GD_CNT5:'Suitable Location'(X:rcvd_evt.X, Y:rcvd_evt.Y) to self;  end if;elif (self.endsWith == "white space")  for each element in elements    if (element.isOver(x:rcvd_evt.X, y:rcvd_evt.Y))      isOverSymbol = true;    end if;  end for;  if (isOverSymbol)     generate GD_CNT4:'Unsuitable Location' to self; else    generate GD_CNT8:Complete to self;  end if;end if;", 487, 1018, true)&#13;
drawText(" 7. Creating Element", 1147, 439, true)&#13;
drawline(1145, 444, 1353, 444)&#13;
drawText("entry/select one canvas related by self-&gt;GD_TOOL[R1012]-&gt;GD_MD[R1015];select one parent related by self-&gt;GD_TOOL[R1012];//select any segment from instances of GD_LS where (selected.drawing);if (not_empty segment)  segment.drawing = false;end if;//select any conElem from instances of GD_GE where (selected.waitingForClientElement);select one connector related by conElem-&gt;GD_CON[R1006];select one startElement related by connector-&gt;GD_GE[R1001];select one endElement related by connector-&gt;GD_GE[R1000];//// Create the client instance//CLIENT::invoke2(method:parent.Method, on:canvas.represents,                      p1:startElement.OOA_ID, p2:endElement.OOA_ID);//// The work is done, get ready for another connector creation//generate GD_CNT10:Done to self;", 1147, 447, true)&#13;
drawText(" 9. Preparing to Drag Subsequent Segment", 973, 821, true)&#13;
drawline(972, 826, 1085, 826)&#13;
drawText("entry/", 973, 829, true)&#13;
drawText(" 10. Dragging Subsequent Segments", 1171, 860, true)&#13;
drawline(1170, 866, 1353, 866)&#13;
drawText("entry/select one canvas related by self-&gt;GD_TOOL[R1012]-&gt;GD_MD[R1015];select any segment from instances of GD_LS where (selected.drawing);segment.setEnd_X(newValue:segment.End_X + (rcvd_evt.X / canvas.ZoomFacto...segment.setEnd_Y(newValue:segment.End_Y + (rcvd_evt.Y / canvas.ZoomFact...GRAPH::reDraw();", 1171, 869, true)&#13;
drawText(" 11. Tracking End Segment without Drawing", 819, 816, true)&#13;
drawline(818, 821, 937, 821)&#13;
drawText("entry/select one canvas related by self-&gt;GD_TOOL[R101...select any segment from instances of GD_LS wher...segment.setEnd_X(newValue:segment.End_X + (rc...segment.setEnd_Y(newValue:segment.End_Y + (r...", 819, 824, true)&#13;
drawText(" 12. Determining Subsequent Mouse Up Location Suitability", 1127, 598, true)&#13;
drawline(1125, 603, 1403, 603)&#13;
drawText("entry/select any segment from instances of GD_LS where (selected.drawing);select one canvas related by self-&gt;GD_TOOL[R1012]-&gt;GD_MD[R1011];select many elements related by canvas-&gt;GD_GE[R1007];isOverSymbol = false;if (self.endsWith == "symbol")  // Check only shapes  select many elements related by canvas-&gt;GD_GE[R1007]-&gt;GD_SHP[R1006]-&gt;GD_GE[R1006];  for each element in elements    if (element.isOver(x:rcvd_evt.X, y:rcvd_evt.Y))      select any conElem from instances of GD_GE where (selected.waitingForClientElement);      select one connector related by conElem -&gt;GD_CON[R1006];      relate connector to element across R1000;      generate GD_CNT8:'Complete' to self;      isOverSymbol = true;    end if;  end for;  if (not isOverSymbol)    // Waypoints are allowed, hence whitespace is OK    generate GD_CNT5:'Suitable Location'(X:rcvd_evt.X, Y:rcvd_evt.Y) to self;  end if;elif (self.endsWith == "white space")  for each element in elements    if (element.isOver(x:rcvd_evt.X, y:rcvd_evt.Y))      isOverSymbol = true;    end if;  end for;  if (isOverSymbol)     generate GD_CNT4:'Unsuitable Location' to self; else    generate GD_CNT8:Complete to self;  end if;end if;", 1127, 606, true)&#13;
drawText(" 13. Mouse up at Beginning of Segment", 973, 910, true)&#13;
drawline(972, 916, 1085, 916)&#13;
drawText("entry/", 973, 918, true)&#13;
drawText(" 8. Creating Subsequent Segment", 864, 622, true)&#13;
drawline(863, 628, 1076, 628)&#13;
drawText("entry/select one canvas related by self-&gt;GD_TOOL[R1012]-&gt;GD_MD[R1015];select any conElem from instances of GD_GE where (selected.waitingForClientElement);select one connector related by conElem -&gt;GD_CON[R1006];// Create subsequent line segmentcreate object instance segment of GD_LS;// GE_ID is an integer, so we must explicity allocate an id.select many segs from instances of GD_LS;segment.GE_ID = cardinality segs;// id allocatedrelate connector to segment across R1004;select any lastSegment related by connector-&gt;GD_LS[R1004] where (selected.drawing);lastSegment.setEnd_X(newValue:(rcvd_evt.X / canvas.ZoomFactor) + canvas.ScrollXPos);lastSegment.setEnd_Y(newValue:(rcvd_evt.Y / canvas.ZoomFactor) + canvas.ScrollYPos);relate segment to lastSegment across R1003.'follows';lastSegment.drawing = false;// Prepare segment for drawingsegment.drawing = true;segment.Start_X = lastSegment.End_X;segment.Start_Y = lastSegment.End_Y;segment.End_X = segment.Start_X;segment.End_Y = segment.Start_Y;", 864, 631, true)&#13;
drawText(" 14. Mouse Down Tracking End Segment without Drawing", 1171, 955, true)&#13;
drawline(1170, 960, 1328, 960)&#13;
drawText("entry/", 1171, 963, true)&#13;
drawText(" 15. Determining Mouse Up Location without Drawing", 804, 1009, true)&#13;
drawline(803, 1015, 1071, 1015)&#13;
drawText("entry/select any segment from instances of GD_LS where (selected.drawing);select one canvas related by self-&gt;GD_TOOL[R1012]-&gt;GD_MD[R1011];select many elements related by canvas-&gt;GD_GE[R1007];isOverSymbol = false;if (self.endsWith == "symbol")  // Check only shapes  select many elements related by canvas-&gt;GD_GE[R1007]-&gt;GD_SHP[R1006]-&gt;GD_GE[R1006];  for each element in elements    if (element.isOver(x:rcvd_evt.X, y:rcvd_evt.Y))      select any conElem from instances of GD_GE where (selected.waitingForClientElement);      select one connector related by conElem -&gt;GD_CON[R1006];      relate connector to element across R1000;      generate GD_CNT8:'Complete' to self;      isOverSymbol = true;    end if;  end for;  if (not isOverSymbol)    // If we get here, the mouse button was pressed and released without moving,    //  create a new segment by transitioning back to Creating Subsequent Segment    generate GD_CNT5:'Suitable Location'(X:rcvd_evt.X, Y:rcvd_evt.Y) to self;  end if;elif (self.endsWith == "white space")  for each element in elements    if (element.isOver(x:rcvd_evt.X, y:rcvd_evt.Y))      isOverSymbol = true;    end if;  end for;  if (not isOverSymbol)    generate GD_CNT8:Complete to self;  end if;end if;", 804, 1018, true)&#13;
drawText(" 16. Clearing Partly Drawn Connector", 303, 493, true)&#13;
drawline(302, 499, 465, 499)&#13;
drawText("entry/select many elements related by self-&gt;GD_TOOL[R1012]-&gt;GD_MD[R1...                                                where (selected.waitingForClientElem...for each element in elements  element.delete();end for;generate GD_CNT10:Done to self;", 303, 502, true)&#13;
drawText(" 17. Creating Segment without Mouse Move", 383, 707, true)&#13;
drawline(381, 712, 490, 712)&#13;
drawText("entry/generate GD_CNT4:'Unsuitable Location' to self;", 383, 715, true)&#13;
drawPolyline("585, 471, 585, 491)&#13;
drawText("GD_CNT1:", 0, 1, true)&#13;
drawText("Activate", 0, 7, true)&#13;
drawPolyline("587, 487, 585, 491, 583, 487)&#13;
drawPolyline("634, 491, 634, 471)&#13;
drawText("GD_CNT2:", 0, 1, true)&#13;
drawText("Deactivate", 0, 7, true)&#13;
drawPolyline("633, 474, 634, 471, 636, 474)&#13;
drawPolyline("585, 540, 585, 550)&#13;
drawText("GD_CNT3: Mouse", 0, 1, true)&#13;
drawText("Down(X, Y)", 0, 7, true)&#13;
drawPolyline("587, 546, 585, 550, 583, 546)&#13;
drawPolyline("634, 550, 634, 540)&#13;
drawText("GD_CNT4:", 0, 1, true)&#13;
drawText("Unsuitable Location", 0, 7, true)&#13;
drawPolyline("633, 544, 634, 540, 636, 544)&#13;
drawPolyline("1145, 515, 734, 515)&#13;
drawText("GD_CNT10:", 0, 1, true)&#13;
drawText("Done", 0, 7, true)&#13;
drawPolyline("737, 517, 734, 515, 737, 513)&#13;
drawPolyline("466, 520, 515, 520)&#13;
drawText("GD_CNT10:", 0, 1, true)&#13;
drawText("Done", 0, 7, true)&#13;
drawPolyline("512, 518, 515, 520, 512, 522)&#13;
drawPolyline("610, 724, 610, 739)&#13;
drawText("GD_CNT5: Suitable", 0, 1, true)&#13;
drawText("Location(X, Y)", 0, 7, true)&#13;
drawPolyline("611, 735, 610, 739, 608, 735)&#13;
drawPolyline("610, 917, 610, 937)&#13;
drawText("GD_CNT7: Mouse", 0, 1, true)&#13;
drawText("Move(X, Y)", 0, 7, true)&#13;
drawPolyline("611, 933, 610, 937, 608, 933)&#13;
drawPolyline("525, 843, 436, 843, 436, 773)&#13;
drawText("GD_CNT6: Mouse", 0, 1, true)&#13;
drawText("Up(X, Y)", 0, 7, true)&#13;
drawPolyline("434, 777, 436, 773, 438, 777)&#13;
drawPolyline("585, 987, 585, 1006)&#13;
drawText("GD_CNT6:", 0, 2, true)&#13;
drawText("Mouse Up(X, Y)", 0, 7, true)&#13;
drawPolyline("587, 1003, 585, 1006, 583, 1003)&#13;
drawPolyline("605, 987, 605, 1001, 664, 1001, 664, 987)&#13;
drawText("GD_CNT7:", 0, 1, true)&#13;
drawText("Mouse", 0, 7, true)&#13;
drawText("Move(X, Y)", 0, 13, true)&#13;
drawPolyline("662, 990, 664, 987, 666, 990)&#13;
drawPolyline("753, 1081, 763, 1081, 763, 555, 1145, 555)&#13;
drawText("GD_CNT8:", 0, 1, true)&#13;
drawText("Complete", 0, 7, true)&#13;
drawPolyline("1142, 553, 1145, 555, 1142, 557)&#13;
drawPolyline("753, 1175, 788, 1175, 788, 669, 863, 669)&#13;
drawText("GD_CNT5:", 0, 1, true)&#13;
drawText("Suitable", 0, 7, true)&#13;
drawText("Location(X,", 0, 13, true)&#13;
drawText("Y)", 0, 19, true)&#13;
drawPolyline("859, 667, 863, 669, 859, 671)&#13;
drawPolyline("486, 1091, 367, 1091, 367, 550)&#13;
drawText("GD_CNT4:", 0, 1, true)&#13;
drawText("Unsuitable Location", 0, 7, true)&#13;
drawPolyline("365, 554, 367, 550, 368, 554)&#13;
drawPolyline("1264, 595, 1264, 575)&#13;
drawText("GD_CNT8:", 0, 1, true)&#13;
drawText("Complete", 0, 7, true)&#13;
drawPolyline("1262, 579, 1264, 575, 1266, 579)&#13;
drawPolyline("1071, 1140, 1423, 1140, 1423, 515, 1354, 515)&#13;
drawText("GD_CNT8:", 0, 1, true)&#13;
drawText("Complete", 0, 7, true)&#13;
drawPolyline("1357, 517, 1354, 515, 1357, 513)&#13;
drawPolyline("1086, 843, 1111, 843, 1111, 887, 1170, 887)&#13;
drawText("GD_CNT7:", 0, 1, true)&#13;
drawText("Mouse", 0, 7, true)&#13;
drawText("Move(X, Y)", 0, 13, true)&#13;
drawPolyline("1166, 885, 1170, 887, 1166, 889)&#13;
drawPolyline("1051, 858, 1051, 907)&#13;
drawText("GD_CNT6:", 0, 1, true)&#13;
drawText("Mouse Up(X, Y)", 0, 7, true)&#13;
drawPolyline("1053, 903, 1051, 907, 1049, 903)&#13;
drawPolyline("1026, 758, 1026, 818)&#13;
drawText("GD_CNT3:", 0, 2, true)&#13;
drawText("Mouse", 0, 7, true)&#13;
drawText("Down(X, Y)", 0, 13, true)&#13;
drawPolyline("1028, 814, 1026, 818, 1024, 814)&#13;
drawPolyline("1001, 907, 1001, 858)&#13;
drawText("GD_CNT3:", 0, 1, true)&#13;
drawText("Mouse", 0, 7, true)&#13;
drawText("Down(X, Y)", 0, 13, true)&#13;
drawPolyline("1000, 861, 1001, 858, 1003, 861)&#13;
drawPolyline("1304, 907, 1304, 922, 1254, 922, 1254, 907)&#13;
drawText("GD_CNT7:", 0, 1, true)&#13;
drawText("Mouse", 0, 7, true)&#13;
drawText("Move(X, Y)", 0, 13, true)&#13;
drawPolyline("1253, 911, 1254, 907, 1256, 911)&#13;
drawPolyline("1264, 858, 1264, 798)&#13;
drawText("GD_CNT6: Mouse", 0, 1, true)&#13;
drawText("Up(X, Y)", 0, 7, true)&#13;
drawPolyline("1262, 802, 1264, 798, 1266, 802)&#13;
drawPolyline("1230, 952, 1230, 907)&#13;
drawText("GD_CNT7:", 0, 2, true)&#13;
drawText("Mouse", 0, 7, true)&#13;
drawText("Move(X, Y)", 0, 13, true)&#13;
drawPolyline("1228, 911, 1230, 907, 1231, 911)&#13;
drawPolyline("907, 813, 907, 793, 858, 793, 858, 813)&#13;
drawText("GD_CNT7:", 0, 1, true)&#13;
drawText("Mouse", 0, 7, true)&#13;
drawText("Move(X, Y)", 0, 13, true)&#13;
drawPolyline("859, 809, 858, 813, 856, 809)&#13;
drawPolyline("897, 877, 897, 977, 1170, 977)&#13;
drawText("GD_CNT3:", 0, 1, true)&#13;
drawText("Mouse", 0, 7, true)&#13;
drawText("Down(X, Y)", 0, 13, true)&#13;
drawPolyline("1166, 975, 1170, 977, 1166, 978)&#13;
drawPolyline("972, 932, 952, 932, 952, 843, 937, 843)&#13;
drawText("GD_CNT7:", 0, 1, true)&#13;
drawText("Mouse", 0, 7, true)&#13;
drawText("Move(X, Y)", 0, 13, true)&#13;
drawPolyline("941, 845, 937, 843, 941, 841)&#13;
drawPolyline("863, 719, 833, 719, 833, 813)&#13;
drawText("GD_CNT7:", 0, 1, true)&#13;
drawText("Mouse", 0, 7, true)&#13;
drawText("Move(X, Y)", 0, 13, true)&#13;
drawPolyline("835, 809, 833, 813, 831, 809)&#13;
drawPolyline("1125, 689, 1076, 689)&#13;
drawText("GD_CNT5:", 0, 1, true)&#13;
drawText("Suitable", 0, 7, true)&#13;
drawText("Location(X,", 0, 13, true)&#13;
drawText("Y)", 0, 19, true)&#13;
drawPolyline("1080, 691, 1076, 689, 1080, 687)&#13;
drawPolyline("813, 1006, 813, 699, 863, 699)&#13;
drawText("GD_CNT5:", 0, 1, true)&#13;
drawText("Suitable", 0, 7, true)&#13;
drawText("Location(X,", 0, 13, true)&#13;
drawText("Y)", 0, 19, true)&#13;
drawPolyline("859, 697, 863, 699, 859, 701)&#13;
drawPolyline("1230, 1016, 1230, 1086, 1071, 1086)&#13;
drawText("GD_CNT6: Mouse", 0, 1, true)&#13;
drawText("Up(X, Y)", 0, 7, true)&#13;
drawPolyline("1075, 1088, 1071, 1086, 1075, 1084)&#13;
drawPolyline("436, 704, 436, 550)&#13;
drawText("GD_CNT4:", 0, 1, true)&#13;
drawText("Unsuitable Location", 0, 7, true)&#13;
drawPolyline("434, 554, 436, 550, 438, 554)</actual>junit.framework.ComparisonFailure: Actual results differ from those expected, file: 
6291468-8
 expected:&lt;...ue)&#13;
drawText("Mouse[ Move(X,", 0, 7, true)&#13;
drawText("Y)", 0, 13, true)&#13;
drawPolyline("662, 990, 664, 987, 666, 990)&#13;
drawPolyline("753, 1081, 763, 1081, 763, 555, 1145, 555)&#13;
drawText("GD_CNT8:", 0, 1, true)&#13;
drawText("Complete", 0, 7, true)&#13;
drawPolyline("1142, 553, 1145, 555, 1142, 557)&#13;
drawPolyline("753, 1175, 788, 1175, 788, 669, 863, 669)&#13;
drawText("GD_CNT5:", 0, 1, true)&#13;
drawText("Suitable", 0, 7, true)&#13;
drawText("Location(X,", 0, 13, true)&#13;
drawText("Y)", 0, 19, true)&#13;
drawPolyline("859, 667, 863, 669, 859, 671)&#13;
drawPolyline("486, 1091, 367, 1091, 367, 550)&#13;
drawText("GD_CNT4:", 0, 1, true)&#13;
drawText("Unsuitable Location", 0, 7, true)&#13;
drawPolyline("365, 554, 367, 550, 368, 554)&#13;
drawPolyline("1264, 595, 1264, 575)&#13;
drawText("GD_CNT8:", 0, 1, true)&#13;
drawText("Complete", 0, 7, true)&#13;
drawPolyline("1262, 579, 1264, 575, 1266, 579)&#13;
drawPolyline("1071, 1140, 1423, 1140, 1423, 515, 1354, 515)&#13;
drawText("GD_CNT8:", 0, 1, true)&#13;
drawText("Complete", 0, 7, true)&#13;
drawPolyline("1357, 517, 1354, 515, 1357, 513)&#13;
drawPolyline("1086, 843, 1111, 843, 1111, 887, 1170, 887)&#13;
drawText("GD_CNT7:", 0, 1, true)&#13;
drawText("Mouse Move(X,", 0, 7, true)&#13;
drawText("Y)", 0, 13, true)&#13;
drawPolyline("1166, 885, 1170, 887, 1166, 889)&#13;
drawPolyline("1051, 858, 1051, 907)&#13;
drawText("GD_CNT6:", 0, 1, true)&#13;
drawText("Mouse Up(X, Y)", 0, 7, true)&#13;
drawPolyline("1053, 903, 1051, 907, 1049, 903)&#13;
drawPolyline("1026, 758, 1026, 818)&#13;
drawText("GD_CNT3:", 0, 2, true)&#13;
drawText("Mouse Down(X,", 0, 7, true)&#13;
drawText("Y)", 0, 13, true)&#13;
drawPolyline("1028, 814, 1026, 818, 1024, 814)&#13;
drawPolyline("1001, 907, 1001, 858)&#13;
drawText("GD_CNT3:", 0, 1, true)&#13;
drawText("Mouse Down(X,", 0, 7, true)&#13;
drawText("Y)", 0, 13, true)&#13;
drawPolyline("1000, 861, 1001, 858, 1003, 861)&#13;
drawPolyline("1304, 907, 1304, 922, 1254, 922, 1254, 907)&#13;
drawText("GD_CNT7:", 0, 1, true)&#13;
drawText("Mouse Move(X,", 0, 7, true)&#13;
drawText("Y)", 0, 13, true)&#13;
drawPolyline("1253, 911, 1254, 907, 1256, 911)&#13;
drawPolyline("1264, 858, 1264, 798)&#13;
drawText("GD_CNT6: Mouse", 0, 1, true)&#13;
drawText("Up(X, Y)", 0, 7, true)&#13;
drawPolyline("1262, 802, 1264, 798, 1266, 802)&#13;
drawPolyline("1230, 952, 1230, 907)&#13;
drawText("GD_CNT7:", 0, 2, true)&#13;
drawText("Mouse Move(X,", 0, 7, true)&#13;
drawText("Y)", 0, 13, true)&#13;
drawPolyline("1228, 911, 1230, 907, 1231, 911)&#13;
drawPolyline("907, 813, 907, 793, 858, 793, 858, 813)&#13;
drawText("GD_CNT7:", 0, 1, true)&#13;
drawText("Mouse Move(X,", 0, 7, true)&#13;
drawText("Y)", 0, 13, true)&#13;
drawPolyline("859, 809, 858, 813, 856, 809)&#13;
drawPolyline("897, 877, 897, 977, 1170, 977)&#13;
drawText("GD_CNT3:", 0, 1, true)&#13;
drawText("Mouse Down(X,", 0, 7, true)&#13;
drawText("Y)", 0, 13, true)&#13;
drawPolyline("1166, 975, 1170, 977, 1166, 978)&#13;
drawPolyline("972, 932, 952, 932, 952, 843, 937, 843)&#13;
drawText("GD_CNT7:", 0, 1, true)&#13;
drawText("Mouse Move(X,", 0, 7, true)&#13;
drawText("Y)", 0, 13, true)&#13;
drawPolyline("941, 845, 937, 843, 941, 841)&#13;
drawPolyline("863, 719, 833, 719, 833, 813)&#13;
drawText("GD_CNT7:", 0, 1, true)&#13;
drawText("Mouse Move(X,", 0, 7, true)&#13;
drawText("]Y)", 0, 13, true)&#13;
d...&gt; but was:&lt;...ue)&#13;
drawText("Mouse[", 0, 7, true)&#13;
drawText("Move(X, Y)", 0, 13, true)&#13;
drawPolyline("662, 990, 664, 987, 666, 990)&#13;
drawPolyline("753, 1081, 763, 1081, 763, 555, 1145, 555)&#13;
drawText("GD_CNT8:", 0, 1, true)&#13;
drawText("Complete", 0, 7, true)&#13;
drawPolyline("1142, 553, 1145, 555, 1142, 557)&#13;
drawPolyline("753, 1175, 788, 1175, 788, 669, 863, 669)&#13;
drawText("GD_CNT5:", 0, 1, true)&#13;
drawText("Suitable", 0, 7, true)&#13;
drawText("Location(X,", 0, 13, true)&#13;
drawText("Y)", 0, 19, true)&#13;
drawPolyline("859, 667, 863, 669, 859, 671)&#13;
drawPolyline("486, 1091, 367, 1091, 367, 550)&#13;
drawText("GD_CNT4:", 0, 1, true)&#13;
drawText("Unsuitable Location", 0, 7, true)&#13;
drawPolyline("365, 554, 367, 550, 368, 554)&#13;
drawPolyline("1264, 595, 1264, 575)&#13;
drawText("GD_CNT8:", 0, 1, true)&#13;
drawText("Complete", 0, 7, true)&#13;
drawPolyline("1262, 579, 1264, 575, 1266, 579)&#13;
drawPolyline("1071, 1140, 1423, 1140, 1423, 515, 1354, 515)&#13;
drawText("GD_CNT8:", 0, 1, true)&#13;
drawText("Complete", 0, 7, true)&#13;
drawPolyline("1357, 517, 1354, 515, 1357, 513)&#13;
drawPolyline("1086, 843, 1111, 843, 1111, 887, 1170, 887)&#13;
drawText("GD_CNT7:", 0, 1, true)&#13;
drawText("Mouse", 0, 7, true)&#13;
drawText("Move(X, Y)", 0, 13, true)&#13;
drawPolyline("1166, 885, 1170, 887, 1166, 889)&#13;
drawPolyline("1051, 858, 1051, 907)&#13;
drawText("GD_CNT6:", 0, 1, true)&#13;
drawText("Mouse Up(X, Y)", 0, 7, true)&#13;
drawPolyline("1053, 903, 1051, 907, 1049, 903)&#13;
drawPolyline("1026, 758, 1026, 818)&#13;
drawText("GD_CNT3:", 0, 2, true)&#13;
drawText("Mouse", 0, 7, true)&#13;
drawText("Down(X, Y)", 0, 13, true)&#13;
drawPolyline("1028, 814, 1026, 818, 1024, 814)&#13;
drawPolyline("1001, 907, 1001, 858)&#13;
drawText("GD_CNT3:", 0, 1, true)&#13;
drawText("Mouse", 0, 7, true)&#13;
drawText("Down(X, Y)", 0, 13, true)&#13;
drawPolyline("1000, 861, 1001, 858, 1003, 861)&#13;
drawPolyline("1304, 907, 1304, 922, 1254, 922, 1254, 907)&#13;
drawText("GD_CNT7:", 0, 1, true)&#13;
drawText("Mouse", 0, 7, true)&#13;
drawText("Move(X, Y)", 0, 13, true)&#13;
drawPolyline("1253, 911, 1254, 907, 1256, 911)&#13;
drawPolyline("1264, 858, 1264, 798)&#13;
drawText("GD_CNT6: Mouse", 0, 1, true)&#13;
drawText("Up(X, Y)", 0, 7, true)&#13;
drawPolyline("1262, 802, 1264, 798, 1266, 802)&#13;
drawPolyline("1230, 952, 1230, 907)&#13;
drawText("GD_CNT7:", 0, 2, true)&#13;
drawText("Mouse", 0, 7, true)&#13;
drawText("Move(X, Y)", 0, 13, true)&#13;
drawPolyline("1228, 911, 1230, 907, 1231, 911)&#13;
drawPolyline("907, 813, 907, 793, 858, 793, 858, 813)&#13;
drawText("GD_CNT7:", 0, 1, true)&#13;
drawText("Mouse", 0, 7, true)&#13;
drawText("Move(X, Y)", 0, 13, true)&#13;
drawPolyline("859, 809, 858, 813, 856, 809)&#13;
drawPolyline("897, 877, 897, 977, 1170, 977)&#13;
drawText("GD_CNT3:", 0, 1, true)&#13;
drawText("Mouse", 0, 7, true)&#13;
drawText("Down(X, Y)", 0, 13, true)&#13;
drawPolyline("1166, 975, 1170, 977, 1166, 978)&#13;
drawPolyline("972, 932, 952, 932, 952, 843, 937, 843)&#13;
drawText("GD_CNT7:", 0, 1, true)&#13;
drawText("Mouse", 0, 7, true)&#13;
drawText("Move(X, Y)", 0, 13, true)&#13;
drawPolyline("941, 845, 937, 843, 941, 841)&#13;
drawPolyline("863, 719, 833, 719, 833, 813)&#13;
drawText("GD_CNT7:", 0, 1, true)&#13;
drawText("Mouse", 0, 7, true)&#13;
drawText("Move(X, ]Y)", 0, 13, true)&#13;
d...&gt;&#13;
	at junit.framework.Assert.assertEquals(Assert.java:81)&#13;
	at com.mentor.nucleus.bp.ui.canvas.test.CanvasTest.doTestDiagram(CanvasTest.java:154)&#13;
	at com.mentor.nucleus.bp.ui.canvas.test.OOAofOOATest.testOOAofOOAConnectorToolStateChart(OOAofOOATest.java:153)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at junit.framework.TestCase.runTest(TestCase.java:168)&#13;
	at junit.framework.TestCase.runBare(TestCase.java:134)&#13;
	at junit.framework.TestResult$1.protect(TestResult.java:110)&#13;
	at junit.framework.TestResult.runProtected(TestResult.java:128)&#13;
	at junit.framework.TestResult.run(TestResult.java:113)&#13;
	at junit.framework.TestCase.run(TestCase.java:124)&#13;
	at junit.framework.TestSuite.runTest(TestSuite.java:243)&#13;
	at junit.framework.TestSuite.run(TestSuite.java:238)&#13;
	at junit.framework.TestSuite.runTest(TestSuite.java:243)&#13;
	at junit.framework.TestSuite.run(TestSuite.java:238)&#13;
	at org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run(JUnit3TestReference.java:130)&#13;
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)&#13;
	at org.eclipse.pde.internal.junit.runtime.RemotePluginTestRunner.main(RemotePluginTestRunner.java:62)&#13;
	at org.eclipse.pde.internal.junit.runtime.PlatformUITestHarness$1.run(PlatformUITestHarness.java:47)&#13;
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)&#13;
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:135)&#13;
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4140)&#13;
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3757)&#13;
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2701)&#13;
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2665)&#13;
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2499)&#13;
	at org.eclipse.ui.internal.Workbench$7.run(Workbench.java:679)&#13;
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)&#13;
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:668)&#13;
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)&#13;
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:123)&#13;
	at org.eclipse.pde.internal.junit.runtime.NonUIThreadTestApplication.runApp(NonUIThreadTestApplication.java:54)&#13;
	at org.eclipse.pde.internal.junit.runtime.UITestApplication.runApp(UITestApplication.java:41)&#13;
	at org.eclipse.pde.internal.junit.runtime.NonUIThreadTestApplication.start(NonUIThreadTestApplication.java:48)&#13;
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:196)&#13;
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)&#13;
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)&#13;
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:344)&#13;
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:622)&#13;
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:577)&#13;
	at org.eclipse.equinox.launcher.Main.run(Main.java:1410)&#13;
	at org.eclipse.equinox.launcher.Main.main(Main.java:1386)&#13;
&#13;
</failure>
      </testcase>
      <testcase name="testOOAofOOAModelStateChart" classname="com.mentor.nucleus.bp.ui.canvas.test.OOAofOOATest" time="2.84">
        <failure>
          <expected>drawText(" 9. Checking Mouse Press", 669, 593, true)&#13;
drawline(668, 597, 790, 597)&#13;
drawText("entry/select many symbols related by self-&gt;GD_GE[R1007];symbol_found=false;for each symbol in symbols  if (symbol.isOver(x:rcvd_evt.X, y:rcvd_evt.Y))    symbol_found=true;    if (symbol.isSelected())      generate GD_MD12:'Mouse Press over Selected Symbol'(X:rcvd_...    else      generate  GD_MD9:'Mouse Press over Symbol'(X:rcvd_evt.X, Y:r...    end if;  end if ;end for;if (symbol_found == false)    generate  GD_MD10:'Mouse Press over Whitespace'(X:rcvd_evt.X, ...end if;", 669, 600, true)&#13;
drawText(" 2. Toggling Symbol Selection", 408, 697, true)&#13;
drawline(407, 701, 487, 701)&#13;
drawText("entry/select many symbols related by self-&gt;GD_G...for each symbol in symbols  if (symbol.isOver(x:rcvd_evt.X, y:rcvd_evt...    symbol.toggleSelect() ;  end if;end for;", 408, 704, true)&#13;
drawText(" 3. Preparing Rubber Rectangle", 553, 697, true)&#13;
drawline(552, 701, 629, 701)&#13;
drawText("entry/self.RRectX = rcvd_evt.X;self.RRectY = rcvd_evt.Y;self.RRectW =0 ;self.RRectH = 0 ;", 553, 704, true)&#13;
drawText(" 4. Unselecting Symbols", 657, 728, true)&#13;
drawline(656, 732, 737, 732)&#13;
drawText("entry/self.unSelectAll();generate GD_MD11:'Symbols Deselected'(X:...", 657, 734, true)&#13;
drawText(" 5. Selecting Single Symbol", 749, 728, true)&#13;
drawline(748, 732, 836, 732)&#13;
drawText("entry/self.unSelectAll() ;select many symbols related by self-&gt;GD_GE[R1...for each symbol in symbols  if (symbol.isOver(x:rcvd_evt.X, y:rcvd_evt.Y))    symbol.toggleSelect() ;  end if;end for;", 749, 734, true)&#13;
drawText(" 6. Dragging Rubber Rectangle", 553, 770, true)&#13;
drawline(552, 774, 629, 774)&#13;
drawText("entry/self.RRectW = self.RRectW + rcvd_evt.X;self.RRectH = self.RRectH + rcvd_evt.Y;self.drawingRRect = true ;", 553, 777, true)&#13;
drawText(" 7. Dragging Symbols", 715, 855, true)&#13;
drawline(714, 858, 836, 858)&#13;
drawText("entry/select many symbols related by self-&gt;GD_GE[R1007];for each symbol in symbols  if (symbol.isSelected())    symbol.move(xDelta:rcvd_evt.X, yDelta:rcvd_evt.Y);  end if ;end for ;self.draggingSymbols = true;", 715, 861, true)&#13;
drawText(" 8. Toggling Symbols Caught By Rubber Rectangle", 480, 828, true)&#13;
drawline(480, 832, 629, 832)&#13;
drawText("entry/// Allow for selection rectangle to be drawn backwardsif (self.RRectW &lt; 0)  self.RRectW = - self.RRectW;  self.RRectX = self.RRectX - self.RRectW;end if; if (self.RRectH &lt; 0)  self.RRectH = - self.RRectH;  self.RRectY = self.RRectY - self.RRectH;end if; select many symbols related by self-&gt;GD_GE[R1007];for each symbol in symbols  if (symbol.isInside(x:self.RRectX, y:self.RRectY, w:self.RRectW, h:self.RRectH))    symbol.toggleSelect();  end if;end for;self.drawingRRect = false;generate GD_MD6:Done() to self ;", 480, 834, true)&#13;
drawText(" 1. Idle", 565, 540, true)&#13;
drawline(564, 544, 694, 544)&#13;
drawText("entry/GRAPH::setMouseCursor(type:"default");self.draggingSymbols = false;", 565, 546, true)&#13;
drawText(" 10. Checking Shifted Mouse Press", 438, 590, true)&#13;
drawline(437, 594, 610, 594)&#13;
drawText("entry/select many symbols related by self-&gt;GD_GE[R1007];symbol_found = false;for each symbol in symbols  if (symbol.isOver(x:rcvd_evt.X, y:rcvd_evt.Y))    symbol_found = true;    generate GD_MD7:'Shifted Mouse Press over Symbol'( X:rcvd_evt.X, Y:rcvd_evt.Y) to self ;  end if ;end for;if (symbol_found == false)  generate GD_MD8:'Shifted Mouse Press over Whitespace'(X:rcvd_evt.X, Y:rcvd_evt.Y) to self ;end if;", 438, 596, true)&#13;
drawText(" 11. Picking Up Selected Symbols", 699, 801, true)&#13;
drawline(698, 805, 763, 805)&#13;
drawText("entry/// Do nothing", 699, 807, true)&#13;
drawText(" 12. Opening Context Menu", 918, 601, true)&#13;
drawline(917, 605, 1017, 605)&#13;
drawText("entry/onWhitespace = true;select many symbols related by self-&gt;GD_GE[R1007];for each symbol in symbols  // If the symbol we're over is unselected, clear other   // selections and select it, otherwise leave the selection   // as it is.  if (symbol.isOver(x:rcvd_evt.X, y:rcvd_evt.Y))    if (NOT symbol.isSelected())      self.unSelectAll() ;      symbol.toggleSelect() ;    end if;   onWhitespace = false;  end if;end for;if (onWhitespace)  self.unSelectAll();  CLIENT::addToSelection(element:self.represents);end if;", 918, 608, true)&#13;
drawText(" 13. Ready to Slide Canvas", 730, 444, true)&#13;
drawline(729, 448, 817, 448)&#13;
drawText("entry/GRAPH::setMouseCursor(type:"open hand");self.slidingCanvas = false;", 730, 450, true)&#13;
drawText(" 14. Sliding Canvas", 880, 444, true)&#13;
drawline(879, 448, 990, 448)&#13;
drawText("entry/GRAPH::setMouseCursor(type:"closed hand");self.slidingCanvas = true;", 880, 450, true)&#13;
drawText(" 15. Awaiting Mouse Release", 880, 501, true)&#13;
drawline(879, 505, 990, 505)&#13;
drawText("entry/GRAPH::setMouseCursor(type:"default");self.slidingCanvas = false;", 880, 508, true)&#13;
drawText(" 16. Tool Active", 423, 482, true)&#13;
drawline(422, 486, 514, 486)&#13;
drawText("entry/", 423, 489, true)&#13;
drawText(" 17. Delegating Mouse Press", 423, 409, true)&#13;
drawline(422, 413, 514, 413)&#13;
drawText("entry/select one tool related by self-&gt;GD_TOOL[R1015];if (not_empty tool)  generate GD_TOOL1:'Mouse Down'(X:rcvd_evt.X,...end if;", 423, 416, true)&#13;
drawText(" 18. Delegating Mouse Move", 300, 436, true)&#13;
drawline(299, 440, 387, 440)&#13;
drawText("entry/select one tool related by self-&gt;GD_TOOL[R101...if (not_empty tool)  generate GD_TOOL4:'Mouse Move'(X:rcvd_evt....end if;", 300, 442, true)&#13;
drawText(" 19. Delegating Mouse Release", 281, 528, true)&#13;
drawline(280, 532, 387, 532)&#13;
drawText("entry/select one tool related by self-&gt;GD_TOOL[R1015];if (not_empty tool)  generate GD_TOOL3:'Mouse Up'(X:rcvd_evt.X, Y:rcvd_evt...end if;", 281, 535, true)&#13;
drawText(" 21. Releasing Mouse", 807, 578, true)&#13;
drawline(806, 582, 906, 582)&#13;
drawText("entry/generate GD_MD6:Done to self;", 807, 585, true)&#13;
drawText(" 22. Resting while Sliding Canvas", 803, 497, true)&#13;
drawline(802, 501, 863, 501)&#13;
drawText("entry/generate GD_MD6:Done to self;", 803, 504, true)&#13;
drawText(" 23. Checking for Hotspots", 561, 267, true)&#13;
drawline(560, 271, 687, 271)&#13;
drawText("entry/// Check all symbols and vertices to see if we're over a cornerselect many symbols related by self-&gt;GD_GE[R1007];onHotspot = false;for each symbol in symbols  if(symbol.isSelected() AND      symbol.isOverVertex(x:GRAPH::getAbsoluteXPosition(),                                        y:GRAPH::getAbsoluteYPosition()))    select one shp related by symbol-&gt;GD_SHP[R1006];    if (not_empty shp)      if (shp.isOverNWSE(x:GRAPH::getAbsoluteXPosition(), y:GRAPH::...        GRAPH::setMouseCursor(type:"nwse");      else        GRAPH::setMouseCursor(type:"nesw");      end if;    end if;    onHotspot = true;  end if;end for;select many segs related by symbols-&gt;GD_CON[R1006]-&gt;GD_LS[R10...for each seg in segs  if (seg.isSelected() AND     seg.isOverVertex(x:GRAPH::getAbsoluteXPosition(),                                        y:GRAPH::getAbsoluteYPosition()))     GRAPH::setMouseCursor(type:"waypoint tool");    onHotspot = true;    end if;end for;if (onHotspot)  generate GD_MD19:'Mouse Moved over Hotspot'                                     (X:GRAPH::getAbsoluteXPosition(),                                      Y:GRAPH::getAbsoluteYPosition()) to self;else  generate GD_MD18:'Mouse Moved over Whitespace' to self;end if;", 561, 274, true)&#13;
drawText(" 25. Waiting for Mouse Press over Hotspot", 734, 325, true)&#13;
drawline(733, 329, 836, 329)&#13;
drawText("entry/// If a symbol is being resized, unrelate the canvas from itselect one symbol related by self-&gt;GD_GE[R1017];if (not_empty symbol)  select one resize related by self-&gt;GD_ELR[R1017];  unrelate self from symbol across R1017 using resize;  delete object instance resize;end if;// If a line segment is being flexed, unrelate the canvasselect many flexes related by self-&gt;GD_ELF[R1018];for each flex in flexes  select one seg related by flex-&gt;GD_LS[R1018];  unrelate self from seg across R1018 using flex;  delete object instance flex;end for;", 734, 331, true)&#13;
drawText(" 26. Moving Hotspot", 880, 263, true)&#13;
drawline(879, 267, 1036, 267)&#13;
drawText("entry/// Move the relevant vertexselect one symbol related by self-&gt;GD_GE[R1017];if (not_empty symbol)  select one resize related by self-&gt;GD_ELR[R1017];  select one shp related by symbol-&gt;GD_SHP[R1006];  if (not_empty shp)    if (resize.Vertex == Vertex_type::NW)      shp.NW_X = GRAPH::scale(value:GRAPH::getAbsoluteXPosition()) + self.ScrollXPos;      shp.NW_Y = GRAPH::scale(value:GRAPH::getAbsoluteYPosition()) + self.ScrollYPos;    end if;    if (resize.Vertex == Vertex_type::SE)      shp.SE_X = GRAPH::scale(value:GRAPH::getAbsoluteXPosition()) + self.ScrollXPos;      shp.SE_Y = GRAPH::scale(value:GRAPH::getAbsoluteYPosition()) + self.ScrollYPos;    end if;    if (resize.Vertex == Vertex_type::NE)      shp.SE_X = GRAPH::scale(value:GRAPH::getAbsoluteXPosition()) + self.ScrollXPos;      shp.NW_Y = GRAPH::scale(value:GRAPH::getAbsoluteYPosition()) + self.ScrollYPos;    end if;    if (resize.Vertex == Vertex_type::SW)      shp.NW_X = GRAPH::scale(value:GRAPH::getAbsoluteXPosition()) + self.ScrollXPos;      shp.SE_Y = GRAPH::scale(value:GRAPH::getAbsoluteYPosition()) + self.ScrollYPos;    end if;  end if;end if;select many flexes related by self-&gt;GD_ELF[R1018];for each flex in flexes  select one seg related by flex-&gt;GD_LS[R1018];  if (flex.Vertex == Vertex_type::Start)      seg.Start_X = GRAPH::scale(value:GRAPH::getAbsoluteXPosition()) + self.ScrollXPos;      seg.Start_Y = GRAPH::scale(value:GRAPH::getAbsoluteYPosition()) + self.ScrollYPos;  elif (flex.Vertex == Vertex_type::End)      seg.End_X = GRAPH::scale(value:GRAPH::getAbsoluteXPosition()) + self.ScrollXPos;      seg.End_Y = GRAPH::scale(value:GRAPH::getAbsoluteYPosition()) + self.ScrollYPos;  end if;end for;GRAPH::reDraw();", 880, 270, true)&#13;
drawText(" 27. Waiting to Move Hotspot", 699, 117, true)&#13;
drawline(698, 121, 867, 121)&#13;
drawText("entry/// Find the relevant symbol and relate the canvas to the symbolselect many symbols related by self-&gt;GD_GE[R1007];for each symbol in symbols  if (symbol.isSelected() AND      symbol.isOverVertex(x:GRAPH::getAbsoluteXPosition(),                                         y:GRAPH::getAbsoluteYPosition()))    create object instance resize of GD_ELR;    relate self to symbol across R1017 using resize;    select one shp related by symbol-&gt;GD_SHP[R1006];    if (not_empty shp)      if (shp.isOverNW(x:GRAPH::getAbsoluteXPosition(), y:GRAPH::getAbsoluteYPosition()))        resize.Vertex = Vertex_type::NW;      end if;      if (shp.isOverSE(x:GRAPH::getAbsoluteXPosition(), y:GRAPH::getAbsoluteYPosition()))        resize.Vertex = Vertex_type::SE;      end if;      if (shp.isOverNE(x:GRAPH::getAbsoluteXPosition(), y:GRAPH::getAbsoluteYPosition()))        resize.Vertex = Vertex_type::NE;      end if;      if (shp.isOverSW(x:GRAPH::getAbsoluteXPosition(), y:GRAPH::getAbsoluteYPosition()))        resize.Vertex = Vertex_type::SW;      end if;    end if;  end if;end for;select many segs related by symbols-&gt;GD_CON[R1006]-&gt;GD_LS[R1004];for each seg in segs  if (seg.isSelected() AND seg.isOverVertex(x:GRAPH::getAbsoluteXPosition(),                                        y:GRAPH::getAbsoluteYPosition()))    create object instance flex of GD_ELF;    relate self to seg across R1018 using flex;    if (seg.isOverStart(x:GRAPH::getAbsoluteXPosition(), y:GRAPH::getAbsoluteYPosition()))      flex.Vertex = Vertex_type::Start;    end if;    if (seg.isOverEnd(x:GRAPH::getAbsoluteXPosition(), y:GRAPH::getAbsoluteYPosition()))      flex.Vertex = Vertex_type::End;    end if;  end if;end for;", 699, 124, true)&#13;
drawPolyline("714, 691, 714, 725)&#13;
drawText("GD_MD10: Mouse", 0, 2, true)&#13;
drawText("Press over", 0, 6, true)&#13;
drawText("Whitespace(X, Y)", 0, 11, true)&#13;
drawPolyline("715, 722, 714, 725, 712, 722)&#13;
drawPolyline("791, 637, 802, 637, 802, 725)&#13;
drawText("GD_MD9: Mouse", 0, 2, true)&#13;
drawText("Press over Symbol", 0, 6, true)&#13;
drawText("(X, Y)", 0, 11, true)&#13;
drawPolyline("804, 722, 802, 725, 801, 722)&#13;
drawPolyline("744, 691, 744, 798)&#13;
drawText("GD_MD12:", 0, 1, true)&#13;
drawText("Mouse Press", 0, 6, true)&#13;
drawText("over Selected", 0, 10, true)&#13;
drawText("Symbol(X, Y)", 0, 15, true)&#13;
drawPolyline("746, 795, 744, 798, 743, 795)&#13;
drawPolyline("679, 572, 679, 591)&#13;
drawText("GD_MD2: Mouse", 0, 2, true)&#13;
drawText("Pressed(X, Y)", 0, 6, true)&#13;
drawPolyline("681, 588, 679, 591, 678, 588)&#13;
drawPolyline("449, 744, 449, 921, 779, 921, 779, 898)&#13;
drawText("GD_MD4: Mouse", 0, 1, true)&#13;
drawText("Moved(X, Y)", 0, 5, true)&#13;
drawPolyline("778, 901, 779, 898, 780, 901)&#13;
drawPolyline("418, 744, 418, 936, 879, 936, 879, 599)&#13;
drawText("GD_MD3:", 0, 2, true)&#13;
drawText("Mouse", 0, 6, true)&#13;
drawText("Released", 0, 11, true)&#13;
drawText("(X, Y)", 0, 15, true)&#13;
drawPolyline("877, 601, 879, 599, 880, 601)&#13;
drawPolyline("506, 656, 506, 725, 487, 725)&#13;
drawText("GD_MD7:", 0, 1, true)&#13;
drawText("Shifted Mouse", 0, 6, true)&#13;
drawText("Press over", 0, 10, true)&#13;
drawText("Symbol(X, Y)", 0, 15, true)&#13;
drawPolyline("490, 727, 487, 725, 490, 724)&#13;
drawPolyline("587, 737, 587, 768)&#13;
drawText("GD_MD4:", 0, 2, true)&#13;
drawText("Mouse", 0, 6, true)&#13;
drawText("Moved(X,", 0, 11, true)&#13;
drawText("Y)", 0, 15, true)&#13;
drawPolyline("588, 765, 587, 768, 586, 765)&#13;
drawPolyline("629, 706, 817, 706, 817, 599)&#13;
drawText("GD_MD3:", 0, 2, true)&#13;
drawText("Mouse", 0, 6, true)&#13;
drawText("Released", 0, 11, true)&#13;
drawText("(X, Y)", 0, 15, true)&#13;
drawPolyline("816, 601, 817, 599, 819, 601)&#13;
drawPolyline("675, 725, 675, 718, 629, 718)&#13;
drawText("GD_MD11:", 0, 2, true)&#13;
drawText("Symbols", 0, 6, true)&#13;
drawText("Deselected", 0, 11, true)&#13;
drawText("(X, Y)", 0, 16, true)&#13;
drawPolyline("632, 719, 629, 718, 632, 716)&#13;
drawPolyline("583, 656, 583, 695)&#13;
drawText("GD_MD8: Shifted", 0, 1, true)&#13;
drawText("Mouse Press over", 0, 6, true)&#13;
drawText("Whitespace(X, Y)", 0, 10, true)&#13;
drawPolyline("585, 692, 583, 695, 582, 692)&#13;
drawPolyline("779, 771, 779, 852)&#13;
drawText("GD_MD4: Mouse", 0, 1, true)&#13;
drawText("Moved(X, Y)", 0, 6, true)&#13;
drawPolyline("780, 849, 779, 852, 778, 849)&#13;
drawPolyline("829, 725, 829, 599)&#13;
drawText("GD_MD3:", 0, 2, true)&#13;
drawText("Mouse", 0, 6, true)&#13;
drawText("Released", 0, 11, true)&#13;
drawText("(X, Y)", 0, 15, true)&#13;
drawPolyline("828, 601, 829, 599, 830, 601)&#13;
drawPolyline("587, 810, 587, 825)&#13;
drawText("GD_MD3: Mouse", 0, 1, true)&#13;
drawText("Released(X, Y)", 0, 6, true)&#13;
drawPolyline("588, 822, 587, 825, 586, 822)&#13;
drawPolyline("552, 779, 533, 779, 533, 798, 552, 798)&#13;
drawText("GD_MD4:", 0, 1, true)&#13;
drawText("Mouse", 0, 6, true)&#13;
drawText("Moved(X,", 0, 11, true)&#13;
drawText("Y)", 0, 15, true)&#13;
drawPolyline("550, 797, 552, 798, 550, 800)&#13;
drawPolyline("714, 864, 679, 864, 679, 887, 714, 887)&#13;
drawText("GD_MD4: Mouse", 0, 2, true)&#13;
drawText("Moved(X, Y)", 0, 6, true)&#13;
drawPolyline("711, 885, 714, 887, 711, 888)&#13;
drawPolyline("837, 875, 864, 875, 864, 599)&#13;
drawText("GD_MD3:", 0, 2, true)&#13;
drawText("Mouse", 0, 6, true)&#13;
drawText("Released", 0, 11, true)&#13;
drawText("(X, Y)", 0, 15, true)&#13;
drawPolyline("862, 601, 864, 599, 865, 601)&#13;
drawPolyline("744, 833, 744, 852)&#13;
drawText("GD_MD4:", 0, 2, true)&#13;
drawText("Mouse Moved", 0, 6, true)&#13;
drawText("(X, Y)", 0, 11, true)&#13;
drawPolyline("746, 849, 744, 852, 743, 849)&#13;
drawPolyline("629, 856, 645, 856, 645, 572)&#13;
drawText("GD_MD6:", 0, 2, true)&#13;
drawText("Done", 0, 6, true)&#13;
drawPolyline("643, 575, 645, 572, 646, 575)&#13;
drawPolyline("587, 572, 587, 587)&#13;
drawText("GD_MD5: Shift Mouse", 0, 1, true)&#13;
drawText("Pressed(X, Y)", 0, 6, true)&#13;
drawPolyline("588, 584, 587, 587, 586, 584)&#13;
drawPolyline("695, 541, 952, 541, 952, 599)&#13;
drawText("GD_MD13:", 0, 1, true)&#13;
drawText("Mouse", 0, 6, true)&#13;
drawText("Context", 0, 10, true)&#13;
drawText("Press(X, Y)", 0, 15, true)&#13;
drawPolyline("953, 596, 952, 599, 950, 596)&#13;
drawPolyline("672, 537, 672, 453, 729, 453)&#13;
drawText("GD_MD14: Space", 0, 1, true)&#13;
drawText("Pressed", 0, 6, true)&#13;
drawPolyline("726, 451, 729, 453, 726, 454)&#13;
drawPolyline("572, 537, 572, 518, 514, 518)&#13;
drawText("GD_MD16: Tool", 0, 1, true)&#13;
drawText("Activated", 0, 6, true)&#13;
drawPolyline("517, 519, 514, 518, 517, 516)&#13;
drawPolyline("618, 537, 618, 433)&#13;
drawText("GD_MD4:", 0, 1, true)&#13;
drawText("Mouse Moved", 0, 5, true)&#13;
drawText("(X, Y)", 0, 10, true)&#13;
drawPolyline("616, 436, 618, 433, 619, 436)&#13;
drawPolyline("729, 468, 683, 468, 683, 537)&#13;
drawText("GD_MD15:", 0, 2, true)&#13;
drawText("Space", 0, 6, true)&#13;
drawText("Released", 0, 11, true)&#13;
drawPolyline("684, 534, 683, 537, 682, 534)&#13;
drawPolyline("514, 506, 583, 506, 583, 537)&#13;
drawText("GD_MD17: Tool", 0, 1, true)&#13;
drawText("Deactivated", 0, 5, true)&#13;
drawPolyline("585, 534, 583, 537, 582, 534)&#13;
drawPolyline("387, 545, 564, 545)&#13;
drawText("GD_MD17: Tool", 0, 2, true)&#13;
drawText("Deactivated", 0, 6, true)&#13;
drawPolyline("561, 543, 564, 545, 561, 546)&#13;
drawPolyline("514, 441, 529, 441, 529, 495, 595, 495, 595, 537)&#13;
drawText("GD_MD17: Tool", 0, 1, true)&#13;
drawText("Deactivated", 0, 6, true)&#13;
drawPolyline("596, 534, 595, 537, 593, 534)&#13;
drawPolyline("318, 433, 318, 360, 549, 360, 549, 483, 606, 483, 606, 537)&#13;
drawText("GD_MD17:", 0, 1, true)&#13;
drawText("Tool", 0, 5, true)&#13;
drawText("Deactivated", 0, 10, true)&#13;
drawPolyline("608, 534, 606, 537, 605, 534)&#13;
drawPolyline("844, 576, 844, 564, 695, 564)&#13;
drawText("GD_MD6:", 0, 1, true)&#13;
drawText("Done", 0, 5, true)&#13;
drawPolyline("697, 565, 695, 564, 697, 563)&#13;
drawPolyline("656, 433, 656, 537)&#13;
drawText("GD_MD18:", 0, 1, true)&#13;
drawText("Mouse Moved", 0, 6, true)&#13;
drawText("over Whitespace", 0, 10, true)&#13;
drawPolyline("658, 534, 656, 537, 655, 534)&#13;
drawPolyline("764, 814, 848, 814, 848, 599)&#13;
drawText("GD_MD3:", 0, 2, true)&#13;
drawText("Mouse", 0, 6, true)&#13;
drawText("Released", 0, 11, true)&#13;
drawText("(X, Y)", 0, 15, true)&#13;
drawPolyline("847, 601, 848, 599, 850, 601)&#13;
drawPolyline("917, 652, 894, 652, 894, 599)&#13;
drawText("GD_MD3:", 0, 1, true)&#13;
drawText("Mouse", 0, 6, true)&#13;
drawText("Released", 0, 10, true)&#13;
drawText("(X, Y)", 0, 15, true)&#13;
drawPolyline("893, 601, 894, 599, 896, 601)&#13;
drawPolyline("817, 449, 879, 449)&#13;
drawText("GD_MD2:", 0, 2, true)&#13;
drawText("Mouse", 0, 6, true)&#13;
drawText("Pressed(X,", 0, 11, true)&#13;
drawText("Y)", 0, 15, true)&#13;
drawPolyline("876, 447, 879, 449, 876, 450)&#13;
drawPolyline("802, 510, 771, 510, 771, 480)&#13;
drawText("GD_MD6:", 0, 1, true)&#13;
drawText("Done", 0, 6, true)&#13;
drawPolyline("770, 482, 771, 480, 773, 482)&#13;
drawPolyline("940, 480, 940, 499)&#13;
drawText("GD_MD15:", 0, 2, true)&#13;
drawText("Space", 0, 6, true)&#13;
drawText("Released", 0, 11, true)&#13;
drawPolyline("942, 496, 940, 499, 939, 496)&#13;
drawPolyline("990, 449, 1009, 449, 1009, 472, 990, 472)&#13;
drawText("GD_MD4:", 0, 1, true)&#13;
drawText("Mouse Moved", 0, 6, true)&#13;
drawText("(X, Y)", 0, 10, true)&#13;
drawPolyline("993, 473, 990, 472, 993, 470)&#13;
drawPolyline("879, 468, 844, 468, 844, 495)&#13;
drawText("GD_MD3:", 0, 1, true)&#13;
drawText("Mouse", 0, 6, true)&#13;
drawText("Released", 0, 11, true)&#13;
drawText("(X, Y)", 0, 15, true)&#13;
drawPolyline("846, 492, 844, 495, 843, 492)&#13;
drawPolyline("890, 533, 890, 576)&#13;
drawText("GD_MD3:", 0, 2, true)&#13;
drawText("Mouse", 0, 6, true)&#13;
drawText("Released", 0, 11, true)&#13;
drawText("(X, Y)", 0, 15, true)&#13;
drawPolyline("892, 573, 890, 576, 889, 573)&#13;
drawPolyline("491, 480, 491, 453)&#13;
drawText("GD_MD2:", 0, 1, true)&#13;
drawText("Mouse", 0, 6, true)&#13;
drawText("Pressed(X,", 0, 11, true)&#13;
drawText("Y)", 0, 15, true)&#13;
drawPolyline("490, 456, 491, 453, 492, 456)&#13;
drawPolyline("422, 487, 387, 464)&#13;
drawText("GD_MD4:", 0, 2, true)&#13;
drawText("Mouse Moved", 0, 6, true)&#13;
drawText("(X, Y)", 0, 11, true)&#13;
drawPolyline("389, 467, 387, 464, 390, 465)&#13;
drawPolyline("422, 518, 387, 533)&#13;
drawText("GD_MD3:", 0, 1, true)&#13;
drawText("Mouse", 0, 6, true)&#13;
drawText("Released", 0, 10, true)&#13;
drawText("(X, Y)", 0, 15, true)&#13;
drawPolyline("390, 534, 387, 533, 390, 531)&#13;
drawPolyline("422, 422, 353, 422, 353, 433)&#13;
drawText("GD_MD4:", 0, 2, true)&#13;
drawText("Mouse Moved", 0, 6, true)&#13;
drawText("(X, Y)", 0, 11, true)&#13;
drawPolyline("354, 431, 353, 433, 351, 431)&#13;
drawPolyline("491, 407, 491, 376, 249, 376, 249, 564, 280, 564)&#13;
drawText("GD_MD3: Mouse", 0, 2, true)&#13;
drawText("Released(X, Y)", 0, 6, true)&#13;
drawPolyline("277, 563, 280, 564, 277, 565)&#13;
drawPolyline("280, 541, 264, 541, 264, 391, 468, 391, 468, 407)&#13;
drawText("GD_MD2: Mouse", 0, 1, true)&#13;
drawText("Pressed(X, Y)", 0, 6, true)&#13;
drawPolyline("469, 404, 468, 407, 467, 404)&#13;
drawPolyline("387, 445, 422, 445)&#13;
drawText("GD_MD2:", 0, 1, true)&#13;
drawText("Mouse", 0, 5, true)&#13;
drawText("Pressed(X,", 0, 10, true)&#13;
drawText("Y)", 0, 15, true)&#13;
drawPolyline("419, 444, 422, 445, 419, 446)&#13;
drawPolyline("299, 445, 284, 445, 284, 472, 299, 472)&#13;
drawText("GD_MD4:", 0, 1, true)&#13;
drawText("Mouse Moved", 0, 6, true)&#13;
drawText("(X, Y)", 0, 10, true)&#13;
drawPolyline("296, 470, 299, 472, 296, 473)&#13;
drawPolyline("322, 480, 322, 526)&#13;
drawText("GD_MD3:", 0, 1, true)&#13;
drawText("Mouse", 0, 6, true)&#13;
drawText("Released", 0, 10, true)&#13;
drawText("(X, Y)", 0, 15, true)&#13;
drawPolyline("324, 523, 322, 526, 321, 523)&#13;
drawPolyline("353, 526, 353, 480)&#13;
drawText("GD_MD4:", 0, 2, true)&#13;
drawText("Mouse Moved", 0, 6, true)&#13;
drawText("(X, Y)", 0, 11, true)&#13;
drawPolyline("351, 482, 353, 480, 354, 482)&#13;
drawPolyline("687, 353, 733, 353)&#13;
drawText("GD_MD19: Mouse", 0, 1, true)&#13;
drawText("Moved over Hotspot", 0, 6, true)&#13;
drawText("(X, Y)", 0, 10, true)&#13;
drawPolyline("730, 351, 733, 353, 730, 354)&#13;
drawPolyline("733, 337, 687, 337)&#13;
drawText("GD_MD4:", 0, 1, true)&#13;
drawText("Mouse Moved", 0, 6, true)&#13;
drawText("(X, Y)", 0, 11, true)&#13;
drawPolyline("690, 339, 687, 337, 690, 336)&#13;
drawPolyline("752, 322, 752, 299)&#13;
drawText("GD_MD2:", 0, 1, true)&#13;
drawText("Mouse", 0, 6, true)&#13;
drawText("Pressed(X,", 0, 10, true)&#13;
drawText("Y)", 0, 15, true)&#13;
drawPolyline("751, 302, 752, 299, 754, 302)&#13;
drawPolyline("879, 353, 837, 353)&#13;
drawText("GD_MD3:", 0, 1, true)&#13;
drawText("Mouse", 0, 6, true)&#13;
drawText("Released", 0, 10, true)&#13;
drawText("(X, Y)", 0, 15, true)&#13;
drawPolyline("840, 354, 837, 353, 840, 351)&#13;
drawPolyline("810, 299, 810, 322)&#13;
drawText("GD_MD3:", 0, 2, true)&#13;
drawText("Mouse", 0, 6, true)&#13;
drawText("Released", 0, 11, true)&#13;
drawText("(X, Y)", 0, 16, true)&#13;
drawPolyline("811, 319, 810, 322, 808, 319)&#13;
drawPolyline("879, 418, 856, 418, 856, 380, 879, 380)&#13;
drawText("GD_MD4:", 0, 1, true)&#13;
drawText("Mouse Moved", 0, 5, true)&#13;
drawText("(X, Y)", 0, 10, true)&#13;
drawPolyline("876, 378, 879, 380, 876, 381)&#13;
drawPolyline("867, 207, 979, 207, 979, 261)&#13;
drawText("GD_MD4:", 0, 1, true)&#13;
drawText("Mouse Moved", 0, 6, true)&#13;
drawText("(X, Y)", 0, 10, true)&#13;
drawPolyline("980, 258, 979, 261, 977, 258)</expected>
          <actual>drawText(" 9. Checking Mouse Press", 669, 593, true)&#13;
drawline(668, 597, 790, 597)&#13;
drawText("entry/select many symbols related by self-&gt;GD_GE[R1007];symbol_found=false;for each symbol in symbols  if (symbol.isOver(x:rcvd_evt.X, y:rcvd_evt.Y))    symbol_found=true;    if (symbol.isSelected())      generate GD_MD12:'Mouse Press over Selected Symbol'(X:rcvd_...    else      generate  GD_MD9:'Mouse Press over Symbol'(X:rcvd_evt.X, Y:r...    end if;  end if ;end for;if (symbol_found == false)    generate  GD_MD10:'Mouse Press over Whitespace'(X:rcvd_evt.X, ...end if;", 669, 600, true)&#13;
drawText(" 2. Toggling Symbol Selection", 408, 697, true)&#13;
drawline(407, 701, 487, 701)&#13;
drawText("entry/select many symbols related by self-&gt;GD_G...for each symbol in symbols  if (symbol.isOver(x:rcvd_evt.X, y:rcvd_evt...    symbol.toggleSelect() ;  end if;end for;", 408, 704, true)&#13;
drawText(" 3. Preparing Rubber Rectangle", 553, 697, true)&#13;
drawline(552, 701, 629, 701)&#13;
drawText("entry/self.RRectX = rcvd_evt.X;self.RRectY = rcvd_evt.Y;self.RRectW =0 ;self.RRectH = 0 ;", 553, 704, true)&#13;
drawText(" 4. Unselecting Symbols", 657, 728, true)&#13;
drawline(656, 732, 737, 732)&#13;
drawText("entry/self.unSelectAll();generate GD_MD11:'Symbols Deselected'(X:...", 657, 734, true)&#13;
drawText(" 5. Selecting Single Symbol", 749, 728, true)&#13;
drawline(748, 732, 836, 732)&#13;
drawText("entry/self.unSelectAll() ;select many symbols related by self-&gt;GD_GE[R1...for each symbol in symbols  if (symbol.isOver(x:rcvd_evt.X, y:rcvd_evt.Y))    symbol.toggleSelect() ;  end if;end for;", 749, 734, true)&#13;
drawText(" 6. Dragging Rubber Rectangle", 553, 770, true)&#13;
drawline(552, 774, 629, 774)&#13;
drawText("entry/self.RRectW = self.RRectW + rcvd_evt.X;self.RRectH = self.RRectH + rcvd_evt.Y;self.drawingRRect = true ;", 553, 777, true)&#13;
drawText(" 7. Dragging Symbols", 715, 855, true)&#13;
drawline(714, 858, 836, 858)&#13;
drawText("entry/select many symbols related by self-&gt;GD_GE[R1007];for each symbol in symbols  if (symbol.isSelected())    symbol.move(xDelta:rcvd_evt.X, yDelta:rcvd_evt.Y);  end if ;end for ;self.draggingSymbols = true;", 715, 861, true)&#13;
drawText(" 8. Toggling Symbols Caught By Rubber Rectangle", 480, 828, true)&#13;
drawline(480, 832, 629, 832)&#13;
drawText("entry/// Allow for selection rectangle to be drawn backwardsif (self.RRectW &lt; 0)  self.RRectW = - self.RRectW;  self.RRectX = self.RRectX - self.RRectW;end if; if (self.RRectH &lt; 0)  self.RRectH = - self.RRectH;  self.RRectY = self.RRectY - self.RRectH;end if; select many symbols related by self-&gt;GD_GE[R1007];for each symbol in symbols  if (symbol.isInside(x:self.RRectX, y:self.RRectY, w:self.RRectW, h:self.RRectH))    symbol.toggleSelect();  end if;end for;self.drawingRRect = false;generate GD_MD6:Done() to self ;", 480, 834, true)&#13;
drawText(" 1. Idle", 565, 540, true)&#13;
drawline(564, 544, 694, 544)&#13;
drawText("entry/GRAPH::setMouseCursor(type:"default");self.draggingSymbols = false;", 565, 546, true)&#13;
drawText(" 10. Checking Shifted Mouse Press", 438, 590, true)&#13;
drawline(437, 594, 610, 594)&#13;
drawText("entry/select many symbols related by self-&gt;GD_GE[R1007];symbol_found = false;for each symbol in symbols  if (symbol.isOver(x:rcvd_evt.X, y:rcvd_evt.Y))    symbol_found = true;    generate GD_MD7:'Shifted Mouse Press over Symbol'( X:rcvd_evt.X, Y:rcvd_evt.Y) to self ;  end if ;end for;if (symbol_found == false)  generate GD_MD8:'Shifted Mouse Press over Whitespace'(X:rcvd_evt.X, Y:rcvd_evt.Y) to self ;end if;", 438, 596, true)&#13;
drawText(" 11. Picking Up Selected Symbols", 699, 801, true)&#13;
drawline(698, 805, 763, 805)&#13;
drawText("entry/// Do nothing", 699, 807, true)&#13;
drawText(" 12. Opening Context Menu", 918, 601, true)&#13;
drawline(917, 605, 1017, 605)&#13;
drawText("entry/onWhitespace = true;select many symbols related by self-&gt;GD_GE[R1007];for each symbol in symbols  // If the symbol we're over is unselected, clear other   // selections and select it, otherwise leave the selection   // as it is.  if (symbol.isOver(x:rcvd_evt.X, y:rcvd_evt.Y))    if (NOT symbol.isSelected())      self.unSelectAll() ;      symbol.toggleSelect() ;    end if;   onWhitespace = false;  end if;end for;if (onWhitespace)  self.unSelectAll();  CLIENT::addToSelection(element:self.represents);end if;", 918, 608, true)&#13;
drawText(" 13. Ready to Slide Canvas", 730, 444, true)&#13;
drawline(729, 448, 817, 448)&#13;
drawText("entry/GRAPH::setMouseCursor(type:"open hand");self.slidingCanvas = false;", 730, 450, true)&#13;
drawText(" 14. Sliding Canvas", 880, 444, true)&#13;
drawline(879, 448, 990, 448)&#13;
drawText("entry/GRAPH::setMouseCursor(type:"closed hand");self.slidingCanvas = true;", 880, 450, true)&#13;
drawText(" 15. Awaiting Mouse Release", 880, 501, true)&#13;
drawline(879, 505, 990, 505)&#13;
drawText("entry/GRAPH::setMouseCursor(type:"default");self.slidingCanvas = false;", 880, 508, true)&#13;
drawText(" 16. Tool Active", 423, 482, true)&#13;
drawline(422, 486, 514, 486)&#13;
drawText("entry/", 423, 489, true)&#13;
drawText(" 17. Delegating Mouse Press", 423, 409, true)&#13;
drawline(422, 413, 514, 413)&#13;
drawText("entry/select one tool related by self-&gt;GD_TOOL[R1015];if (not_empty tool)  generate GD_TOOL1:'Mouse Down'(X:rcvd_evt.X,...end if;", 423, 416, true)&#13;
drawText(" 18. Delegating Mouse Move", 300, 436, true)&#13;
drawline(299, 440, 387, 440)&#13;
drawText("entry/select one tool related by self-&gt;GD_TOOL[R101...if (not_empty tool)  generate GD_TOOL4:'Mouse Move'(X:rcvd_evt....end if;", 300, 442, true)&#13;
drawText(" 19. Delegating Mouse Release", 281, 528, true)&#13;
drawline(280, 532, 387, 532)&#13;
drawText("entry/select one tool related by self-&gt;GD_TOOL[R1015];if (not_empty tool)  generate GD_TOOL3:'Mouse Up'(X:rcvd_evt.X, Y:rcvd_evt...end if;", 281, 535, true)&#13;
drawText(" 21. Releasing Mouse", 807, 578, true)&#13;
drawline(806, 582, 906, 582)&#13;
drawText("entry/generate GD_MD6:Done to self;", 807, 585, true)&#13;
drawText(" 22. Resting while Sliding Canvas", 803, 497, true)&#13;
drawline(802, 501, 863, 501)&#13;
drawText("entry/generate GD_MD6:Done to self;", 803, 504, true)&#13;
drawText(" 23. Checking for Hotspots", 561, 267, true)&#13;
drawline(560, 271, 687, 271)&#13;
drawText("entry/// Check all symbols and vertices to see if we're over a cornerselect many symbols related by self-&gt;GD_GE[R1007];onHotspot = false;for each symbol in symbols  if(symbol.isSelected() AND      symbol.isOverVertex(x:GRAPH::getAbsoluteXPosition(),                                        y:GRAPH::getAbsoluteYPosition()))    select one shp related by symbol-&gt;GD_SHP[R1006];    if (not_empty shp)      if (shp.isOverNWSE(x:GRAPH::getAbsoluteXPosition(), y:GRAPH::...        GRAPH::setMouseCursor(type:"nwse");      else        GRAPH::setMouseCursor(type:"nesw");      end if;    end if;    onHotspot = true;  end if;end for;select many segs related by symbols-&gt;GD_CON[R1006]-&gt;GD_LS[R10...for each seg in segs  if (seg.isSelected() AND     seg.isOverVertex(x:GRAPH::getAbsoluteXPosition(),                                        y:GRAPH::getAbsoluteYPosition()))     GRAPH::setMouseCursor(type:"waypoint tool");    onHotspot = true;    end if;end for;if (onHotspot)  generate GD_MD19:'Mouse Moved over Hotspot'                                     (X:GRAPH::getAbsoluteXPosition(),                                      Y:GRAPH::getAbsoluteYPosition()) to self;else  generate GD_MD18:'Mouse Moved over Whitespace' to self;end if;", 561, 274, true)&#13;
drawText(" 25. Waiting for Mouse Press over Hotspot", 734, 325, true)&#13;
drawline(733, 329, 836, 329)&#13;
drawText("entry/// If a symbol is being resized, unrelate the canvas from itselect one symbol related by self-&gt;GD_GE[R1017];if (not_empty symbol)  select one resize related by self-&gt;GD_ELR[R1017];  unrelate self from symbol across R1017 using resize;  delete object instance resize;end if;// If a line segment is being flexed, unrelate the canvasselect many flexes related by self-&gt;GD_ELF[R1018];for each flex in flexes  select one seg related by flex-&gt;GD_LS[R1018];  unrelate self from seg across R1018 using flex;  delete object instance flex;end for;", 734, 331, true)&#13;
drawText(" 26. Moving Hotspot", 880, 263, true)&#13;
drawline(879, 267, 1036, 267)&#13;
drawText("entry/// Move the relevant vertexselect one symbol related by self-&gt;GD_GE[R1017];if (not_empty symbol)  select one resize related by self-&gt;GD_ELR[R1017];  select one shp related by symbol-&gt;GD_SHP[R1006];  if (not_empty shp)    if (resize.Vertex == Vertex_type::NW)      shp.NW_X = GRAPH::scale(value:GRAPH::getAbsoluteXPosition()) + self.ScrollXPos;      shp.NW_Y = GRAPH::scale(value:GRAPH::getAbsoluteYPosition()) + self.ScrollYPos;    end if;    if (resize.Vertex == Vertex_type::SE)      shp.SE_X = GRAPH::scale(value:GRAPH::getAbsoluteXPosition()) + self.ScrollXPos;      shp.SE_Y = GRAPH::scale(value:GRAPH::getAbsoluteYPosition()) + self.ScrollYPos;    end if;    if (resize.Vertex == Vertex_type::NE)      shp.SE_X = GRAPH::scale(value:GRAPH::getAbsoluteXPosition()) + self.ScrollXPos;      shp.NW_Y = GRAPH::scale(value:GRAPH::getAbsoluteYPosition()) + self.ScrollYPos;    end if;    if (resize.Vertex == Vertex_type::SW)      shp.NW_X = GRAPH::scale(value:GRAPH::getAbsoluteXPosition()) + self.ScrollXPos;      shp.SE_Y = GRAPH::scale(value:GRAPH::getAbsoluteYPosition()) + self.ScrollYPos;    end if;  end if;end if;select many flexes related by self-&gt;GD_ELF[R1018];for each flex in flexes  select one seg related by flex-&gt;GD_LS[R1018];  if (flex.Vertex == Vertex_type::Start)      seg.Start_X = GRAPH::scale(value:GRAPH::getAbsoluteXPosition()) + self.ScrollXPos;      seg.Start_Y = GRAPH::scale(value:GRAPH::getAbsoluteYPosition()) + self.ScrollYPos;  elif (flex.Vertex == Vertex_type::End)      seg.End_X = GRAPH::scale(value:GRAPH::getAbsoluteXPosition()) + self.ScrollXPos;      seg.End_Y = GRAPH::scale(value:GRAPH::getAbsoluteYPosition()) + self.ScrollYPos;  end if;end for;GRAPH::reDraw();", 880, 270, true)&#13;
drawText(" 27. Waiting to Move Hotspot", 699, 117, true)&#13;
drawline(698, 121, 867, 121)&#13;
drawText("entry/// Find the relevant symbol and relate the canvas to the symbolselect many symbols related by self-&gt;GD_GE[R1007];for each symbol in symbols  if (symbol.isSelected() AND      symbol.isOverVertex(x:GRAPH::getAbsoluteXPosition(),                                         y:GRAPH::getAbsoluteYPosition()))    create object instance resize of GD_ELR;    relate self to symbol across R1017 using resize;    select one shp related by symbol-&gt;GD_SHP[R1006];    if (not_empty shp)      if (shp.isOverNW(x:GRAPH::getAbsoluteXPosition(), y:GRAPH::getAbsoluteYPosition()))        resize.Vertex = Vertex_type::NW;      end if;      if (shp.isOverSE(x:GRAPH::getAbsoluteXPosition(), y:GRAPH::getAbsoluteYPosition()))        resize.Vertex = Vertex_type::SE;      end if;      if (shp.isOverNE(x:GRAPH::getAbsoluteXPosition(), y:GRAPH::getAbsoluteYPosition()))        resize.Vertex = Vertex_type::NE;      end if;      if (shp.isOverSW(x:GRAPH::getAbsoluteXPosition(), y:GRAPH::getAbsoluteYPosition()))        resize.Vertex = Vertex_type::SW;      end if;    end if;  end if;end for;select many segs related by symbols-&gt;GD_CON[R1006]-&gt;GD_LS[R1004];for each seg in segs  if (seg.isSelected() AND seg.isOverVertex(x:GRAPH::getAbsoluteXPosition(),                                        y:GRAPH::getAbsoluteYPosition()))    create object instance flex of GD_ELF;    relate self to seg across R1018 using flex;    if (seg.isOverStart(x:GRAPH::getAbsoluteXPosition(), y:GRAPH::getAbsoluteYPosition()))      flex.Vertex = Vertex_type::Start;    end if;    if (seg.isOverEnd(x:GRAPH::getAbsoluteXPosition(), y:GRAPH::getAbsoluteYPosition()))      flex.Vertex = Vertex_type::End;    end if;  end if;end for;", 699, 124, true)&#13;
drawPolyline("714, 691, 714, 725)&#13;
drawText("GD_MD10: Mouse", 0, 2, true)&#13;
drawText("Press over", 0, 6, true)&#13;
drawText("Whitespace(X, Y)", 0, 11, true)&#13;
drawPolyline("715, 722, 714, 725, 712, 722)&#13;
drawPolyline("791, 637, 802, 637, 802, 725)&#13;
drawText("GD_MD9: Mouse", 0, 2, true)&#13;
drawText("Press over", 0, 6, true)&#13;
drawText("Symbol(X, Y)", 0, 11, true)&#13;
drawPolyline("804, 722, 802, 725, 801, 722)&#13;
drawPolyline("744, 691, 744, 798)&#13;
drawText("GD_MD12:", 0, 1, true)&#13;
drawText("Mouse Press", 0, 6, true)&#13;
drawText("over Selected", 0, 10, true)&#13;
drawText("Symbol(X, Y)", 0, 15, true)&#13;
drawPolyline("746, 795, 744, 798, 743, 795)&#13;
drawPolyline("679, 572, 679, 591)&#13;
drawText("GD_MD2: Mouse", 0, 2, true)&#13;
drawText("Pressed(X, Y)", 0, 6, true)&#13;
drawPolyline("681, 588, 679, 591, 678, 588)&#13;
drawPolyline("449, 744, 449, 921, 779, 921, 779, 898)&#13;
drawText("GD_MD4: Mouse", 0, 1, true)&#13;
drawText("Moved(X, Y)", 0, 5, true)&#13;
drawPolyline("778, 901, 779, 898, 780, 901)&#13;
drawPolyline("418, 744, 418, 936, 879, 936, 879, 599)&#13;
drawText("GD_MD3:", 0, 2, true)&#13;
drawText("Mouse", 0, 6, true)&#13;
drawText("Released(X,", 0, 11, true)&#13;
drawText("Y)", 0, 15, true)&#13;
drawPolyline("877, 601, 879, 599, 880, 601)&#13;
drawPolyline("506, 656, 506, 725, 487, 725)&#13;
drawText("GD_MD7:", 0, 1, true)&#13;
drawText("Shifted Mouse", 0, 6, true)&#13;
drawText("Press over", 0, 10, true)&#13;
drawText("Symbol(X, Y)", 0, 15, true)&#13;
drawPolyline("490, 727, 487, 725, 490, 724)&#13;
drawPolyline("587, 737, 587, 768)&#13;
drawText("GD_MD4:", 0, 2, true)&#13;
drawText("Mouse", 0, 6, true)&#13;
drawText("Moved(X,", 0, 11, true)&#13;
drawText("Y)", 0, 15, true)&#13;
drawPolyline("588, 765, 587, 768, 586, 765)&#13;
drawPolyline("629, 706, 817, 706, 817, 599)&#13;
drawText("GD_MD3:", 0, 2, true)&#13;
drawText("Mouse", 0, 6, true)&#13;
drawText("Released(X,", 0, 11, true)&#13;
drawText("Y)", 0, 15, true)&#13;
drawPolyline("816, 601, 817, 599, 819, 601)&#13;
drawPolyline("675, 725, 675, 718, 629, 718)&#13;
drawText("GD_MD11:", 0, 2, true)&#13;
drawText("Symbols", 0, 6, true)&#13;
drawText("Deselected(X,", 0, 11, true)&#13;
drawText("Y)", 0, 16, true)&#13;
drawPolyline("632, 719, 629, 718, 632, 716)&#13;
drawPolyline("583, 656, 583, 695)&#13;
drawText("GD_MD8: Shifted", 0, 1, true)&#13;
drawText("Mouse Press over", 0, 6, true)&#13;
drawText("Whitespace(X, Y)", 0, 10, true)&#13;
drawPolyline("585, 692, 583, 695, 582, 692)&#13;
drawPolyline("779, 771, 779, 852)&#13;
drawText("GD_MD4: Mouse", 0, 1, true)&#13;
drawText("Moved(X, Y)", 0, 6, true)&#13;
drawPolyline("780, 849, 779, 852, 778, 849)&#13;
drawPolyline("829, 725, 829, 599)&#13;
drawText("GD_MD3:", 0, 2, true)&#13;
drawText("Mouse", 0, 6, true)&#13;
drawText("Released(X,", 0, 11, true)&#13;
drawText("Y)", 0, 15, true)&#13;
drawPolyline("828, 601, 829, 599, 830, 601)&#13;
drawPolyline("587, 810, 587, 825)&#13;
drawText("GD_MD3: Mouse", 0, 1, true)&#13;
drawText("Released(X, Y)", 0, 6, true)&#13;
drawPolyline("588, 822, 587, 825, 586, 822)&#13;
drawPolyline("552, 779, 533, 779, 533, 798, 552, 798)&#13;
drawText("GD_MD4:", 0, 1, true)&#13;
drawText("Mouse", 0, 6, true)&#13;
drawText("Moved(X,", 0, 11, true)&#13;
drawText("Y)", 0, 15, true)&#13;
drawPolyline("550, 797, 552, 798, 550, 800)&#13;
drawPolyline("714, 864, 679, 864, 679, 887, 714, 887)&#13;
drawText("GD_MD4: Mouse", 0, 2, true)&#13;
drawText("Moved(X, Y)", 0, 6, true)&#13;
drawPolyline("711, 885, 714, 887, 711, 888)&#13;
drawPolyline("837, 875, 864, 875, 864, 599)&#13;
drawText("GD_MD3:", 0, 2, true)&#13;
drawText("Mouse", 0, 6, true)&#13;
drawText("Released(X,", 0, 11, true)&#13;
drawText("Y)", 0, 15, true)&#13;
drawPolyline("862, 601, 864, 599, 865, 601)&#13;
drawPolyline("744, 833, 744, 852)&#13;
drawText("GD_MD4:", 0, 2, true)&#13;
drawText("Mouse", 0, 6, true)&#13;
drawText("Moved(X,", 0, 11, true)&#13;
drawText("Y)", 0, 15, true)&#13;
drawPolyline("746, 849, 744, 852, 743, 849)&#13;
drawPolyline("629, 856, 645, 856, 645, 572)&#13;
drawText("GD_MD6:", 0, 2, true)&#13;
drawText("Done", 0, 6, true)&#13;
drawPolyline("643, 575, 645, 572, 646, 575)&#13;
drawPolyline("587, 572, 587, 587)&#13;
drawText("GD_MD5: Shift Mouse", 0, 1, true)&#13;
drawText("Pressed(X, Y)", 0, 6, true)&#13;
drawPolyline("588, 584, 587, 587, 586, 584)&#13;
drawPolyline("695, 541, 952, 541, 952, 599)&#13;
drawText("GD_MD13:", 0, 1, true)&#13;
drawText("Mouse", 0, 6, true)&#13;
drawText("Context", 0, 10, true)&#13;
drawText("Press(X, Y)", 0, 15, true)&#13;
drawPolyline("953, 596, 952, 599, 950, 596)&#13;
drawPolyline("672, 537, 672, 453, 729, 453)&#13;
drawText("GD_MD14: Space", 0, 1, true)&#13;
drawText("Pressed", 0, 6, true)&#13;
drawPolyline("726, 451, 729, 453, 726, 454)&#13;
drawPolyline("572, 537, 572, 518, 514, 518)&#13;
drawText("GD_MD16: Tool", 0, 1, true)&#13;
drawText("Activated", 0, 6, true)&#13;
drawPolyline("517, 519, 514, 518, 517, 516)&#13;
drawPolyline("618, 537, 618, 433)&#13;
drawText("GD_MD4:", 0, 1, true)&#13;
drawText("Mouse", 0, 5, true)&#13;
drawText("Moved(X,", 0, 10, true)&#13;
drawText("Y)", 0, 15, true)&#13;
drawPolyline("616, 436, 618, 433, 619, 436)&#13;
drawPolyline("729, 468, 683, 468, 683, 537)&#13;
drawText("GD_MD15:", 0, 2, true)&#13;
drawText("Space", 0, 6, true)&#13;
drawText("Released", 0, 11, true)&#13;
drawPolyline("684, 534, 683, 537, 682, 534)&#13;
drawPolyline("514, 506, 583, 506, 583, 537)&#13;
drawText("GD_MD17: Tool", 0, 1, true)&#13;
drawText("Deactivated", 0, 5, true)&#13;
drawPolyline("585, 534, 583, 537, 582, 534)&#13;
drawPolyline("387, 545, 564, 545)&#13;
drawText("GD_MD17: Tool", 0, 2, true)&#13;
drawText("Deactivated", 0, 6, true)&#13;
drawPolyline("561, 543, 564, 545, 561, 546)&#13;
drawPolyline("514, 441, 529, 441, 529, 495, 595, 495, 595, 537)&#13;
drawText("GD_MD17: Tool", 0, 1, true)&#13;
drawText("Deactivated", 0, 6, true)&#13;
drawPolyline("596, 534, 595, 537, 593, 534)&#13;
drawPolyline("318, 433, 318, 360, 549, 360, 549, 483, 606, 483, 606, 537)&#13;
drawText("GD_MD17:", 0, 1, true)&#13;
drawText("Tool", 0, 5, true)&#13;
drawText("Deactivated", 0, 10, true)&#13;
drawPolyline("608, 534, 606, 537, 605, 534)&#13;
drawPolyline("844, 576, 844, 564, 695, 564)&#13;
drawText("GD_MD6:", 0, 1, true)&#13;
drawText("Done", 0, 5, true)&#13;
drawPolyline("697, 565, 695, 564, 697, 563)&#13;
drawPolyline("656, 433, 656, 537)&#13;
drawText("GD_MD18:", 0, 1, true)&#13;
drawText("Mouse Moved", 0, 6, true)&#13;
drawText("over Whitespace", 0, 10, true)&#13;
drawPolyline("658, 534, 656, 537, 655, 534)&#13;
drawPolyline("764, 814, 848, 814, 848, 599)&#13;
drawText("GD_MD3:", 0, 2, true)&#13;
drawText("Mouse", 0, 6, true)&#13;
drawText("Released(X,", 0, 11, true)&#13;
drawText("Y)", 0, 15, true)&#13;
drawPolyline("847, 601, 848, 599, 850, 601)&#13;
drawPolyline("917, 652, 894, 652, 894, 599)&#13;
drawText("GD_MD3:", 0, 1, true)&#13;
drawText("Mouse", 0, 6, true)&#13;
drawText("Released(X,", 0, 10, true)&#13;
drawText("Y)", 0, 15, true)&#13;
drawPolyline("893, 601, 894, 599, 896, 601)&#13;
drawPolyline("817, 449, 879, 449)&#13;
drawText("GD_MD2:", 0, 2, true)&#13;
drawText("Mouse", 0, 6, true)&#13;
drawText("Pressed(X,", 0, 11, true)&#13;
drawText("Y)", 0, 15, true)&#13;
drawPolyline("876, 447, 879, 449, 876, 450)&#13;
drawPolyline("802, 510, 771, 510, 771, 480)&#13;
drawText("GD_MD6:", 0, 1, true)&#13;
drawText("Done", 0, 6, true)&#13;
drawPolyline("770, 482, 771, 480, 773, 482)&#13;
drawPolyline("940, 480, 940, 499)&#13;
drawText("GD_MD15:", 0, 2, true)&#13;
drawText("Space", 0, 6, true)&#13;
drawText("Released", 0, 11, true)&#13;
drawPolyline("942, 496, 940, 499, 939, 496)&#13;
drawPolyline("990, 449, 1009, 449, 1009, 472, 990, 472)&#13;
drawText("GD_MD4:", 0, 1, true)&#13;
drawText("Mouse", 0, 6, true)&#13;
drawText("Moved(X,", 0, 10, true)&#13;
drawText("Y)", 0, 15, true)&#13;
drawPolyline("993, 473, 990, 472, 993, 470)&#13;
drawPolyline("879, 468, 844, 468, 844, 495)&#13;
drawText("GD_MD3:", 0, 1, true)&#13;
drawText("Mouse", 0, 6, true)&#13;
drawText("Released(X,", 0, 11, true)&#13;
drawText("Y)", 0, 15, true)&#13;
drawPolyline("846, 492, 844, 495, 843, 492)&#13;
drawPolyline("890, 533, 890, 576)&#13;
drawText("GD_MD3:", 0, 2, true)&#13;
drawText("Mouse", 0, 6, true)&#13;
drawText("Released(X,", 0, 11, true)&#13;
drawText("Y)", 0, 15, true)&#13;
drawPolyline("892, 573, 890, 576, 889, 573)&#13;
drawPolyline("491, 480, 491, 453)&#13;
drawText("GD_MD2:", 0, 1, true)&#13;
drawText("Mouse", 0, 6, true)&#13;
drawText("Pressed(X,", 0, 11, true)&#13;
drawText("Y)", 0, 15, true)&#13;
drawPolyline("490, 456, 491, 453, 492, 456)&#13;
drawPolyline("422, 487, 387, 464)&#13;
drawText("GD_MD4:", 0, 2, true)&#13;
drawText("Mouse", 0, 6, true)&#13;
drawText("Moved(X,", 0, 11, true)&#13;
drawText("Y)", 0, 15, true)&#13;
drawPolyline("389, 467, 387, 464, 390, 465)&#13;
drawPolyline("422, 518, 387, 533)&#13;
drawText("GD_MD3:", 0, 1, true)&#13;
drawText("Mouse", 0, 6, true)&#13;
drawText("Released(X,", 0, 10, true)&#13;
drawText("Y)", 0, 15, true)&#13;
drawPolyline("390, 534, 387, 533, 390, 531)&#13;
drawPolyline("422, 422, 353, 422, 353, 433)&#13;
drawText("GD_MD4:", 0, 2, true)&#13;
drawText("Mouse", 0, 6, true)&#13;
drawText("Moved(X,", 0, 11, true)&#13;
drawText("Y)", 0, 15, true)&#13;
drawPolyline("354, 431, 353, 433, 351, 431)&#13;
drawPolyline("491, 407, 491, 376, 249, 376, 249, 564, 280, 564)&#13;
drawText("GD_MD3: Mouse", 0, 2, true)&#13;
drawText("Released(X, Y)", 0, 6, true)&#13;
drawPolyline("277, 563, 280, 564, 277, 565)&#13;
drawPolyline("280, 541, 264, 541, 264, 391, 468, 391, 468, 407)&#13;
drawText("GD_MD2: Mouse", 0, 1, true)&#13;
drawText("Pressed(X, Y)", 0, 6, true)&#13;
drawPolyline("469, 404, 468, 407, 467, 404)&#13;
drawPolyline("387, 445, 422, 445)&#13;
drawText("GD_MD2:", 0, 1, true)&#13;
drawText("Mouse", 0, 5, true)&#13;
drawText("Pressed(X,", 0, 10, true)&#13;
drawText("Y)", 0, 15, true)&#13;
drawPolyline("419, 444, 422, 445, 419, 446)&#13;
drawPolyline("299, 445, 284, 445, 284, 472, 299, 472)&#13;
drawText("GD_MD4:", 0, 1, true)&#13;
drawText("Mouse", 0, 6, true)&#13;
drawText("Moved(X,", 0, 10, true)&#13;
drawText("Y)", 0, 15, true)&#13;
drawPolyline("296, 470, 299, 472, 296, 473)&#13;
drawPolyline("322, 480, 322, 526)&#13;
drawText("GD_MD3:", 0, 1, true)&#13;
drawText("Mouse", 0, 6, true)&#13;
drawText("Released(X,", 0, 10, true)&#13;
drawText("Y)", 0, 15, true)&#13;
drawPolyline("324, 523, 322, 526, 321, 523)&#13;
drawPolyline("353, 526, 353, 480)&#13;
drawText("GD_MD4:", 0, 2, true)&#13;
drawText("Mouse", 0, 6, true)&#13;
drawText("Moved(X,", 0, 11, true)&#13;
drawText("Y)", 0, 15, true)&#13;
drawPolyline("351, 482, 353, 480, 354, 482)&#13;
drawPolyline("687, 353, 733, 353)&#13;
drawText("GD_MD19: Mouse", 0, 1, true)&#13;
drawText("Moved over", 0, 6, true)&#13;
drawText("Hotspot(X, Y)", 0, 10, true)&#13;
drawPolyline("730, 351, 733, 353, 730, 354)&#13;
drawPolyline("733, 337, 687, 337)&#13;
drawText("GD_MD4:", 0, 1, true)&#13;
drawText("Mouse", 0, 6, true)&#13;
drawText("Moved(X,", 0, 11, true)&#13;
drawText("Y)", 0, 15, true)&#13;
drawPolyline("690, 339, 687, 337, 690, 336)&#13;
drawPolyline("752, 322, 752, 299)&#13;
drawText("GD_MD2:", 0, 1, true)&#13;
drawText("Mouse", 0, 6, true)&#13;
drawText("Pressed(X,", 0, 10, true)&#13;
drawText("Y)", 0, 15, true)&#13;
drawPolyline("751, 302, 752, 299, 754, 302)&#13;
drawPolyline("879, 353, 837, 353)&#13;
drawText("GD_MD3:", 0, 1, true)&#13;
drawText("Mouse", 0, 6, true)&#13;
drawText("Released(X,", 0, 10, true)&#13;
drawText("Y)", 0, 15, true)&#13;
drawPolyline("840, 354, 837, 353, 840, 351)&#13;
drawPolyline("810, 299, 810, 322)&#13;
drawText("GD_MD3:", 0, 2, true)&#13;
drawText("Mouse", 0, 6, true)&#13;
drawText("Released(X,", 0, 11, true)&#13;
drawText("Y)", 0, 16, true)&#13;
drawPolyline("811, 319, 810, 322, 808, 319)&#13;
drawPolyline("879, 418, 856, 418, 856, 380, 879, 380)&#13;
drawText("GD_MD4:", 0, 1, true)&#13;
drawText("Mouse", 0, 5, true)&#13;
drawText("Moved(X,", 0, 10, true)&#13;
drawText("Y)", 0, 15, true)&#13;
drawPolyline("876, 378, 879, 380, 876, 381)&#13;
drawPolyline("867, 207, 979, 207, 979, 261)&#13;
drawText("GD_MD4:", 0, 1, true)&#13;
drawText("Mouse", 0, 6, true)&#13;
drawText("Moved(X,", 0, 10, true)&#13;
drawText("Y)", 0, 15, true)&#13;
drawPolyline("980, 258, 979, 261, 977, 258)</actual>junit.framework.ComparisonFailure: Actual results differ from those expected, file: 
4718601-8
 expected:&lt;...drawText("Press over[ Symbol", 0, 6, true)&#13;
drawText("(X, Y)", 0, 11, true)&#13;
drawPolyline("804, 722, 802, 725, 801, 722)&#13;
drawPolyline("744, 691, 744, 798)&#13;
drawText("GD_MD12:", 0, 1, true)&#13;
drawText("Mouse Press", 0, 6, true)&#13;
drawText("over Selected", 0, 10, true)&#13;
drawText("Symbol(X, Y)", 0, 15, true)&#13;
drawPolyline("746, 795, 744, 798, 743, 795)&#13;
drawPolyline("679, 572, 679, 591)&#13;
drawText("GD_MD2: Mouse", 0, 2, true)&#13;
drawText("Pressed(X, Y)", 0, 6, true)&#13;
drawPolyline("681, 588, 679, 591, 678, 588)&#13;
drawPolyline("449, 744, 449, 921, 779, 921, 779, 898)&#13;
drawText("GD_MD4: Mouse", 0, 1, true)&#13;
drawText("Moved(X, Y)", 0, 5, true)&#13;
drawPolyline("778, 901, 779, 898, 780, 901)&#13;
drawPolyline("418, 744, 418, 936, 879, 936, 879, 599)&#13;
drawText("GD_MD3:", 0, 2, true)&#13;
drawText("Mouse", 0, 6, true)&#13;
drawText("Released", 0, 11, true)&#13;
drawText("(X, Y)", 0, 15, true)&#13;
drawPolyline("877, 601, 879, 599, 880, 601)&#13;
drawPolyline("506, 656, 506, 725, 487, 725)&#13;
drawText("GD_MD7:", 0, 1, true)&#13;
drawText("Shifted Mouse", 0, 6, true)&#13;
drawText("Press over", 0, 10, true)&#13;
drawText("Symbol(X, Y)", 0, 15, true)&#13;
drawPolyline("490, 727, 487, 725, 490, 724)&#13;
drawPolyline("587, 737, 587, 768)&#13;
drawText("GD_MD4:", 0, 2, true)&#13;
drawText("Mouse", 0, 6, true)&#13;
drawText("Moved(X,", 0, 11, true)&#13;
drawText("Y)", 0, 15, true)&#13;
drawPolyline("588, 765, 587, 768, 586, 765)&#13;
drawPolyline("629, 706, 817, 706, 817, 599)&#13;
drawText("GD_MD3:", 0, 2, true)&#13;
drawText("Mouse", 0, 6, true)&#13;
drawText("Released", 0, 11, true)&#13;
drawText("(X, Y)", 0, 15, true)&#13;
drawPolyline("816, 601, 817, 599, 819, 601)&#13;
drawPolyline("675, 725, 675, 718, 629, 718)&#13;
drawText("GD_MD11:", 0, 2, true)&#13;
drawText("Symbols", 0, 6, true)&#13;
drawText("Deselected", 0, 11, true)&#13;
drawText("(X, Y)", 0, 16, true)&#13;
drawPolyline("632, 719, 629, 718, 632, 716)&#13;
drawPolyline("583, 656, 583, 695)&#13;
drawText("GD_MD8: Shifted", 0, 1, true)&#13;
drawText("Mouse Press over", 0, 6, true)&#13;
drawText("Whitespace(X, Y)", 0, 10, true)&#13;
drawPolyline("585, 692, 583, 695, 582, 692)&#13;
drawPolyline("779, 771, 779, 852)&#13;
drawText("GD_MD4: Mouse", 0, 1, true)&#13;
drawText("Moved(X, Y)", 0, 6, true)&#13;
drawPolyline("780, 849, 779, 852, 778, 849)&#13;
drawPolyline("829, 725, 829, 599)&#13;
drawText("GD_MD3:", 0, 2, true)&#13;
drawText("Mouse", 0, 6, true)&#13;
drawText("Released", 0, 11, true)&#13;
drawText("(X, Y)", 0, 15, true)&#13;
drawPolyline("828, 601, 829, 599, 830, 601)&#13;
drawPolyline("587, 810, 587, 825)&#13;
drawText("GD_MD3: Mouse", 0, 1, true)&#13;
drawText("Released(X, Y)", 0, 6, true)&#13;
drawPolyline("588, 822, 587, 825, 586, 822)&#13;
drawPolyline("552, 779, 533, 779, 533, 798, 552, 798)&#13;
drawText("GD_MD4:", 0, 1, true)&#13;
drawText("Mouse", 0, 6, true)&#13;
drawText("Moved(X,", 0, 11, true)&#13;
drawText("Y)", 0, 15, true)&#13;
drawPolyline("550, 797, 552, 798, 550, 800)&#13;
drawPolyline("714, 864, 679, 864, 679, 887, 714, 887)&#13;
drawText("GD_MD4: Mouse", 0, 2, true)&#13;
drawText("Moved(X, Y)", 0, 6, true)&#13;
drawPolyline("711, 885, 714, 887, 711, 888)&#13;
drawPolyline("837, 875, 864, 875, 864, 599)&#13;
drawText("GD_MD3:", 0, 2, true)&#13;
drawText("Mouse", 0, 6, true)&#13;
drawText("Released", 0, 11, true)&#13;
drawText("(X, Y)", 0, 15, true)&#13;
drawPolyline("862, 601, 864, 599, 865, 601)&#13;
drawPolyline("744, 833, 744, 852)&#13;
drawText("GD_MD4:", 0, 2, true)&#13;
drawText("Mouse Moved", 0, 6, true)&#13;
drawText("(X, Y)", 0, 11, true)&#13;
drawPolyline("746, 849, 744, 852, 743, 849)&#13;
drawPolyline("629, 856, 645, 856, 645, 572)&#13;
drawText("GD_MD6:", 0, 2, true)&#13;
drawText("Done", 0, 6, true)&#13;
drawPolyline("643, 575, 645, 572, 646, 575)&#13;
drawPolyline("587, 572, 587, 587)&#13;
drawText("GD_MD5: Shift Mouse", 0, 1, true)&#13;
drawText("Pressed(X, Y)", 0, 6, true)&#13;
drawPolyline("588, 584, 587, 587, 586, 584)&#13;
drawPolyline("695, 541, 952, 541, 952, 599)&#13;
drawText("GD_MD13:", 0, 1, true)&#13;
drawText("Mouse", 0, 6, true)&#13;
drawText("Context", 0, 10, true)&#13;
drawText("Press(X, Y)", 0, 15, true)&#13;
drawPolyline("953, 596, 952, 599, 950, 596)&#13;
drawPolyline("672, 537, 672, 453, 729, 453)&#13;
drawText("GD_MD14: Space", 0, 1, true)&#13;
drawText("Pressed", 0, 6, true)&#13;
drawPolyline("726, 451, 729, 453, 726, 454)&#13;
drawPolyline("572, 537, 572, 518, 514, 518)&#13;
drawText("GD_MD16: Tool", 0, 1, true)&#13;
drawText("Activated", 0, 6, true)&#13;
drawPolyline("517, 519, 514, 518, 517, 516)&#13;
drawPolyline("618, 537, 618, 433)&#13;
drawText("GD_MD4:", 0, 1, true)&#13;
drawText("Mouse Moved", 0, 5, true)&#13;
drawText("(X, Y)", 0, 10, true)&#13;
drawPolyline("616, 436, 618, 433, 619, 436)&#13;
drawPolyline("729, 468, 683, 468, 683, 537)&#13;
drawText("GD_MD15:", 0, 2, true)&#13;
drawText("Space", 0, 6, true)&#13;
drawText("Released", 0, 11, true)&#13;
drawPolyline("684, 534, 683, 537, 682, 534)&#13;
drawPolyline("514, 506, 583, 506, 583, 537)&#13;
drawText("GD_MD17: Tool", 0, 1, true)&#13;
drawText("Deactivated", 0, 5, true)&#13;
drawPolyline("585, 534, 583, 537, 582, 534)&#13;
drawPolyline("387, 545, 564, 545)&#13;
drawText("GD_MD17: Tool", 0, 2, true)&#13;
drawText("Deactivated", 0, 6, true)&#13;
drawPolyline("561, 543, 564, 545, 561, 546)&#13;
drawPolyline("514, 441, 529, 441, 529, 495, 595, 495, 595, 537)&#13;
drawText("GD_MD17: Tool", 0, 1, true)&#13;
drawText("Deactivated", 0, 6, true)&#13;
drawPolyline("596, 534, 595, 537, 593, 534)&#13;
drawPolyline("318, 433, 318, 360, 549, 360, 549, 483, 606, 483, 606, 537)&#13;
drawText("GD_MD17:", 0, 1, true)&#13;
drawText("Tool", 0, 5, true)&#13;
drawText("Deactivated", 0, 10, true)&#13;
drawPolyline("608, 534, 606, 537, 605, 534)&#13;
drawPolyline("844, 576, 844, 564, 695, 564)&#13;
drawText("GD_MD6:", 0, 1, true)&#13;
drawText("Done", 0, 5, true)&#13;
drawPolyline("697, 565, 695, 564, 697, 563)&#13;
drawPolyline("656, 433, 656, 537)&#13;
drawText("GD_MD18:", 0, 1, true)&#13;
drawText("Mouse Moved", 0, 6, true)&#13;
drawText("over Whitespace", 0, 10, true)&#13;
drawPolyline("658, 534, 656, 537, 655, 534)&#13;
drawPolyline("764, 814, 848, 814, 848, 599)&#13;
drawText("GD_MD3:", 0, 2, true)&#13;
drawText("Mouse", 0, 6, true)&#13;
drawText("Released", 0, 11, true)&#13;
drawText("(X, Y)", 0, 15, true)&#13;
drawPolyline("847, 601, 848, 599, 850, 601)&#13;
drawPolyline("917, 652, 894, 652, 894, 599)&#13;
drawText("GD_MD3:", 0, 1, true)&#13;
drawText("Mouse", 0, 6, true)&#13;
drawText("Released", 0, 10, true)&#13;
drawText("(X, Y)", 0, 15, true)&#13;
drawPolyline("893, 601, 894, 599, 896, 601)&#13;
drawPolyline("817, 449, 879, 449)&#13;
drawText("GD_MD2:", 0, 2, true)&#13;
drawText("Mouse", 0, 6, true)&#13;
drawText("Pressed(X,", 0, 11, true)&#13;
drawText("Y)", 0, 15, true)&#13;
drawPolyline("876, 447, 879, 449, 876, 450)&#13;
drawPolyline("802, 510, 771, 510, 771, 480)&#13;
drawText("GD_MD6:", 0, 1, true)&#13;
drawText("Done", 0, 6, true)&#13;
drawPolyline("770, 482, 771, 480, 773, 482)&#13;
drawPolyline("940, 480, 940, 499)&#13;
drawText("GD_MD15:", 0, 2, true)&#13;
drawText("Space", 0, 6, true)&#13;
drawText("Released", 0, 11, true)&#13;
drawPolyline("942, 496, 940, 499, 939, 496)&#13;
drawPolyline("990, 449, 1009, 449, 1009, 472, 990, 472)&#13;
drawText("GD_MD4:", 0, 1, true)&#13;
drawText("Mouse Moved", 0, 6, true)&#13;
drawText("(X, Y)", 0, 10, true)&#13;
drawPolyline("993, 473, 990, 472, 993, 470)&#13;
drawPolyline("879, 468, 844, 468, 844, 495)&#13;
drawText("GD_MD3:", 0, 1, true)&#13;
drawText("Mouse", 0, 6, true)&#13;
drawText("Released", 0, 11, true)&#13;
drawText("(X, Y)", 0, 15, true)&#13;
drawPolyline("846, 492, 844, 495, 843, 492)&#13;
drawPolyline("890, 533, 890, 576)&#13;
drawText("GD_MD3:", 0, 2, true)&#13;
drawText("Mouse", 0, 6, true)&#13;
drawText("Released", 0, 11, true)&#13;
drawText("(X, Y)", 0, 15, true)&#13;
drawPolyline("892, 573, 890, 576, 889, 573)&#13;
drawPolyline("491, 480, 491, 453)&#13;
drawText("GD_MD2:", 0, 1, true)&#13;
drawText("Mouse", 0, 6, true)&#13;
drawText("Pressed(X,", 0, 11, true)&#13;
drawText("Y)", 0, 15, true)&#13;
drawPolyline("490, 456, 491, 453, 492, 456)&#13;
drawPolyline("422, 487, 387, 464)&#13;
drawText("GD_MD4:", 0, 2, true)&#13;
drawText("Mouse Moved", 0, 6, true)&#13;
drawText("(X, Y)", 0, 11, true)&#13;
drawPolyline("389, 467, 387, 464, 390, 465)&#13;
drawPolyline("422, 518, 387, 533)&#13;
drawText("GD_MD3:", 0, 1, true)&#13;
drawText("Mouse", 0, 6, true)&#13;
drawText("Released", 0, 10, true)&#13;
drawText("(X, Y)", 0, 15, true)&#13;
drawPolyline("390, 534, 387, 533, 390, 531)&#13;
drawPolyline("422, 422, 353, 422, 353, 433)&#13;
drawText("GD_MD4:", 0, 2, true)&#13;
drawText("Mouse Moved", 0, 6, true)&#13;
drawText("(X, Y)", 0, 11, true)&#13;
drawPolyline("354, 431, 353, 433, 351, 431)&#13;
drawPolyline("491, 407, 491, 376, 249, 376, 249, 564, 280, 564)&#13;
drawText("GD_MD3: Mouse", 0, 2, true)&#13;
drawText("Released(X, Y)", 0, 6, true)&#13;
drawPolyline("277, 563, 280, 564, 277, 565)&#13;
drawPolyline("280, 541, 264, 541, 264, 391, 468, 391, 468, 407)&#13;
drawText("GD_MD2: Mouse", 0, 1, true)&#13;
drawText("Pressed(X, Y)", 0, 6, true)&#13;
drawPolyline("469, 404, 468, 407, 467, 404)&#13;
drawPolyline("387, 445, 422, 445)&#13;
drawText("GD_MD2:", 0, 1, true)&#13;
drawText("Mouse", 0, 5, true)&#13;
drawText("Pressed(X,", 0, 10, true)&#13;
drawText("Y)", 0, 15, true)&#13;
drawPolyline("419, 444, 422, 445, 419, 446)&#13;
drawPolyline("299, 445, 284, 445, 284, 472, 299, 472)&#13;
drawText("GD_MD4:", 0, 1, true)&#13;
drawText("Mouse Moved", 0, 6, true)&#13;
drawText("(X, Y)", 0, 10, true)&#13;
drawPolyline("296, 470, 299, 472, 296, 473)&#13;
drawPolyline("322, 480, 322, 526)&#13;
drawText("GD_MD3:", 0, 1, true)&#13;
drawText("Mouse", 0, 6, true)&#13;
drawText("Released", 0, 10, true)&#13;
drawText("(X, Y)", 0, 15, true)&#13;
drawPolyline("324, 523, 322, 526, 321, 523)&#13;
drawPolyline("353, 526, 353, 480)&#13;
drawText("GD_MD4:", 0, 2, true)&#13;
drawText("Mouse Moved", 0, 6, true)&#13;
drawText("(X, Y)", 0, 11, true)&#13;
drawPolyline("351, 482, 353, 480, 354, 482)&#13;
drawPolyline("687, 353, 733, 353)&#13;
drawText("GD_MD19: Mouse", 0, 1, true)&#13;
drawText("Moved over Hotspot", 0, 6, true)&#13;
drawText("(X, Y)", 0, 10, true)&#13;
drawPolyline("730, 351, 733, 353, 730, 354)&#13;
drawPolyline("733, 337, 687, 337)&#13;
drawText("GD_MD4:", 0, 1, true)&#13;
drawText("Mouse Moved", 0, 6, true)&#13;
drawText("(X, Y)", 0, 11, true)&#13;
drawPolyline("690, 339, 687, 337, 690, 336)&#13;
drawPolyline("752, 322, 752, 299)&#13;
drawText("GD_MD2:", 0, 1, true)&#13;
drawText("Mouse", 0, 6, true)&#13;
drawText("Pressed(X,", 0, 10, true)&#13;
drawText("Y)", 0, 15, true)&#13;
drawPolyline("751, 302, 752, 299, 754, 302)&#13;
drawPolyline("879, 353, 837, 353)&#13;
drawText("GD_MD3:", 0, 1, true)&#13;
drawText("Mouse", 0, 6, true)&#13;
drawText("Released", 0, 10, true)&#13;
drawText("(X, Y)", 0, 15, true)&#13;
drawPolyline("840, 354, 837, 353, 840, 351)&#13;
drawPolyline("810, 299, 810, 322)&#13;
drawText("GD_MD3:", 0, 2, true)&#13;
drawText("Mouse", 0, 6, true)&#13;
drawText("Released", 0, 11, true)&#13;
drawText("(X, Y)", 0, 16, true)&#13;
drawPolyline("811, 319, 810, 322, 808, 319)&#13;
drawPolyline("879, 418, 856, 418, 856, 380, 879, 380)&#13;
drawText("GD_MD4:", 0, 1, true)&#13;
drawText("Mouse Moved", 0, 5, true)&#13;
drawText("(X, Y)", 0, 10, true)&#13;
drawPolyline("876, 378, 879, 380, 876, 381)&#13;
drawPolyline("867, 207, 979, 207, 979, 261)&#13;
drawText("GD_MD4:", 0, 1, true)&#13;
drawText("Mouse Moved", 0, 6, true)&#13;
drawText("(X, Y)", 0, 10], true)&#13;
drawPolylin...&gt; but was:&lt;...drawText("Press over[", 0, 6, true)&#13;
drawText("Symbol(X, Y)", 0, 11, true)&#13;
drawPolyline("804, 722, 802, 725, 801, 722)&#13;
drawPolyline("744, 691, 744, 798)&#13;
drawText("GD_MD12:", 0, 1, true)&#13;
drawText("Mouse Press", 0, 6, true)&#13;
drawText("over Selected", 0, 10, true)&#13;
drawText("Symbol(X, Y)", 0, 15, true)&#13;
drawPolyline("746, 795, 744, 798, 743, 795)&#13;
drawPolyline("679, 572, 679, 591)&#13;
drawText("GD_MD2: Mouse", 0, 2, true)&#13;
drawText("Pressed(X, Y)", 0, 6, true)&#13;
drawPolyline("681, 588, 679, 591, 678, 588)&#13;
drawPolyline("449, 744, 449, 921, 779, 921, 779, 898)&#13;
drawText("GD_MD4: Mouse", 0, 1, true)&#13;
drawText("Moved(X, Y)", 0, 5, true)&#13;
drawPolyline("778, 901, 779, 898, 780, 901)&#13;
drawPolyline("418, 744, 418, 936, 879, 936, 879, 599)&#13;
drawText("GD_MD3:", 0, 2, true)&#13;
drawText("Mouse", 0, 6, true)&#13;
drawText("Released(X,", 0, 11, true)&#13;
drawText("Y)", 0, 15, true)&#13;
drawPolyline("877, 601, 879, 599, 880, 601)&#13;
drawPolyline("506, 656, 506, 725, 487, 725)&#13;
drawText("GD_MD7:", 0, 1, true)&#13;
drawText("Shifted Mouse", 0, 6, true)&#13;
drawText("Press over", 0, 10, true)&#13;
drawText("Symbol(X, Y)", 0, 15, true)&#13;
drawPolyline("490, 727, 487, 725, 490, 724)&#13;
drawPolyline("587, 737, 587, 768)&#13;
drawText("GD_MD4:", 0, 2, true)&#13;
drawText("Mouse", 0, 6, true)&#13;
drawText("Moved(X,", 0, 11, true)&#13;
drawText("Y)", 0, 15, true)&#13;
drawPolyline("588, 765, 587, 768, 586, 765)&#13;
drawPolyline("629, 706, 817, 706, 817, 599)&#13;
drawText("GD_MD3:", 0, 2, true)&#13;
drawText("Mouse", 0, 6, true)&#13;
drawText("Released(X,", 0, 11, true)&#13;
drawText("Y)", 0, 15, true)&#13;
drawPolyline("816, 601, 817, 599, 819, 601)&#13;
drawPolyline("675, 725, 675, 718, 629, 718)&#13;
drawText("GD_MD11:", 0, 2, true)&#13;
drawText("Symbols", 0, 6, true)&#13;
drawText("Deselected(X,", 0, 11, true)&#13;
drawText("Y)", 0, 16, true)&#13;
drawPolyline("632, 719, 629, 718, 632, 716)&#13;
drawPolyline("583, 656, 583, 695)&#13;
drawText("GD_MD8: Shifted", 0, 1, true)&#13;
drawText("Mouse Press over", 0, 6, true)&#13;
drawText("Whitespace(X, Y)", 0, 10, true)&#13;
drawPolyline("585, 692, 583, 695, 582, 692)&#13;
drawPolyline("779, 771, 779, 852)&#13;
drawText("GD_MD4: Mouse", 0, 1, true)&#13;
drawText("Moved(X, Y)", 0, 6, true)&#13;
drawPolyline("780, 849, 779, 852, 778, 849)&#13;
drawPolyline("829, 725, 829, 599)&#13;
drawText("GD_MD3:", 0, 2, true)&#13;
drawText("Mouse", 0, 6, true)&#13;
drawText("Released(X,", 0, 11, true)&#13;
drawText("Y)", 0, 15, true)&#13;
drawPolyline("828, 601, 829, 599, 830, 601)&#13;
drawPolyline("587, 810, 587, 825)&#13;
drawText("GD_MD3: Mouse", 0, 1, true)&#13;
drawText("Released(X, Y)", 0, 6, true)&#13;
drawPolyline("588, 822, 587, 825, 586, 822)&#13;
drawPolyline("552, 779, 533, 779, 533, 798, 552, 798)&#13;
drawText("GD_MD4:", 0, 1, true)&#13;
drawText("Mouse", 0, 6, true)&#13;
drawText("Moved(X,", 0, 11, true)&#13;
drawText("Y)", 0, 15, true)&#13;
drawPolyline("550, 797, 552, 798, 550, 800)&#13;
drawPolyline("714, 864, 679, 864, 679, 887, 714, 887)&#13;
drawText("GD_MD4: Mouse", 0, 2, true)&#13;
drawText("Moved(X, Y)", 0, 6, true)&#13;
drawPolyline("711, 885, 714, 887, 711, 888)&#13;
drawPolyline("837, 875, 864, 875, 864, 599)&#13;
drawText("GD_MD3:", 0, 2, true)&#13;
drawText("Mouse", 0, 6, true)&#13;
drawText("Released(X,", 0, 11, true)&#13;
drawText("Y)", 0, 15, true)&#13;
drawPolyline("862, 601, 864, 599, 865, 601)&#13;
drawPolyline("744, 833, 744, 852)&#13;
drawText("GD_MD4:", 0, 2, true)&#13;
drawText("Mouse", 0, 6, true)&#13;
drawText("Moved(X,", 0, 11, true)&#13;
drawText("Y)", 0, 15, true)&#13;
drawPolyline("746, 849, 744, 852, 743, 849)&#13;
drawPolyline("629, 856, 645, 856, 645, 572)&#13;
drawText("GD_MD6:", 0, 2, true)&#13;
drawText("Done", 0, 6, true)&#13;
drawPolyline("643, 575, 645, 572, 646, 575)&#13;
drawPolyline("587, 572, 587, 587)&#13;
drawText("GD_MD5: Shift Mouse", 0, 1, true)&#13;
drawText("Pressed(X, Y)", 0, 6, true)&#13;
drawPolyline("588, 584, 587, 587, 586, 584)&#13;
drawPolyline("695, 541, 952, 541, 952, 599)&#13;
drawText("GD_MD13:", 0, 1, true)&#13;
drawText("Mouse", 0, 6, true)&#13;
drawText("Context", 0, 10, true)&#13;
drawText("Press(X, Y)", 0, 15, true)&#13;
drawPolyline("953, 596, 952, 599, 950, 596)&#13;
drawPolyline("672, 537, 672, 453, 729, 453)&#13;
drawText("GD_MD14: Space", 0, 1, true)&#13;
drawText("Pressed", 0, 6, true)&#13;
drawPolyline("726, 451, 729, 453, 726, 454)&#13;
drawPolyline("572, 537, 572, 518, 514, 518)&#13;
drawText("GD_MD16: Tool", 0, 1, true)&#13;
drawText("Activated", 0, 6, true)&#13;
drawPolyline("517, 519, 514, 518, 517, 516)&#13;
drawPolyline("618, 537, 618, 433)&#13;
drawText("GD_MD4:", 0, 1, true)&#13;
drawText("Mouse", 0, 5, true)&#13;
drawText("Moved(X,", 0, 10, true)&#13;
drawText("Y)", 0, 15, true)&#13;
drawPolyline("616, 436, 618, 433, 619, 436)&#13;
drawPolyline("729, 468, 683, 468, 683, 537)&#13;
drawText("GD_MD15:", 0, 2, true)&#13;
drawText("Space", 0, 6, true)&#13;
drawText("Released", 0, 11, true)&#13;
drawPolyline("684, 534, 683, 537, 682, 534)&#13;
drawPolyline("514, 506, 583, 506, 583, 537)&#13;
drawText("GD_MD17: Tool", 0, 1, true)&#13;
drawText("Deactivated", 0, 5, true)&#13;
drawPolyline("585, 534, 583, 537, 582, 534)&#13;
drawPolyline("387, 545, 564, 545)&#13;
drawText("GD_MD17: Tool", 0, 2, true)&#13;
drawText("Deactivated", 0, 6, true)&#13;
drawPolyline("561, 543, 564, 545, 561, 546)&#13;
drawPolyline("514, 441, 529, 441, 529, 495, 595, 495, 595, 537)&#13;
drawText("GD_MD17: Tool", 0, 1, true)&#13;
drawText("Deactivated", 0, 6, true)&#13;
drawPolyline("596, 534, 595, 537, 593, 534)&#13;
drawPolyline("318, 433, 318, 360, 549, 360, 549, 483, 606, 483, 606, 537)&#13;
drawText("GD_MD17:", 0, 1, true)&#13;
drawText("Tool", 0, 5, true)&#13;
drawText("Deactivated", 0, 10, true)&#13;
drawPolyline("608, 534, 606, 537, 605, 534)&#13;
drawPolyline("844, 576, 844, 564, 695, 564)&#13;
drawText("GD_MD6:", 0, 1, true)&#13;
drawText("Done", 0, 5, true)&#13;
drawPolyline("697, 565, 695, 564, 697, 563)&#13;
drawPolyline("656, 433, 656, 537)&#13;
drawText("GD_MD18:", 0, 1, true)&#13;
drawText("Mouse Moved", 0, 6, true)&#13;
drawText("over Whitespace", 0, 10, true)&#13;
drawPolyline("658, 534, 656, 537, 655, 534)&#13;
drawPolyline("764, 814, 848, 814, 848, 599)&#13;
drawText("GD_MD3:", 0, 2, true)&#13;
drawText("Mouse", 0, 6, true)&#13;
drawText("Released(X,", 0, 11, true)&#13;
drawText("Y)", 0, 15, true)&#13;
drawPolyline("847, 601, 848, 599, 850, 601)&#13;
drawPolyline("917, 652, 894, 652, 894, 599)&#13;
drawText("GD_MD3:", 0, 1, true)&#13;
drawText("Mouse", 0, 6, true)&#13;
drawText("Released(X,", 0, 10, true)&#13;
drawText("Y)", 0, 15, true)&#13;
drawPolyline("893, 601, 894, 599, 896, 601)&#13;
drawPolyline("817, 449, 879, 449)&#13;
drawText("GD_MD2:", 0, 2, true)&#13;
drawText("Mouse", 0, 6, true)&#13;
drawText("Pressed(X,", 0, 11, true)&#13;
drawText("Y)", 0, 15, true)&#13;
drawPolyline("876, 447, 879, 449, 876, 450)&#13;
drawPolyline("802, 510, 771, 510, 771, 480)&#13;
drawText("GD_MD6:", 0, 1, true)&#13;
drawText("Done", 0, 6, true)&#13;
drawPolyline("770, 482, 771, 480, 773, 482)&#13;
drawPolyline("940, 480, 940, 499)&#13;
drawText("GD_MD15:", 0, 2, true)&#13;
drawText("Space", 0, 6, true)&#13;
drawText("Released", 0, 11, true)&#13;
drawPolyline("942, 496, 940, 499, 939, 496)&#13;
drawPolyline("990, 449, 1009, 449, 1009, 472, 990, 472)&#13;
drawText("GD_MD4:", 0, 1, true)&#13;
drawText("Mouse", 0, 6, true)&#13;
drawText("Moved(X,", 0, 10, true)&#13;
drawText("Y)", 0, 15, true)&#13;
drawPolyline("993, 473, 990, 472, 993, 470)&#13;
drawPolyline("879, 468, 844, 468, 844, 495)&#13;
drawText("GD_MD3:", 0, 1, true)&#13;
drawText("Mouse", 0, 6, true)&#13;
drawText("Released(X,", 0, 11, true)&#13;
drawText("Y)", 0, 15, true)&#13;
drawPolyline("846, 492, 844, 495, 843, 492)&#13;
drawPolyline("890, 533, 890, 576)&#13;
drawText("GD_MD3:", 0, 2, true)&#13;
drawText("Mouse", 0, 6, true)&#13;
drawText("Released(X,", 0, 11, true)&#13;
drawText("Y)", 0, 15, true)&#13;
drawPolyline("892, 573, 890, 576, 889, 573)&#13;
drawPolyline("491, 480, 491, 453)&#13;
drawText("GD_MD2:", 0, 1, true)&#13;
drawText("Mouse", 0, 6, true)&#13;
drawText("Pressed(X,", 0, 11, true)&#13;
drawText("Y)", 0, 15, true)&#13;
drawPolyline("490, 456, 491, 453, 492, 456)&#13;
drawPolyline("422, 487, 387, 464)&#13;
drawText("GD_MD4:", 0, 2, true)&#13;
drawText("Mouse", 0, 6, true)&#13;
drawText("Moved(X,", 0, 11, true)&#13;
drawText("Y)", 0, 15, true)&#13;
drawPolyline("389, 467, 387, 464, 390, 465)&#13;
drawPolyline("422, 518, 387, 533)&#13;
drawText("GD_MD3:", 0, 1, true)&#13;
drawText("Mouse", 0, 6, true)&#13;
drawText("Released(X,", 0, 10, true)&#13;
drawText("Y)", 0, 15, true)&#13;
drawPolyline("390, 534, 387, 533, 390, 531)&#13;
drawPolyline("422, 422, 353, 422, 353, 433)&#13;
drawText("GD_MD4:", 0, 2, true)&#13;
drawText("Mouse", 0, 6, true)&#13;
drawText("Moved(X,", 0, 11, true)&#13;
drawText("Y)", 0, 15, true)&#13;
drawPolyline("354, 431, 353, 433, 351, 431)&#13;
drawPolyline("491, 407, 491, 376, 249, 376, 249, 564, 280, 564)&#13;
drawText("GD_MD3: Mouse", 0, 2, true)&#13;
drawText("Released(X, Y)", 0, 6, true)&#13;
drawPolyline("277, 563, 280, 564, 277, 565)&#13;
drawPolyline("280, 541, 264, 541, 264, 391, 468, 391, 468, 407)&#13;
drawText("GD_MD2: Mouse", 0, 1, true)&#13;
drawText("Pressed(X, Y)", 0, 6, true)&#13;
drawPolyline("469, 404, 468, 407, 467, 404)&#13;
drawPolyline("387, 445, 422, 445)&#13;
drawText("GD_MD2:", 0, 1, true)&#13;
drawText("Mouse", 0, 5, true)&#13;
drawText("Pressed(X,", 0, 10, true)&#13;
drawText("Y)", 0, 15, true)&#13;
drawPolyline("419, 444, 422, 445, 419, 446)&#13;
drawPolyline("299, 445, 284, 445, 284, 472, 299, 472)&#13;
drawText("GD_MD4:", 0, 1, true)&#13;
drawText("Mouse", 0, 6, true)&#13;
drawText("Moved(X,", 0, 10, true)&#13;
drawText("Y)", 0, 15, true)&#13;
drawPolyline("296, 470, 299, 472, 296, 473)&#13;
drawPolyline("322, 480, 322, 526)&#13;
drawText("GD_MD3:", 0, 1, true)&#13;
drawText("Mouse", 0, 6, true)&#13;
drawText("Released(X,", 0, 10, true)&#13;
drawText("Y)", 0, 15, true)&#13;
drawPolyline("324, 523, 322, 526, 321, 523)&#13;
drawPolyline("353, 526, 353, 480)&#13;
drawText("GD_MD4:", 0, 2, true)&#13;
drawText("Mouse", 0, 6, true)&#13;
drawText("Moved(X,", 0, 11, true)&#13;
drawText("Y)", 0, 15, true)&#13;
drawPolyline("351, 482, 353, 480, 354, 482)&#13;
drawPolyline("687, 353, 733, 353)&#13;
drawText("GD_MD19: Mouse", 0, 1, true)&#13;
drawText("Moved over", 0, 6, true)&#13;
drawText("Hotspot(X, Y)", 0, 10, true)&#13;
drawPolyline("730, 351, 733, 353, 730, 354)&#13;
drawPolyline("733, 337, 687, 337)&#13;
drawText("GD_MD4:", 0, 1, true)&#13;
drawText("Mouse", 0, 6, true)&#13;
drawText("Moved(X,", 0, 11, true)&#13;
drawText("Y)", 0, 15, true)&#13;
drawPolyline("690, 339, 687, 337, 690, 336)&#13;
drawPolyline("752, 322, 752, 299)&#13;
drawText("GD_MD2:", 0, 1, true)&#13;
drawText("Mouse", 0, 6, true)&#13;
drawText("Pressed(X,", 0, 10, true)&#13;
drawText("Y)", 0, 15, true)&#13;
drawPolyline("751, 302, 752, 299, 754, 302)&#13;
drawPolyline("879, 353, 837, 353)&#13;
drawText("GD_MD3:", 0, 1, true)&#13;
drawText("Mouse", 0, 6, true)&#13;
drawText("Released(X,", 0, 10, true)&#13;
drawText("Y)", 0, 15, true)&#13;
drawPolyline("840, 354, 837, 353, 840, 351)&#13;
drawPolyline("810, 299, 810, 322)&#13;
drawText("GD_MD3:", 0, 2, true)&#13;
drawText("Mouse", 0, 6, true)&#13;
drawText("Released(X,", 0, 11, true)&#13;
drawText("Y)", 0, 16, true)&#13;
drawPolyline("811, 319, 810, 322, 808, 319)&#13;
drawPolyline("879, 418, 856, 418, 856, 380, 879, 380)&#13;
drawText("GD_MD4:", 0, 1, true)&#13;
drawText("Mouse", 0, 5, true)&#13;
drawText("Moved(X,", 0, 10, true)&#13;
drawText("Y)", 0, 15, true)&#13;
drawPolyline("876, 378, 879, 380, 876, 381)&#13;
drawPolyline("867, 207, 979, 207, 979, 261)&#13;
drawText("GD_MD4:", 0, 1, true)&#13;
drawText("Mouse", 0, 6, true)&#13;
drawText("Moved(X,", 0, 10, true)&#13;
drawText("Y)", 0, 15], true)&#13;
drawPolylin...&gt;&#13;
	at junit.framework.Assert.assertEquals(Assert.java:81)&#13;
	at com.mentor.nucleus.bp.ui.canvas.test.CanvasTest.doTestDiagram(CanvasTest.java:154)&#13;
	at com.mentor.nucleus.bp.ui.canvas.test.OOAofOOATest.testOOAofOOAModelStateChart(OOAofOOATest.java:160)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at junit.framework.TestCase.runTest(TestCase.java:168)&#13;
	at junit.framework.TestCase.runBare(TestCase.java:134)&#13;
	at junit.framework.TestResult$1.protect(TestResult.java:110)&#13;
	at junit.framework.TestResult.runProtected(TestResult.java:128)&#13;
	at junit.framework.TestResult.run(TestResult.java:113)&#13;
	at junit.framework.TestCase.run(TestCase.java:124)&#13;
	at junit.framework.TestSuite.runTest(TestSuite.java:243)&#13;
	at junit.framework.TestSuite.run(TestSuite.java:238)&#13;
	at junit.framework.TestSuite.runTest(TestSuite.java:243)&#13;
	at junit.framework.TestSuite.run(TestSuite.java:238)&#13;
	at org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run(JUnit3TestReference.java:130)&#13;
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)&#13;
	at org.eclipse.pde.internal.junit.runtime.RemotePluginTestRunner.main(RemotePluginTestRunner.java:62)&#13;
	at org.eclipse.pde.internal.junit.runtime.PlatformUITestHarness$1.run(PlatformUITestHarness.java:47)&#13;
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)&#13;
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:135)&#13;
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4140)&#13;
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3757)&#13;
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2701)&#13;
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2665)&#13;
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2499)&#13;
	at org.eclipse.ui.internal.Workbench$7.run(Workbench.java:679)&#13;
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)&#13;
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:668)&#13;
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)&#13;
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:123)&#13;
	at org.eclipse.pde.internal.junit.runtime.NonUIThreadTestApplication.runApp(NonUIThreadTestApplication.java:54)&#13;
	at org.eclipse.pde.internal.junit.runtime.UITestApplication.runApp(UITestApplication.java:41)&#13;
	at org.eclipse.pde.internal.junit.runtime.NonUIThreadTestApplication.start(NonUIThreadTestApplication.java:48)&#13;
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:196)&#13;
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)&#13;
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)&#13;
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:344)&#13;
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:622)&#13;
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:577)&#13;
	at org.eclipse.equinox.launcher.Main.run(Main.java:1410)&#13;
	at org.eclipse.equinox.launcher.Main.main(Main.java:1386)&#13;
&#13;
</failure>
      </testcase>
      <testcase name="testOOAofOOAToolStateChart" classname="com.mentor.nucleus.bp.ui.canvas.test.OOAofOOATest" time="0.922"/>
      <testcase name="testOOAofOOANoodeToolStateChart" classname="com.mentor.nucleus.bp.ui.canvas.test.OOAofOOATest" time="2.044">
        <failure>
          <expected>drawText(" 1. Idle", 927, 635, true)&#13;
drawline(925, 648, 1226, 648)&#13;
drawText("entry/GRAPH::setMouseCursor(type:"default");", 927, 651, true)&#13;
drawText(" 2. Waiting for Initial Position", 927, 890, true)&#13;
drawline(925, 903, 1226, 903)&#13;
drawText("entry/GRAPH::setMouseCursor(type:"pencil");select one canvas related by self-&gt;GD_TOOL[R1012]-&gt;GD_MD[R10...CLIENT::unSelectAll();CLIENT::addToSelection(element:canvas.represents);", 927, 906, true)&#13;
drawText(" 3. Initializing Shape", 927, 1183, true)&#13;
drawline(925, 1195, 1226, 1195)&#13;
drawText("entry/select one canvas related by self-&gt;GD_TOOL[R1012]-&gt;GD_MD[R10...canvas.RRectX = rcvd_evt.X;canvas.RRectY = rcvd_evt.Y;canvas.RRectW = 0;canvas.RRectH = 0;", 927, 1199, true)&#13;
drawText(" 4. Dragging Shape", 1342, 1164, true)&#13;
drawline(1340, 1177, 1660, 1177)&#13;
drawText("entry/select one canvas related by self-&gt;GD_TOOL[R1012]-&gt;GD_MD[R1015];select one elem_spec related by self-&gt;GD_TOOL[R1012]-&gt;GD_ES[R1014];if (elem_spec.isFixedAspectRatio)  // Calculate aspect ratio (floating point)  floatHeight = 1.0;  floatWidth = 1.0;  floatHeight = elem_spec.defaultHeight;  floatWidth = elem_spec.defaultWidth;  aspectRatio =  floatHeight/floatWidth ;  //  canvas.RRectW = canvas.RRectW + rcvd_evt.X;  canvas.RRectH = canvas.RRectW * aspectRatio;else  canvas.RRectW = canvas.RRectW + rcvd_evt.X;  canvas.RRectH = canvas.RRectH + rcvd_evt.Y;end if;canvas.drawingRRect = true;", 1342, 1180, true)&#13;
drawText(" 5. Creating Element", 1342, 701, true)&#13;
drawline(1340, 714, 1660, 714)&#13;
drawText("entry/select one canvas related by self-&gt;GD_TOOL[R1012]-&gt;GD_MD[R1015];canvas.drawingRRect = false;select one parent related by self-&gt;GD_TOOL[R1012];//// Create the new graphical element//create object instance elem of GD_GE;// GE_ID is an integer, so we must explicity allocate an id.select many elems from instances of GD_GE;elem.GE_ID = cardinality elems;// id allocatedcreate object instance shape of GD_SHP;//// Set up shape co-ordinates from rectangle size.// Note that the rectangle is captured as raw co-ordinates for fast drawing// so must convert to absolute canvas co-ordinate system before assignm...//shape.setNW_X(newValue:(canvas.RRectX / canvas.ZoomFactor) + canva...shape.setNW_Y(newValue: (canvas.RRectY / canvas.ZoomFactor) + canv...shape.setSE_X(newValue:((canvas.RRectX + canvas.RRectW) / canvas.Zo...shape.setSE_Y(newValue:((canvas.RRectY + canvas.RRectH) / canvas.Zo...relate elem to shape across R1006;relate elem to canvas across R1007;elem.waitingForClientElement = true;select one elem_spec related by self-&gt;GD_TOOL[R1012]-&gt;GD_ES[R1014];relate elem to elem_spec across R1010;//// Now create the client instance//CLIENT::invoke(method:parent.Method, on:canvas.represents);//// The work is done, get ready for another node creation//generate GD_NDT4:Done to self;", 1342, 717, true)&#13;
drawPolyline("991, 726, 991, 887)&#13;
drawText("GD_NDT5:", 0, 1, true)&#13;
drawText("Activate", 0, 13, true)&#13;
drawPolyline("994, 880, 991, 887, 987, 880)&#13;
drawPolyline("1076, 887, 1076, 821, 1142, 726)&#13;
drawText("GD_NDT6:", 0, 2, true)&#13;
drawText("Deactivate", 0, 13, true)&#13;
drawPolyline("1135, 730, 1142, 726, 1141, 734)&#13;
drawPolyline("1076, 972, 1076, 1180)&#13;
drawText("GD_NDT1:", 0, 2, true)&#13;
drawText("Mouse Down(X,", 0, 13, true)&#13;
drawText("Y)", 0, 24, true)&#13;
drawPolyline("1079, 1172, 1076, 1180, 1072, 1172)&#13;
drawPolyline("1340, 774, 1161, 774, 1161, 887)&#13;
drawText("GD_NDT4:", 0, 2, true)&#13;
drawText("Done", 0, 13, true)&#13;
drawPolyline("1164, 880, 1161, 887, 1157, 880)&#13;
drawPolyline("1227, 1236, 1340, 1236)&#13;
drawText("GD_NDT3:", 0, 2, true)&#13;
drawText("Mouse Moved(X,", 0, 13, true)&#13;
drawText("Y)", 0, 24, true)&#13;
drawPolyline("1333, 1233, 1340, 1236, 1333, 1240)&#13;
drawPolyline("1434, 1161, 1406, 1123)&#13;
drawText("GD_NDT2:", 0, 2, true)&#13;
drawText("Mouse Up(X, Y)", 0, 13, true)&#13;
drawPolyline("1407, 1131, 1406, 1123, 1413, 1126)&#13;
drawPolyline("1519, 1378, 1519, 1416, 1368, 1416, 1368, 1378)&#13;
drawText("GD_NDT3:", 0, 2, true)&#13;
drawText("Mouse Moved(X,", 0, 14, true)&#13;
drawText("Y)", 0, 25, true)&#13;
drawPolyline("1365, 1385, 1368, 1378, 1372, 1385)</expected>
          <actual>drawText(" 1. Idle", 911, 625, true)&#13;
drawline(909, 637, 1205, 637)&#13;
drawText("entry/GRAPH::setMouseCursor(type:"default");", 911, 641, true)&#13;
drawText(" 2. Waiting for Initial Position", 911, 876, true)&#13;
drawline(909, 887, 1205, 887)&#13;
drawText("entry/GRAPH::setMouseCursor(type:"pencil");select one canvas related by self-&gt;GD_TOOL[R1012]-&gt;GD_MD[R10...CLIENT::unSelectAll();CLIENT::addToSelection(element:canvas.represents);", 911, 891, true)&#13;
drawText(" 3. Initializing Shape", 911, 1164, true)&#13;
drawline(909, 1175, 1205, 1175)&#13;
drawText("entry/select one canvas related by self-&gt;GD_TOOL[R1012]-&gt;GD_MD[R10...canvas.RRectX = rcvd_evt.X;canvas.RRectY = rcvd_evt.Y;canvas.RRectW = 0;canvas.RRectH = 0;", 911, 1179, true)&#13;
drawText(" 4. Dragging Shape", 1320, 1145, true)&#13;
drawline(1317, 1157, 1632, 1157)&#13;
drawText("entry/select one canvas related by self-&gt;GD_TOOL[R1012]-&gt;GD_MD[R1015];select one elem_spec related by self-&gt;GD_TOOL[R1012]-&gt;GD_ES[R1014];if (elem_spec.isFixedAspectRatio)  // Calculate aspect ratio (floating point)  floatHeight = 1.0;  floatWidth = 1.0;  floatHeight = elem_spec.defaultHeight;  floatWidth = elem_spec.defaultWidth;  aspectRatio =  floatHeight/floatWidth ;  //  canvas.RRectW = canvas.RRectW + rcvd_evt.X;  canvas.RRectH = canvas.RRectW * aspectRatio;else  canvas.RRectW = canvas.RRectW + rcvd_evt.X;  canvas.RRectH = canvas.RRectH + rcvd_evt.Y;end if;canvas.drawingRRect = true;", 1320, 1161, true)&#13;
drawText(" 5. Creating Element", 1320, 690, true)&#13;
drawline(1317, 702, 1632, 702)&#13;
drawText("entry/select one canvas related by self-&gt;GD_TOOL[R1012]-&gt;GD_MD[R1015];canvas.drawingRRect = false;select one parent related by self-&gt;GD_TOOL[R1012];//// Create the new graphical element//create object instance elem of GD_GE;// GE_ID is an integer, so we must explicity allocate an id.select many elems from instances of GD_GE;elem.GE_ID = cardinality elems;// id allocatedcreate object instance shape of GD_SHP;//// Set up shape co-ordinates from rectangle size.// Note that the rectangle is captured as raw co-ordinates for fast drawing// so must convert to absolute canvas co-ordinate system before assignm...//shape.setNW_X(newValue:(canvas.RRectX / canvas.ZoomFactor) + canva...shape.setNW_Y(newValue: (canvas.RRectY / canvas.ZoomFactor) + canv...shape.setSE_X(newValue:((canvas.RRectX + canvas.RRectW) / canvas.Zo...shape.setSE_Y(newValue:((canvas.RRectY + canvas.RRectH) / canvas.Zo...relate elem to shape across R1006;relate elem to canvas across R1007;elem.waitingForClientElement = true;select one elem_spec related by self-&gt;GD_TOOL[R1012]-&gt;GD_ES[R1014];relate elem to elem_spec across R1010;//// Now create the client instance//CLIENT::invoke(method:parent.Method, on:canvas.represents);//// The work is done, get ready for another node creation//generate GD_NDT4:Done to self;", 1320, 706, true)&#13;
drawPolyline("974, 714, 974, 872)&#13;
drawText("GD_NDT5:", 0, 2, true)&#13;
drawText("Activate", 0, 13, true)&#13;
drawPolyline("977, 865, 974, 872, 970, 865)&#13;
drawPolyline("1057, 872, 1057, 807, 1122, 714)&#13;
drawText("GD_NDT6:", 0, 2, true)&#13;
drawText("Deactivate", 0, 13, true)&#13;
drawPolyline("1115, 718, 1122, 714, 1121, 722)&#13;
drawPolyline("1057, 955, 1057, 1160)&#13;
drawText("GD_NDT1:", 0, 1, true)&#13;
drawText("Mouse", 0, 12, true)&#13;
drawText("Down(X, Y)", 0, 23, true)&#13;
drawPolyline("1061, 1153, 1057, 1160, 1054, 1153)&#13;
drawPolyline("1317, 760, 1141, 760, 1141, 872)&#13;
drawText("GD_NDT4:", 0, 1, true)&#13;
drawText("Done", 0, 12, true)&#13;
drawPolyline("1144, 865, 1141, 872, 1137, 865)&#13;
drawPolyline("1206, 1215, 1317, 1215)&#13;
drawText("GD_NDT3:", 0, 1, true)&#13;
drawText("Mouse", 0, 12, true)&#13;
drawText("Moved(X,", 0, 23, true)&#13;
drawText("Y)", 0, 34, true)&#13;
drawPolyline("1310, 1212, 1317, 1215, 1310, 1219)&#13;
drawPolyline("1410, 1141, 1382, 1104)&#13;
drawText("GD_NDT2:", 0, 2, true)&#13;
drawText("Mouse Up(X, Y)", 0, 13, true)&#13;
drawPolyline("1383, 1111, 1382, 1104, 1389, 1107)&#13;
drawPolyline("1494, 1354, 1494, 1392, 1345, 1392, 1345, 1354)&#13;
drawText("GD_NDT3:", 0, 2, true)&#13;
drawText("Mouse", 0, 13, true)&#13;
drawText("Moved(X,", 0, 24, true)&#13;
drawText("Y)", 0, 35, true)&#13;
drawPolyline("1342, 1361, 1345, 1354, 1349, 1361)</actual>junit.framework.ComparisonFailure: Actual results differ from those expected, file: 
5767179-8
 expected:&lt;...awText(" 1. Idle", 9[27, 635, true)&#13;
drawline(925, 648, 1226, 648)&#13;
drawText("entry/GRAPH::setMouseCursor(type:"default");", 927, 651, true)&#13;
drawText(" 2. Waiting for Initial Position", 927, 890, true)&#13;
drawline(925, 903, 1226, 903)&#13;
drawText("entry/GRAPH::setMouseCursor(type:"pencil");select one canvas related by self-&gt;GD_TOOL[R1012]-&gt;GD_MD[R10...CLIENT::unSelectAll();CLIENT::addToSelection(element:canvas.represents);", 927, 906, true)&#13;
drawText(" 3. Initializing Shape", 927, 1183, true)&#13;
drawline(925, 1195, 1226, 1195)&#13;
drawText("entry/select one canvas related by self-&gt;GD_TOOL[R1012]-&gt;GD_MD[R10...canvas.RRectX = rcvd_evt.X;canvas.RRectY = rcvd_evt.Y;canvas.RRectW = 0;canvas.RRectH = 0;", 927, 1199, true)&#13;
drawText(" 4. Dragging Shape", 1342, 1164, true)&#13;
drawline(1340, 1177, 1660, 1177)&#13;
drawText("entry/select one canvas related by self-&gt;GD_TOOL[R1012]-&gt;GD_MD[R1015];select one elem_spec related by self-&gt;GD_TOOL[R1012]-&gt;GD_ES[R1014];if (elem_spec.isFixedAspectRatio)  // Calculate aspect ratio (floating point)  floatHeight = 1.0;  floatWidth = 1.0;  floatHeight = elem_spec.defaultHeight;  floatWidth = elem_spec.defaultWidth;  aspectRatio =  floatHeight/floatWidth ;  //  canvas.RRectW = canvas.RRectW + rcvd_evt.X;  canvas.RRectH = canvas.RRectW * aspectRatio;else  canvas.RRectW = canvas.RRectW + rcvd_evt.X;  canvas.RRectH = canvas.RRectH + rcvd_evt.Y;end if;canvas.drawingRRect = true;", 1342, 1180, true)&#13;
drawText(" 5. Creating Element", 1342, 701, true)&#13;
drawline(1340, 714, 1660, 714)&#13;
drawText("entry/select one canvas related by self-&gt;GD_TOOL[R1012]-&gt;GD_MD[R1015];canvas.drawingRRect = false;select one parent related by self-&gt;GD_TOOL[R1012];//// Create the new graphical element//create object instance elem of GD_GE;// GE_ID is an integer, so we must explicity allocate an id.select many elems from instances of GD_GE;elem.GE_ID = cardinality elems;// id allocatedcreate object instance shape of GD_SHP;//// Set up shape co-ordinates from rectangle size.// Note that the rectangle is captured as raw co-ordinates for fast drawing// so must convert to absolute canvas co-ordinate system before assignm...//shape.setNW_X(newValue:(canvas.RRectX / canvas.ZoomFactor) + canva...shape.setNW_Y(newValue: (canvas.RRectY / canvas.ZoomFactor) + canv...shape.setSE_X(newValue:((canvas.RRectX + canvas.RRectW) / canvas.Zo...shape.setSE_Y(newValue:((canvas.RRectY + canvas.RRectH) / canvas.Zo...relate elem to shape across R1006;relate elem to canvas across R1007;elem.waitingForClientElement = true;select one elem_spec related by self-&gt;GD_TOOL[R1012]-&gt;GD_ES[R1014];relate elem to elem_spec across R1010;//// Now create the client instance//CLIENT::invoke(method:parent.Method, on:canvas.represents);//// The work is done, get ready for another node creation//generate GD_NDT4:Done to self;", 1342, 717, true)&#13;
drawPolyline("991, 726, 991, 887)&#13;
drawText("GD_NDT5:", 0, 1, true)&#13;
drawText("Activate", 0, 13, true)&#13;
drawPolyline("994, 880, 991, 887, 987, 880)&#13;
drawPolyline("1076, 887, 1076, 821, 1142, 726)&#13;
drawText("GD_NDT6:", 0, 2, true)&#13;
drawText("Deactivate", 0, 13, true)&#13;
drawPolyline("1135, 730, 1142, 726, 1141, 734)&#13;
drawPolyline("1076, 972, 1076, 1180)&#13;
drawText("GD_NDT1:", 0, 2, true)&#13;
drawText("Mouse Down(X,", 0, 13, true)&#13;
drawText("Y)", 0, 24, true)&#13;
drawPolyline("1079, 1172, 1076, 1180, 1072, 1172)&#13;
drawPolyline("1340, 774, 1161, 774, 1161, 887)&#13;
drawText("GD_NDT4:", 0, 2, true)&#13;
drawText("Done", 0, 13, true)&#13;
drawPolyline("1164, 880, 1161, 887, 1157, 880)&#13;
drawPolyline("1227, 1236, 1340, 1236)&#13;
drawText("GD_NDT3:", 0, 2, true)&#13;
drawText("Mouse Moved(X,", 0, 13, true)&#13;
drawText("Y)", 0, 24, true)&#13;
drawPolyline("1333, 1233, 1340, 1236, 1333, 1240)&#13;
drawPolyline("1434, 1161, 1406, 1123)&#13;
drawText("GD_NDT2:", 0, 2, true)&#13;
drawText("Mouse Up(X, Y)", 0, 13, true)&#13;
drawPolyline("1407, 1131, 1406, 1123, 1413, 1126)&#13;
drawPolyline("1519, 1378, 1519, 1416, 1368, 1416, 1368, 1378)&#13;
drawText("GD_NDT3:", 0, 2, true)&#13;
drawText("Mouse Moved(X,", 0, 14, true)&#13;
drawText("Y)", 0, 25, true)&#13;
drawPolyline("1365, 1385, 1368, 1378, 1372, 1385])&gt; but was:&lt;...awText(" 1. Idle", 9[11, 625, true)&#13;
drawline(909, 637, 1205, 637)&#13;
drawText("entry/GRAPH::setMouseCursor(type:"default");", 911, 641, true)&#13;
drawText(" 2. Waiting for Initial Position", 911, 876, true)&#13;
drawline(909, 887, 1205, 887)&#13;
drawText("entry/GRAPH::setMouseCursor(type:"pencil");select one canvas related by self-&gt;GD_TOOL[R1012]-&gt;GD_MD[R10...CLIENT::unSelectAll();CLIENT::addToSelection(element:canvas.represents);", 911, 891, true)&#13;
drawText(" 3. Initializing Shape", 911, 1164, true)&#13;
drawline(909, 1175, 1205, 1175)&#13;
drawText("entry/select one canvas related by self-&gt;GD_TOOL[R1012]-&gt;GD_MD[R10...canvas.RRectX = rcvd_evt.X;canvas.RRectY = rcvd_evt.Y;canvas.RRectW = 0;canvas.RRectH = 0;", 911, 1179, true)&#13;
drawText(" 4. Dragging Shape", 1320, 1145, true)&#13;
drawline(1317, 1157, 1632, 1157)&#13;
drawText("entry/select one canvas related by self-&gt;GD_TOOL[R1012]-&gt;GD_MD[R1015];select one elem_spec related by self-&gt;GD_TOOL[R1012]-&gt;GD_ES[R1014];if (elem_spec.isFixedAspectRatio)  // Calculate aspect ratio (floating point)  floatHeight = 1.0;  floatWidth = 1.0;  floatHeight = elem_spec.defaultHeight;  floatWidth = elem_spec.defaultWidth;  aspectRatio =  floatHeight/floatWidth ;  //  canvas.RRectW = canvas.RRectW + rcvd_evt.X;  canvas.RRectH = canvas.RRectW * aspectRatio;else  canvas.RRectW = canvas.RRectW + rcvd_evt.X;  canvas.RRectH = canvas.RRectH + rcvd_evt.Y;end if;canvas.drawingRRect = true;", 1320, 1161, true)&#13;
drawText(" 5. Creating Element", 1320, 690, true)&#13;
drawline(1317, 702, 1632, 702)&#13;
drawText("entry/select one canvas related by self-&gt;GD_TOOL[R1012]-&gt;GD_MD[R1015];canvas.drawingRRect = false;select one parent related by self-&gt;GD_TOOL[R1012];//// Create the new graphical element//create object instance elem of GD_GE;// GE_ID is an integer, so we must explicity allocate an id.select many elems from instances of GD_GE;elem.GE_ID = cardinality elems;// id allocatedcreate object instance shape of GD_SHP;//// Set up shape co-ordinates from rectangle size.// Note that the rectangle is captured as raw co-ordinates for fast drawing// so must convert to absolute canvas co-ordinate system before assignm...//shape.setNW_X(newValue:(canvas.RRectX / canvas.ZoomFactor) + canva...shape.setNW_Y(newValue: (canvas.RRectY / canvas.ZoomFactor) + canv...shape.setSE_X(newValue:((canvas.RRectX + canvas.RRectW) / canvas.Zo...shape.setSE_Y(newValue:((canvas.RRectY + canvas.RRectH) / canvas.Zo...relate elem to shape across R1006;relate elem to canvas across R1007;elem.waitingForClientElement = true;select one elem_spec related by self-&gt;GD_TOOL[R1012]-&gt;GD_ES[R1014];relate elem to elem_spec across R1010;//// Now create the client instance//CLIENT::invoke(method:parent.Method, on:canvas.represents);//// The work is done, get ready for another node creation//generate GD_NDT4:Done to self;", 1320, 706, true)&#13;
drawPolyline("974, 714, 974, 872)&#13;
drawText("GD_NDT5:", 0, 2, true)&#13;
drawText("Activate", 0, 13, true)&#13;
drawPolyline("977, 865, 974, 872, 970, 865)&#13;
drawPolyline("1057, 872, 1057, 807, 1122, 714)&#13;
drawText("GD_NDT6:", 0, 2, true)&#13;
drawText("Deactivate", 0, 13, true)&#13;
drawPolyline("1115, 718, 1122, 714, 1121, 722)&#13;
drawPolyline("1057, 955, 1057, 1160)&#13;
drawText("GD_NDT1:", 0, 1, true)&#13;
drawText("Mouse", 0, 12, true)&#13;
drawText("Down(X, Y)", 0, 23, true)&#13;
drawPolyline("1061, 1153, 1057, 1160, 1054, 1153)&#13;
drawPolyline("1317, 760, 1141, 760, 1141, 872)&#13;
drawText("GD_NDT4:", 0, 1, true)&#13;
drawText("Done", 0, 12, true)&#13;
drawPolyline("1144, 865, 1141, 872, 1137, 865)&#13;
drawPolyline("1206, 1215, 1317, 1215)&#13;
drawText("GD_NDT3:", 0, 1, true)&#13;
drawText("Mouse", 0, 12, true)&#13;
drawText("Moved(X,", 0, 23, true)&#13;
drawText("Y)", 0, 34, true)&#13;
drawPolyline("1310, 1212, 1317, 1215, 1310, 1219)&#13;
drawPolyline("1410, 1141, 1382, 1104)&#13;
drawText("GD_NDT2:", 0, 2, true)&#13;
drawText("Mouse Up(X, Y)", 0, 13, true)&#13;
drawPolyline("1383, 1111, 1382, 1104, 1389, 1107)&#13;
drawPolyline("1494, 1354, 1494, 1392, 1345, 1392, 1345, 1354)&#13;
drawText("GD_NDT3:", 0, 2, true)&#13;
drawText("Mouse", 0, 13, true)&#13;
drawText("Moved(X,", 0, 24, true)&#13;
drawText("Y)", 0, 35, true)&#13;
drawPolyline("1342, 1361, 1345, 1354, 1349, 1361])&gt;&#13;
	at junit.framework.Assert.assertEquals(Assert.java:81)&#13;
	at com.mentor.nucleus.bp.ui.canvas.test.CanvasTest.doTestDiagram(CanvasTest.java:154)&#13;
	at com.mentor.nucleus.bp.ui.canvas.test.OOAofOOATest.testOOAofOOANoodeToolStateChart(OOAofOOATest.java:174)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at junit.framework.TestCase.runTest(TestCase.java:168)&#13;
	at junit.framework.TestCase.runBare(TestCase.java:134)&#13;
	at junit.framework.TestResult$1.protect(TestResult.java:110)&#13;
	at junit.framework.TestResult.runProtected(TestResult.java:128)&#13;
	at junit.framework.TestResult.run(TestResult.java:113)&#13;
	at junit.framework.TestCase.run(TestCase.java:124)&#13;
	at junit.framework.TestSuite.runTest(TestSuite.java:243)&#13;
	at junit.framework.TestSuite.run(TestSuite.java:238)&#13;
	at junit.framework.TestSuite.runTest(TestSuite.java:243)&#13;
	at junit.framework.TestSuite.run(TestSuite.java:238)&#13;
	at org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run(JUnit3TestReference.java:130)&#13;
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)&#13;
	at org.eclipse.pde.internal.junit.runtime.RemotePluginTestRunner.main(RemotePluginTestRunner.java:62)&#13;
	at org.eclipse.pde.internal.junit.runtime.PlatformUITestHarness$1.run(PlatformUITestHarness.java:47)&#13;
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)&#13;
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:135)&#13;
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4140)&#13;
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3757)&#13;
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2701)&#13;
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2665)&#13;
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2499)&#13;
	at org.eclipse.ui.internal.Workbench$7.run(Workbench.java:679)&#13;
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)&#13;
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:668)&#13;
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)&#13;
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:123)&#13;
	at org.eclipse.pde.internal.junit.runtime.NonUIThreadTestApplication.runApp(NonUIThreadTestApplication.java:54)&#13;
	at org.eclipse.pde.internal.junit.runtime.UITestApplication.runApp(UITestApplication.java:41)&#13;
	at org.eclipse.pde.internal.junit.runtime.NonUIThreadTestApplication.start(NonUIThreadTestApplication.java:48)&#13;
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:196)&#13;
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)&#13;
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)&#13;
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:344)&#13;
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:622)&#13;
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:577)&#13;
	at org.eclipse.equinox.launcher.Main.run(Main.java:1410)&#13;
	at org.eclipse.equinox.launcher.Main.main(Main.java:1386)&#13;
&#13;
</failure>
      </testcase>
    </testsuite>
    <testsuite name="com.mentor.nucleus.bp.ui.canvas.test.ListenerTest" time="6.806">
      <testcase name="testDPDListener" classname="com.mentor.nucleus.bp.ui.canvas.test.ListenerTest" time="0.734"/>
      <testcase name="testDTPListener" classname="com.mentor.nucleus.bp.ui.canvas.test.ListenerTest" time="1.171"/>
      <testcase name="testFPListener" classname="com.mentor.nucleus.bp.ui.canvas.test.ListenerTest" time="0.812"/>
      <testcase name="testEEPListener" classname="com.mentor.nucleus.bp.ui.canvas.test.ListenerTest" time="1.202"/>
      <testcase name="testCDListener" classname="com.mentor.nucleus.bp.ui.canvas.test.ListenerTest" time="0.904"/>
      <testcase name="testISDListener" classname="com.mentor.nucleus.bp.ui.canvas.test.ListenerTest" time="1.062"/>
      <testcase name="testCSDListener" classname="com.mentor.nucleus.bp.ui.canvas.test.ListenerTest" time="0.921"/>
    </testsuite>
    <testsuite name="com.mentor.nucleus.bp.ui.canvas.test.CanvasCreationTest" time="82.798">
      <testcase name="testCreateSubsystemWithOneClass" classname="com.mentor.nucleus.bp.ui.canvas.test.CanvasCreationTest" time="4.415"/>
      <testcase name="testCreateFunctionPackage" classname="com.mentor.nucleus.bp.ui.canvas.test.CanvasCreationTest" time="1.109"/>
      <testcase name="testCreateDataTypePackage" classname="com.mentor.nucleus.bp.ui.canvas.test.CanvasCreationTest" time="0.858"/>
      <testcase name="testCreateEEPackage" classname="com.mentor.nucleus.bp.ui.canvas.test.CanvasCreationTest" time="1.171"/>
      <testcase name="testCreateISM" classname="com.mentor.nucleus.bp.ui.canvas.test.CanvasCreationTest" time="0.842"/>
      <testcase name="testCreateCSM" classname="com.mentor.nucleus.bp.ui.canvas.test.CanvasCreationTest" time="1.967"/>
      <testcase name="testCreateSubsystemInSubsystem" classname="com.mentor.nucleus.bp.ui.canvas.test.CanvasCreationTest" time="1.03"/>
      <testcase name="testCreateModelClassInSubsystem" classname="com.mentor.nucleus.bp.ui.canvas.test.CanvasCreationTest" time="4.151"/>
      <testcase name="testCreateImportedModelClassInSubsystem" classname="com.mentor.nucleus.bp.ui.canvas.test.CanvasCreationTest" time="3.916"/>
      <testcase name="testCreateFunctionPackageInFunctionPackage" classname="com.mentor.nucleus.bp.ui.canvas.test.CanvasCreationTest" time="1.265"/>
      <testcase name="testCreateDataTypePackageInDataTypePackage" classname="com.mentor.nucleus.bp.ui.canvas.test.CanvasCreationTest" time="1.186"/>
      <testcase name="testCreateUserDatatypeInDataTypePackage" classname="com.mentor.nucleus.bp.ui.canvas.test.CanvasCreationTest" time="3.697"/>
      <testcase name="testCreateEnumDatatypeInDataTypePackage" classname="com.mentor.nucleus.bp.ui.canvas.test.CanvasCreationTest" time="4.104"/>
      <testcase name="testCreateEEInEEPackage" classname="com.mentor.nucleus.bp.ui.canvas.test.CanvasCreationTest" time="3.948"/>
      <testcase name="testCreateEEPackageInEEPackage" classname="com.mentor.nucleus.bp.ui.canvas.test.CanvasCreationTest" time="1.436"/>
      <testcase name="testCreateStateInISM" classname="com.mentor.nucleus.bp.ui.canvas.test.CanvasCreationTest" time="3.915"/>
      <testcase name="testCreateStateInCSM" classname="com.mentor.nucleus.bp.ui.canvas.test.CanvasCreationTest" time="4.322"/>
      <testcase name="testCreateActivityInDomain" classname="com.mentor.nucleus.bp.ui.canvas.test.CanvasCreationTest" time="0.953"/>
      <testcase name="testCreateActivityInSS" classname="com.mentor.nucleus.bp.ui.canvas.test.CanvasCreationTest" time="1.14"/>
      <testcase name="testCreateActivityInActivity" classname="com.mentor.nucleus.bp.ui.canvas.test.CanvasCreationTest" time="1.108"/>
      <testcase name="testCreateActivityElements" classname="com.mentor.nucleus.bp.ui.canvas.test.CanvasCreationTest" time="36.265"/>
    </testsuite>
    <testsuite name="com.mentor.nucleus.bp.ui.canvas.test.ShapeResizeTest" time="27.472">
      <testcase name="testConnectorsAttachedAfterShapeResize" classname="com.mentor.nucleus.bp.ui.canvas.test.ShapeResizeTest" time="11.248"/>
      <testcase name="testResizeWorksAfterResizeUndo" classname="com.mentor.nucleus.bp.ui.canvas.test.ShapeResizeTest" time="13.12"/>
      <testcase name="testResizeWorksAfterCancelledMove" classname="com.mentor.nucleus.bp.ui.canvas.test.ShapeResizeTest" time="3.104"/>
      <testcase name="testResizeFixedAspectShape" classname="com.mentor.nucleus.bp.ui.canvas.test.ShapeResizeTest" time="0.0"/>
    </testsuite>
    <testsuite name="com.mentor.nucleus.bp.ui.canvas.test.CanvasEditorTestSuite" time="4.681">
      <testsuite name="com.mentor.nucleus.bp.ui.canvas.test.OpenCanvasEditor" time="4.681">
        <testcase name="testOpenPackageDiagram" classname="com.mentor.nucleus.bp.ui.canvas.test.OpenCanvasEditor" time="4.088"/>
        <testcase name="testOpenClassDiagram" classname="com.mentor.nucleus.bp.ui.canvas.test.OpenCanvasEditor" time="0.344"/>
        <testcase name="testOpenInstanceStateChartDiagram" classname="com.mentor.nucleus.bp.ui.canvas.test.OpenCanvasEditor" time="0.249"/>
      </testsuite>
      <testsuite name="com.mentor.nucleus.bp.ui.canvas.test.CloseCanvasEditor" time="0.0">
        <testcase name="testCloseTestCD" classname="com.mentor.nucleus.bp.ui.canvas.test.CloseCanvasEditor" time="0.0"/>
        <testcase name="testCloseDPD" classname="com.mentor.nucleus.bp.ui.canvas.test.CloseCanvasEditor" time="0.0"/>
        <testcase name="testCloseSC" classname="com.mentor.nucleus.bp.ui.canvas.test.CloseCanvasEditor" time="0.0"/>
      </testsuite>
    </testsuite>
    <testsuite name="com.mentor.nucleus.bp.ui.canvas.test.CreationTransitionTest" time="7.069">
      <testcase name="testDrawCreationTransition" classname="com.mentor.nucleus.bp.ui.canvas.test.CreationTransitionTest" time="7.069"/>
    </testsuite>
    <testsuite name="com.mentor.nucleus.bp.ui.canvas.test.I686ClearDatabaseTest" time="8.846">
      <testcase name="testClearDatabase" classname="com.mentor.nucleus.bp.ui.canvas.test.I686ClearDatabaseTest" time="8.846"/>
    </testsuite>
    <testsuite name="com.mentor.nucleus.bp.ui.canvas.test.CanvasEditorReloadContentsTest" time="26.397">
      <testcase name="testEditorUpdatesOnReload" classname="com.mentor.nucleus.bp.ui.canvas.test.CanvasEditorReloadContentsTest" time="12.849">
        <failure>junit.framework.AssertionFailedError: .log file is not empty&#13;
	at junit.framework.Assert.fail(Assert.java:47)&#13;
	at com.mentor.nucleus.bp.test.common.BaseTest.tearDown(BaseTest.java:353)&#13;
	at junit.framework.TestCase.runBare(TestCase.java:140)&#13;
	at junit.framework.TestResult$1.protect(TestResult.java:110)&#13;
	at junit.framework.TestResult.runProtected(TestResult.java:128)&#13;
	at junit.framework.TestResult.run(TestResult.java:113)&#13;
	at junit.framework.TestCase.run(TestCase.java:124)&#13;
	at junit.framework.TestSuite.runTest(TestSuite.java:243)&#13;
	at junit.framework.TestSuite.run(TestSuite.java:238)&#13;
	at junit.framework.TestSuite.runTest(TestSuite.java:243)&#13;
	at junit.framework.TestSuite.run(TestSuite.java:238)&#13;
	at org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run(JUnit3TestReference.java:130)&#13;
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)&#13;
	at org.eclipse.pde.internal.junit.runtime.RemotePluginTestRunner.main(RemotePluginTestRunner.java:62)&#13;
	at org.eclipse.pde.internal.junit.runtime.PlatformUITestHarness$1.run(PlatformUITestHarness.java:47)&#13;
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)&#13;
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:135)&#13;
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4140)&#13;
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3757)&#13;
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2701)&#13;
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2665)&#13;
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2499)&#13;
	at org.eclipse.ui.internal.Workbench$7.run(Workbench.java:679)&#13;
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)&#13;
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:668)&#13;
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)&#13;
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:123)&#13;
	at org.eclipse.pde.internal.junit.runtime.NonUIThreadTestApplication.runApp(NonUIThreadTestApplication.java:54)&#13;
	at org.eclipse.pde.internal.junit.runtime.UITestApplication.runApp(UITestApplication.java:41)&#13;
	at org.eclipse.pde.internal.junit.runtime.NonUIThreadTestApplication.start(NonUIThreadTestApplication.java:48)&#13;
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:196)&#13;
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)&#13;
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)&#13;
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:344)&#13;
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:622)&#13;
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:577)&#13;
	at org.eclipse.equinox.launcher.Main.run(Main.java:1410)&#13;
	at org.eclipse.equinox.launcher.Main.main(Main.java:1386)&#13;
&#13;
</failure>
      </testcase>
      <testcase name="testISMEditorStaysOpenOnReload" classname="com.mentor.nucleus.bp.ui.canvas.test.CanvasEditorReloadContentsTest" time="13.548">
        <failure>junit.framework.AssertionFailedError: .log file is not empty&#13;
	at junit.framework.Assert.fail(Assert.java:47)&#13;
	at com.mentor.nucleus.bp.test.common.BaseTest.tearDown(BaseTest.java:353)&#13;
	at junit.framework.TestCase.runBare(TestCase.java:140)&#13;
	at junit.framework.TestResult$1.protect(TestResult.java:110)&#13;
	at junit.framework.TestResult.runProtected(TestResult.java:128)&#13;
	at junit.framework.TestResult.run(TestResult.java:113)&#13;
	at junit.framework.TestCase.run(TestCase.java:124)&#13;
	at junit.framework.TestSuite.runTest(TestSuite.java:243)&#13;
	at junit.framework.TestSuite.run(TestSuite.java:238)&#13;
	at junit.framework.TestSuite.runTest(TestSuite.java:243)&#13;
	at junit.framework.TestSuite.run(TestSuite.java:238)&#13;
	at org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run(JUnit3TestReference.java:130)&#13;
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)&#13;
	at org.eclipse.pde.internal.junit.runtime.RemotePluginTestRunner.main(RemotePluginTestRunner.java:62)&#13;
	at org.eclipse.pde.internal.junit.runtime.PlatformUITestHarness$1.run(PlatformUITestHarness.java:47)&#13;
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)&#13;
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:135)&#13;
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4140)&#13;
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3757)&#13;
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2701)&#13;
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2665)&#13;
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2499)&#13;
	at org.eclipse.ui.internal.Workbench$7.run(Workbench.java:679)&#13;
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)&#13;
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:668)&#13;
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)&#13;
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:123)&#13;
	at org.eclipse.pde.internal.junit.runtime.NonUIThreadTestApplication.runApp(NonUIThreadTestApplication.java:54)&#13;
	at org.eclipse.pde.internal.junit.runtime.UITestApplication.runApp(UITestApplication.java:41)&#13;
	at org.eclipse.pde.internal.junit.runtime.NonUIThreadTestApplication.start(NonUIThreadTestApplication.java:48)&#13;
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:196)&#13;
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)&#13;
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)&#13;
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:344)&#13;
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:622)&#13;
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:577)&#13;
	at org.eclipse.equinox.launcher.Main.run(Main.java:1410)&#13;
	at org.eclipse.equinox.launcher.Main.main(Main.java:1386)&#13;
&#13;
</failure>
      </testcase>
    </testsuite>
    <testsuite name="com.mentor.nucleus.bp.ui.canvas.test.I835OpenDiagramEditorWithSearchView" time="22.933">
      <testcase name="testOpenDiagramEditorWithSearchView" classname="com.mentor.nucleus.bp.ui.canvas.test.I835OpenDiagramEditorWithSearchView" time="22.933"/>
    </testsuite>
    <testsuite name="com.mentor.nucleus.bp.ui.canvas.test.MultipleSupertypeTest" time="6.46">
      <testcase name="test_selectSubtype" classname="com.mentor.nucleus.bp.ui.canvas.test.MultipleSupertypeTest" time="4.4"/>
      <testcase name="test_selectImportedSubtype" classname="com.mentor.nucleus.bp.ui.canvas.test.MultipleSupertypeTest" time="2.06"/>
    </testsuite>
    <testsuite name="com.mentor.nucleus.bp.ui.canvas.test.ClassToStateDiagramNavigationTest" time="25.334">
      <testcase name="testOpenActionOnClassOpensStateDiagram" classname="com.mentor.nucleus.bp.ui.canvas.test.ClassToStateDiagramNavigationTest" time="24.414"/>
      <testcase name="testDoubleClickOnMarkerIconOpensStateDiagram" classname="com.mentor.nucleus.bp.ui.canvas.test.ClassToStateDiagramNavigationTest" time="0.92"/>
    </testsuite>
    <testsuite name="com.mentor.nucleus.bp.ui.canvas.test.ConnectorsAsAnchorsTest" time="30.22">
      <testcase name="testBendingConnectorWithConnectorsStartingAt" classname="com.mentor.nucleus.bp.ui.canvas.test.ConnectorsAsAnchorsTest" time="11.202"/>
      <testcase name="testNewConnectorIntersectingMultipleConnectors" classname="com.mentor.nucleus.bp.ui.canvas.test.ConnectorsAsAnchorsTest" time="3.338"/>
      <testcase name="testUpdatingEndOfSegmentWithNewSegment" classname="com.mentor.nucleus.bp.ui.canvas.test.ConnectorsAsAnchorsTest" time="9.579">
        <failure>
          <expected>drawRectangle(5891, 4422, 390, 80)&#13;
drawText("Unnamed Instance C : Informal Class", 5907, 4428, true)&#13;
drawline(5891, 4459, 6281, 4459)&#13;
drawRectangle(6103, 4112, 407, 80)&#13;
drawText("Unnamed Instance B : Informal Class", 6128, 4118, true)&#13;
drawline(6103, 4149, 6510, 4149)&#13;
drawRectangle(5663, 4112, 374, 80)&#13;
drawText("Unnamed Instance A : Informal Class", 5669, 4118, true)&#13;
drawline(5663, 4149, 6037, 4149)&#13;
drawPolyline("6071, 4504, 6071, 4830, 6136, 4830, 6136, 4569, 6201, 4569, 6201, 4830, 6250, 4830, 6250, 4569)&#13;
drawPolyline("6348, 4194, 6348, 4357)&#13;
drawPolyline("5842, 4194, 5842, 4357)&#13;
drawPolyline("6167, 4666, 6136, 4666)&#13;
drawText("Informal Message", 0, 1, true)&#13;
drawRectangle(6165, 4664, 5, 5)&#13;
drawRectangle(6134, 4664, 5, 5)&#13;
drawRectangle(6065, 4605, 185, 40)&#13;
drawRectangle(6247, 4622, 5, 5)&#13;
drawRectangle(6151, 4665, 3, 3)</expected>
          <actual>drawRectangle(5891, 4422, 390, 80)&#13;
drawText("Unnamed Instance C : Informal Class", 5907, 4428, true)&#13;
drawline(5891, 4459, 6281, 4459)&#13;
drawRectangle(6103, 4112, 407, 80)&#13;
drawText("Unnamed Instance B : Informal Class", 6128, 4118, true)&#13;
drawline(6103, 4149, 6510, 4149)&#13;
drawRectangle(5663, 4112, 374, 80)&#13;
drawText("Unnamed Instance A : Informal Class", 5669, 4118, true)&#13;
drawline(5663, 4149, 6037, 4149)&#13;
drawPolyline("6071, 4504, 6071, 4830, 6136, 4830, 6136, 4569, 6201, 4569, 6201, 4830, 6250, 4830, 6250, 4569)&#13;
drawPolyline("6348, 4194, 6348, 4357)&#13;
drawPolyline("5842, 4194, 5842, 4357)&#13;
drawPolyline("6163, 4666, 6136, 4666)&#13;
drawText("Informal Message", 0, 1, true)&#13;
drawRectangle(6161, 4664, 5, 5)&#13;
drawRectangle(6134, 4664, 5, 5)&#13;
drawRectangle(6064, 4605, 184, 40)&#13;
drawRectangle(6245, 4622, 5, 5)&#13;
drawRectangle(6149, 4665, 3, 3)</actual>junit.framework.ComparisonFailure: Actual results differ from those expected, file: 
12-103
 expected:&lt;...)&#13;
drawPolyline("616[7, 4666, 6136, 4666)&#13;
drawText("Informal Message", 0, 1, true)&#13;
drawRectangle(6165, 4664, 5, 5)&#13;
drawRectangle(6134, 4664, 5, 5)&#13;
drawRectangle(6065, 4605, 185, 40)&#13;
drawRectangle(6247, 4622, 5, 5)&#13;
drawRectangle(6151], 4665, 3, 3)&gt; but was:&lt;...)&#13;
drawPolyline("616[3, 4666, 6136, 4666)&#13;
drawText("Informal Message", 0, 1, true)&#13;
drawRectangle(6161, 4664, 5, 5)&#13;
drawRectangle(6134, 4664, 5, 5)&#13;
drawRectangle(6064, 4605, 184, 40)&#13;
drawRectangle(6245, 4622, 5, 5)&#13;
drawRectangle(6149], 4665, 3, 3)&gt;&#13;
	at junit.framework.Assert.assertEquals(Assert.java:81)&#13;
	at com.mentor.nucleus.bp.ui.canvas.test.CanvasTest.doTestDiagram(CanvasTest.java:154)&#13;
	at com.mentor.nucleus.bp.ui.canvas.test.CanvasTest.validateOrGenerateResults(CanvasTest.java:535)&#13;
	at com.mentor.nucleus.bp.ui.canvas.test.CanvasTest.validateOrGenerateResults(CanvasTest.java:497)&#13;
	at com.mentor.nucleus.bp.ui.canvas.test.ConnectorsAsAnchorsTest.testUpdatingEndOfSegmentWithNewSegment(ConnectorsAsAnchorsTest.java:447)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at junit.framework.TestCase.runTest(TestCase.java:168)&#13;
	at junit.framework.TestCase.runBare(TestCase.java:134)&#13;
	at junit.framework.TestResult$1.protect(TestResult.java:110)&#13;
	at junit.framework.TestResult.runProtected(TestResult.java:128)&#13;
	at junit.framework.TestResult.run(TestResult.java:113)&#13;
	at junit.framework.TestCase.run(TestCase.java:124)&#13;
	at junit.framework.TestSuite.runTest(TestSuite.java:243)&#13;
	at junit.framework.TestSuite.run(TestSuite.java:238)&#13;
	at junit.framework.TestSuite.runTest(TestSuite.java:243)&#13;
	at junit.framework.TestSuite.run(TestSuite.java:238)&#13;
	at org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run(JUnit3TestReference.java:130)&#13;
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)&#13;
	at org.eclipse.pde.internal.junit.runtime.RemotePluginTestRunner.main(RemotePluginTestRunner.java:62)&#13;
	at org.eclipse.pde.internal.junit.runtime.PlatformUITestHarness$1.run(PlatformUITestHarness.java:47)&#13;
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)&#13;
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:135)&#13;
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4140)&#13;
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3757)&#13;
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2701)&#13;
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2665)&#13;
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2499)&#13;
	at org.eclipse.ui.internal.Workbench$7.run(Workbench.java:679)&#13;
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)&#13;
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:668)&#13;
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)&#13;
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:123)&#13;
	at org.eclipse.pde.internal.junit.runtime.NonUIThreadTestApplication.runApp(NonUIThreadTestApplication.java:54)&#13;
	at org.eclipse.pde.internal.junit.runtime.UITestApplication.runApp(UITestApplication.java:41)&#13;
	at org.eclipse.pde.internal.junit.runtime.NonUIThreadTestApplication.start(NonUIThreadTestApplication.java:48)&#13;
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:196)&#13;
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)&#13;
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)&#13;
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:344)&#13;
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:622)&#13;
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:577)&#13;
	at org.eclipse.equinox.launcher.Main.run(Main.java:1410)&#13;
	at org.eclipse.equinox.launcher.Main.main(Main.java:1386)&#13;
&#13;
</failure>
      </testcase>
      <testcase name="testFixedAspectDrawing" classname="com.mentor.nucleus.bp.ui.canvas.test.ConnectorsAsAnchorsTest" time="0.0"/>
      <testcase name="testFixedAspectResizing" classname="com.mentor.nucleus.bp.ui.canvas.test.ConnectorsAsAnchorsTest" time="0.0"/>
      <testcase name="testActorDrawnToFullShapeSizeWhenNotNamed" classname="com.mentor.nucleus.bp.ui.canvas.test.ConnectorsAsAnchorsTest" time="6.101"/>
    </testsuite>
    <testsuite name="com.mentor.nucleus.bp.ui.canvas.test.FreeFloatingConnectorTest" time="23.339">
      <testcase name="testCreatingAndMovingFreeFloatingConnectors" classname="com.mentor.nucleus.bp.ui.canvas.test.FreeFloatingConnectorTest" time="17.301"/>
      <testcase name="testMovingFreeFloatingConnectorsAtHighZoom" classname="com.mentor.nucleus.bp.ui.canvas.test.FreeFloatingConnectorTest" time="6.038"/>
    </testsuite>
    <testsuite name="com.mentor.nucleus.bp.ui.canvas.test.I2053F2RenameTest" time="10.453">
      <testcase name="testContextF2RenameSelection" classname="com.mentor.nucleus.bp.ui.canvas.test.I2053F2RenameTest" time="10.453"/>
    </testsuite>
    <testsuite name="com.mentor.nucleus.bp.ui.canvas.test.AutoReconciliationTests" time="97.453">
      <testcase name="testGraphicalRepresentsSet" classname="com.mentor.nucleus.bp.ui.canvas.test.AutoReconciliationTests" time="97.453"/>
    </testsuite>
    <testsuite name="com.mentor.nucleus.bp.ui.canvas.test.ConnectorPolicyTests" time="19.289">
      <testcase name="testOverlappingTargetsForCreateRequestsStart" classname="com.mentor.nucleus.bp.ui.canvas.test.ConnectorPolicyTests" time="6.652"/>
      <testcase name="testOverlappingTargetsForCreateRequestsEnd" classname="com.mentor.nucleus.bp.ui.canvas.test.ConnectorPolicyTests" time="6.116"/>
      <testcase name="testOverlappingTargetsForUpdateEndRequestsStart" classname="com.mentor.nucleus.bp.ui.canvas.test.ConnectorPolicyTests" time="3.245"/>
      <testcase name="testOverlappingTargetsForUpdateEndRequestsEnd" classname="com.mentor.nucleus.bp.ui.canvas.test.ConnectorPolicyTests" time="3.276"/>
    </testsuite>
    <testsuite name="com.mentor.nucleus.bp.ui.canvas.test.anchors.GraphicalAnchorTests_0" time="281.166">
      <testcase name="testA1_B1C1" classname="com.mentor.nucleus.bp.ui.canvas.test.anchors.GraphicalAnchorTests_0" time="69.295"/>
      <testcase name="testA1_B2C1" classname="com.mentor.nucleus.bp.ui.canvas.test.anchors.GraphicalAnchorTests_0" time="12.84"/>
      <testcase name="testA1_B1C2" classname="com.mentor.nucleus.bp.ui.canvas.test.anchors.GraphicalAnchorTests_0" time="10.077"/>
      <testcase name="testA1_B2C2" classname="com.mentor.nucleus.bp.ui.canvas.test.anchors.GraphicalAnchorTests_0" time="6.77"/>
      <testcase name="testA1_B1C3" classname="com.mentor.nucleus.bp.ui.canvas.test.anchors.GraphicalAnchorTests_0" time="6.833"/>
      <testcase name="testA1_B2C3" classname="com.mentor.nucleus.bp.ui.canvas.test.anchors.GraphicalAnchorTests_0" time="6.864"/>
      <testcase name="testA1_B3C3" classname="com.mentor.nucleus.bp.ui.canvas.test.anchors.GraphicalAnchorTests_0" time="6.786"/>
      <testcase name="testA2_B1C1" classname="com.mentor.nucleus.bp.ui.canvas.test.anchors.GraphicalAnchorTests_0" time="9.891"/>
      <testcase name="testA2_B2C1" classname="com.mentor.nucleus.bp.ui.canvas.test.anchors.GraphicalAnchorTests_0" time="6.162"/>
      <testcase name="testA2_B1C2" classname="com.mentor.nucleus.bp.ui.canvas.test.anchors.GraphicalAnchorTests_0" time="3.322"/>
      <testcase name="testA2_B2C2" classname="com.mentor.nucleus.bp.ui.canvas.test.anchors.GraphicalAnchorTests_0" time="3.339"/>
      <testcase name="testA2_B1C3" classname="com.mentor.nucleus.bp.ui.canvas.test.anchors.GraphicalAnchorTests_0" time="3.385"/>
      <testcase name="testA2_B2C3" classname="com.mentor.nucleus.bp.ui.canvas.test.anchors.GraphicalAnchorTests_0" time="6.754"/>
      <testcase name="testA2_B3C3" classname="com.mentor.nucleus.bp.ui.canvas.test.anchors.GraphicalAnchorTests_0" time="6.817"/>
      <testcase name="testA3_B1C1" classname="com.mentor.nucleus.bp.ui.canvas.test.anchors.GraphicalAnchorTests_0" time="10.095"/>
      <testcase name="testA3_B2C1" classname="com.mentor.nucleus.bp.ui.canvas.test.anchors.GraphicalAnchorTests_0" time="12.998"/>
      <testcase name="testA3_B1C2" classname="com.mentor.nucleus.bp.ui.canvas.test.anchors.GraphicalAnchorTests_0" time="6.771"/>
      <testcase name="testA3_B2C2" classname="com.mentor.nucleus.bp.ui.canvas.test.anchors.GraphicalAnchorTests_0" time="0.047"/>
      <testcase name="testA3_B1C3" classname="com.mentor.nucleus.bp.ui.canvas.test.anchors.GraphicalAnchorTests_0" time="3.51"/>
      <testcase name="testA3_B2C3" classname="com.mentor.nucleus.bp.ui.canvas.test.anchors.GraphicalAnchorTests_0" time="7.051"/>
      <testcase name="testA3_B3C3" classname="com.mentor.nucleus.bp.ui.canvas.test.anchors.GraphicalAnchorTests_0" time="7.004"/>
      <testcase name="testA4_B1C1" classname="com.mentor.nucleus.bp.ui.canvas.test.anchors.GraphicalAnchorTests_0" time="10.219"/>
      <testcase name="testA4_B2C1" classname="com.mentor.nucleus.bp.ui.canvas.test.anchors.GraphicalAnchorTests_0" time="13.371"/>
      <testcase name="testA4_B1C2" classname="com.mentor.nucleus.bp.ui.canvas.test.anchors.GraphicalAnchorTests_0" time="6.818"/>
      <testcase name="testA4_B2C2" classname="com.mentor.nucleus.bp.ui.canvas.test.anchors.GraphicalAnchorTests_0" time="0.046"/>
      <testcase name="testA4_B1C3" classname="com.mentor.nucleus.bp.ui.canvas.test.anchors.GraphicalAnchorTests_0" time="3.51"/>
      <testcase name="testA4_B2C3" classname="com.mentor.nucleus.bp.ui.canvas.test.anchors.GraphicalAnchorTests_0" time="7.004"/>
      <testcase name="testA4_B3C3" classname="com.mentor.nucleus.bp.ui.canvas.test.anchors.GraphicalAnchorTests_0" time="7.005"/>
      <testcase name="testA5_B3C1" classname="com.mentor.nucleus.bp.ui.canvas.test.anchors.GraphicalAnchorTests_0" time="9.906"/>
      <testcase name="testA5_B3C2" classname="com.mentor.nucleus.bp.ui.canvas.test.anchors.GraphicalAnchorTests_0" time="9.891"/>
      <testcase name="testA5_B3C3" classname="com.mentor.nucleus.bp.ui.canvas.test.anchors.GraphicalAnchorTests_0" time="6.785"/>
    </testsuite>
    <testsuite name="com.mentor.nucleus.bp.ui.canvas.test.movement.ConnectorMoveTests_0" time="1679.251">
      <testcase name="testA1B1_C1D3E1F2" classname="com.mentor.nucleus.bp.ui.canvas.test.movement.ConnectorMoveTests_0" time="639.771"/>
      <testcase name="testA1B1_C1D3E2F2" classname="com.mentor.nucleus.bp.ui.canvas.test.movement.ConnectorMoveTests_0" time="7.706"/>
      <testcase name="testA1B1_C2D1E1F2" classname="com.mentor.nucleus.bp.ui.canvas.test.movement.ConnectorMoveTests_0" time="7.738"/>
      <testcase name="testA1B1_C2D1E2F2" classname="com.mentor.nucleus.bp.ui.canvas.test.movement.ConnectorMoveTests_0" time="7.815"/>
      <testcase name="testA1B1_C2D2E1F2" classname="com.mentor.nucleus.bp.ui.canvas.test.movement.ConnectorMoveTests_0" time="7.847"/>
      <testcase name="testA1B1_C2D2E2F2" classname="com.mentor.nucleus.bp.ui.canvas.test.movement.ConnectorMoveTests_0" time="7.924"/>
      <testcase name="testA1B1_C3D1E1F2" classname="com.mentor.nucleus.bp.ui.canvas.test.movement.ConnectorMoveTests_0" time="7.847"/>
      <testcase name="testA1B1_C3D1E2F2" classname="com.mentor.nucleus.bp.ui.canvas.test.movement.ConnectorMoveTests_0" time="7.488"/>
      <testcase name="testA1B1_C3D2E1F2" classname="com.mentor.nucleus.bp.ui.canvas.test.movement.ConnectorMoveTests_0" time="7.94"/>
      <testcase name="testA1B1_C3D2E2F2" classname="com.mentor.nucleus.bp.ui.canvas.test.movement.ConnectorMoveTests_0" time="7.971"/>
      <testcase name="testA1B1_C3D3E1F2" classname="com.mentor.nucleus.bp.ui.canvas.test.movement.ConnectorMoveTests_0" time="7.987"/>
      <testcase name="testA1B1_C3D3E2F2" classname="com.mentor.nucleus.bp.ui.canvas.test.movement.ConnectorMoveTests_0" time="8.019"/>
      <testcase name="testA1B2_C1D3E1F3" classname="com.mentor.nucleus.bp.ui.canvas.test.movement.ConnectorMoveTests_0" time="8.033"/>
      <testcase name="testA1B2_C1D3E2F3" classname="com.mentor.nucleus.bp.ui.canvas.test.movement.ConnectorMoveTests_0" time="8.112"/>
      <testcase name="testA1B2_C2D1E1F3" classname="com.mentor.nucleus.bp.ui.canvas.test.movement.ConnectorMoveTests_0" time="8.096"/>
      <testcase name="testA1B2_C2D1E2F3" classname="com.mentor.nucleus.bp.ui.canvas.test.movement.ConnectorMoveTests_0" time="8.097"/>
      <testcase name="testA1B2_C2D2E1F3" classname="com.mentor.nucleus.bp.ui.canvas.test.movement.ConnectorMoveTests_0" time="8.221"/>
      <testcase name="testA1B2_C2D2E2F3" classname="com.mentor.nucleus.bp.ui.canvas.test.movement.ConnectorMoveTests_0" time="8.174"/>
      <testcase name="testA1B2_C3D1E1F3" classname="com.mentor.nucleus.bp.ui.canvas.test.movement.ConnectorMoveTests_0" time="8.252"/>
      <testcase name="testA1B2_C3D1E2F3" classname="com.mentor.nucleus.bp.ui.canvas.test.movement.ConnectorMoveTests_0" time="8.408"/>
      <testcase name="testA1B2_C3D2E1F3" classname="com.mentor.nucleus.bp.ui.canvas.test.movement.ConnectorMoveTests_0" time="8.299"/>
      <testcase name="testA1B2_C3D2E2F3" classname="com.mentor.nucleus.bp.ui.canvas.test.movement.ConnectorMoveTests_0" time="8.455"/>
      <testcase name="testA1B2_C3D3E1F3" classname="com.mentor.nucleus.bp.ui.canvas.test.movement.ConnectorMoveTests_0" time="8.393"/>
      <testcase name="testA1B2_C3D3E2F3" classname="com.mentor.nucleus.bp.ui.canvas.test.movement.ConnectorMoveTests_0" time="8.47"/>
      <testcase name="testA1B3_C1D3E1F2" classname="com.mentor.nucleus.bp.ui.canvas.test.movement.ConnectorMoveTests_0" time="8.424"/>
      <testcase name="testA1B3_C1D3E2F2" classname="com.mentor.nucleus.bp.ui.canvas.test.movement.ConnectorMoveTests_0" time="8.471"/>
      <testcase name="testA1B3_C2D1E1F2" classname="com.mentor.nucleus.bp.ui.canvas.test.movement.ConnectorMoveTests_0" time="8.47"/>
      <testcase name="testA1B3_C2D1E2F2" classname="com.mentor.nucleus.bp.ui.canvas.test.movement.ConnectorMoveTests_0" time="8.596"/>
      <testcase name="testA1B3_C2D2E1F2" classname="com.mentor.nucleus.bp.ui.canvas.test.movement.ConnectorMoveTests_0" time="8.517"/>
      <testcase name="testA1B3_C2D2E2F2" classname="com.mentor.nucleus.bp.ui.canvas.test.movement.ConnectorMoveTests_0" time="8.533"/>
      <testcase name="testA1B3_C3D1E1F2" classname="com.mentor.nucleus.bp.ui.canvas.test.movement.ConnectorMoveTests_0" time="8.642"/>
      <testcase name="testA1B3_C3D1E2F2" classname="com.mentor.nucleus.bp.ui.canvas.test.movement.ConnectorMoveTests_0" time="8.642"/>
      <testcase name="testA1B3_C3D2E1F2" classname="com.mentor.nucleus.bp.ui.canvas.test.movement.ConnectorMoveTests_0" time="8.596"/>
      <testcase name="testA1B3_C3D2E2F2" classname="com.mentor.nucleus.bp.ui.canvas.test.movement.ConnectorMoveTests_0" time="8.689"/>
      <testcase name="testA1B3_C3D3E1F2" classname="com.mentor.nucleus.bp.ui.canvas.test.movement.ConnectorMoveTests_0" time="8.642"/>
      <testcase name="testA1B3_C3D3E2F2" classname="com.mentor.nucleus.bp.ui.canvas.test.movement.ConnectorMoveTests_0" time="8.689"/>
      <testcase name="testA2B1_C1D3E1F3" classname="com.mentor.nucleus.bp.ui.canvas.test.movement.ConnectorMoveTests_0" time="8.689"/>
      <testcase name="testA2B1_C1D3E2F3" classname="com.mentor.nucleus.bp.ui.canvas.test.movement.ConnectorMoveTests_0" time="8.798"/>
      <testcase name="testA2B1_C2D1E1F3" classname="com.mentor.nucleus.bp.ui.canvas.test.movement.ConnectorMoveTests_0" time="8.767"/>
      <testcase name="testA2B1_C2D1E2F3" classname="com.mentor.nucleus.bp.ui.canvas.test.movement.ConnectorMoveTests_0" time="8.861"/>
      <testcase name="testA2B1_C2D2E1F3" classname="com.mentor.nucleus.bp.ui.canvas.test.movement.ConnectorMoveTests_0" time="8.829"/>
      <testcase name="testA2B1_C2D2E2F3" classname="com.mentor.nucleus.bp.ui.canvas.test.movement.ConnectorMoveTests_0" time="8.938"/>
      <testcase name="testA2B1_C3D1E1F3" classname="com.mentor.nucleus.bp.ui.canvas.test.movement.ConnectorMoveTests_0" time="8.923"/>
      <testcase name="testA2B1_C3D1E2F3" classname="com.mentor.nucleus.bp.ui.canvas.test.movement.ConnectorMoveTests_0" time="9.001"/>
      <testcase name="testA2B1_C3D2E1F3" classname="com.mentor.nucleus.bp.ui.canvas.test.movement.ConnectorMoveTests_0" time="9.064"/>
      <testcase name="testA2B1_C3D2E2F3" classname="com.mentor.nucleus.bp.ui.canvas.test.movement.ConnectorMoveTests_0" time="9.048"/>
      <testcase name="testA2B1_C3D3E1F3" classname="com.mentor.nucleus.bp.ui.canvas.test.movement.ConnectorMoveTests_0" time="9.094"/>
      <testcase name="testA2B1_C3D3E2F3" classname="com.mentor.nucleus.bp.ui.canvas.test.movement.ConnectorMoveTests_0" time="9.173"/>
      <testcase name="testA2B2_C1D3E1F3" classname="com.mentor.nucleus.bp.ui.canvas.test.movement.ConnectorMoveTests_0" time="9.125"/>
      <testcase name="testA2B2_C1D3E2F3" classname="com.mentor.nucleus.bp.ui.canvas.test.movement.ConnectorMoveTests_0" time="9.204"/>
      <testcase name="testA2B2_C2D1E1F3" classname="com.mentor.nucleus.bp.ui.canvas.test.movement.ConnectorMoveTests_0" time="9.173"/>
      <testcase name="testA2B2_C2D1E2F3" classname="com.mentor.nucleus.bp.ui.canvas.test.movement.ConnectorMoveTests_0" time="9.25"/>
      <testcase name="testA2B2_C2D2E1F3" classname="com.mentor.nucleus.bp.ui.canvas.test.movement.ConnectorMoveTests_0" time="9.344"/>
      <testcase name="testA2B2_C2D2E2F3" classname="com.mentor.nucleus.bp.ui.canvas.test.movement.ConnectorMoveTests_0" time="9.438"/>
      <testcase name="testA2B2_C3D1E1F3" classname="com.mentor.nucleus.bp.ui.canvas.test.movement.ConnectorMoveTests_0" time="9.454"/>
      <testcase name="testA2B2_C3D1E2F3" classname="com.mentor.nucleus.bp.ui.canvas.test.movement.ConnectorMoveTests_0" time="9.562"/>
      <testcase name="testA2B2_C3D2E1F3" classname="com.mentor.nucleus.bp.ui.canvas.test.movement.ConnectorMoveTests_0" time="9.516"/>
      <testcase name="testA2B2_C3D2E2F3" classname="com.mentor.nucleus.bp.ui.canvas.test.movement.ConnectorMoveTests_0" time="9.656"/>
      <testcase name="testA2B2_C3D3E1F3" classname="com.mentor.nucleus.bp.ui.canvas.test.movement.ConnectorMoveTests_0" time="9.672"/>
      <testcase name="testA2B2_C3D3E2F3" classname="com.mentor.nucleus.bp.ui.canvas.test.movement.ConnectorMoveTests_0" time="9.656"/>
      <testcase name="testA2B3_C1D3E1F1" classname="com.mentor.nucleus.bp.ui.canvas.test.movement.ConnectorMoveTests_0" time="9.719"/>
      <testcase name="testA2B3_C1D3E2F1" classname="com.mentor.nucleus.bp.ui.canvas.test.movement.ConnectorMoveTests_0" time="9.89"/>
      <testcase name="testA2B3_C1D3E1F2" classname="com.mentor.nucleus.bp.ui.canvas.test.movement.ConnectorMoveTests_0" time="9.765"/>
      <testcase name="testA2B3_C1D3E2F2" classname="com.mentor.nucleus.bp.ui.canvas.test.movement.ConnectorMoveTests_0" time="9.984"/>
      <testcase name="testA2B3_C2D1E1F1" classname="com.mentor.nucleus.bp.ui.canvas.test.movement.ConnectorMoveTests_0" time="10.03"/>
      <testcase name="testA2B3_C2D1E2F1" classname="com.mentor.nucleus.bp.ui.canvas.test.movement.ConnectorMoveTests_0" time="10.156"/>
      <testcase name="testA2B3_C2D2E1F1" classname="com.mentor.nucleus.bp.ui.canvas.test.movement.ConnectorMoveTests_0" time="10.124"/>
      <testcase name="testA2B3_C2D2E2F1" classname="com.mentor.nucleus.bp.ui.canvas.test.movement.ConnectorMoveTests_0" time="10.28"/>
      <testcase name="testA2B3_C2D1E1F2" classname="com.mentor.nucleus.bp.ui.canvas.test.movement.ConnectorMoveTests_0" time="10.327"/>
      <testcase name="testA2B3_C2D1E2F2" classname="com.mentor.nucleus.bp.ui.canvas.test.movement.ConnectorMoveTests_0" time="10.389"/>
      <testcase name="testA2B3_C2D2E1F2" classname="com.mentor.nucleus.bp.ui.canvas.test.movement.ConnectorMoveTests_0" time="10.452"/>
      <testcase name="testA2B3_C2D2E2F2" classname="com.mentor.nucleus.bp.ui.canvas.test.movement.ConnectorMoveTests_0" time="10.42"/>
      <testcase name="testA2B3_C3D1E1F1" classname="com.mentor.nucleus.bp.ui.canvas.test.movement.ConnectorMoveTests_0" time="10.561"/>
      <testcase name="testA2B3_C3D1E2F1" classname="com.mentor.nucleus.bp.ui.canvas.test.movement.ConnectorMoveTests_0" time="10.515"/>
      <testcase name="testA2B3_C3D2E1F1" classname="com.mentor.nucleus.bp.ui.canvas.test.movement.ConnectorMoveTests_0" time="10.436"/>
      <testcase name="testA2B3_C3D2E2F1" classname="com.mentor.nucleus.bp.ui.canvas.test.movement.ConnectorMoveTests_0" time="10.67"/>
      <testcase name="testA2B3_C3D3E1F1" classname="com.mentor.nucleus.bp.ui.canvas.test.movement.ConnectorMoveTests_0" time="10.717"/>
      <testcase name="testA2B3_C3D3E2F1" classname="com.mentor.nucleus.bp.ui.canvas.test.movement.ConnectorMoveTests_0" time="10.81"/>
      <testcase name="testA2B3_C3D1E1F2" classname="com.mentor.nucleus.bp.ui.canvas.test.movement.ConnectorMoveTests_0" time="10.889"/>
      <testcase name="testA2B3_C3D1E2F2" classname="com.mentor.nucleus.bp.ui.canvas.test.movement.ConnectorMoveTests_0" time="10.919"/>
      <testcase name="testA2B3_C3D2E1F2" classname="com.mentor.nucleus.bp.ui.canvas.test.movement.ConnectorMoveTests_0" time="10.905"/>
      <testcase name="testA2B3_C3D2E2F2" classname="com.mentor.nucleus.bp.ui.canvas.test.movement.ConnectorMoveTests_0" time="11.028"/>
      <testcase name="testA2B3_C3D3E1F2" classname="com.mentor.nucleus.bp.ui.canvas.test.movement.ConnectorMoveTests_0" time="11.139"/>
      <testcase name="testA2B3_C3D3E2F2" classname="com.mentor.nucleus.bp.ui.canvas.test.movement.ConnectorMoveTests_0" time="11.294"/>
      <testcase name="testA3B2_C1D3E1F3" classname="com.mentor.nucleus.bp.ui.canvas.test.movement.ConnectorMoveTests_0" time="11.309"/>
      <testcase name="testA3B2_C1D3E2F3" classname="com.mentor.nucleus.bp.ui.canvas.test.movement.ConnectorMoveTests_0" time="11.373"/>
      <testcase name="testA3B2_C2D1E1F3" classname="com.mentor.nucleus.bp.ui.canvas.test.movement.ConnectorMoveTests_0" time="11.387"/>
      <testcase name="testA3B2_C2D1E2F3" classname="com.mentor.nucleus.bp.ui.canvas.test.movement.ConnectorMoveTests_0" time="11.357"/>
      <testcase name="testA3B2_C2D2E1F3" classname="com.mentor.nucleus.bp.ui.canvas.test.movement.ConnectorMoveTests_0" time="11.419"/>
      <testcase name="testA3B2_C2D2E2F3" classname="com.mentor.nucleus.bp.ui.canvas.test.movement.ConnectorMoveTests_0" time="11.481"/>
      <testcase name="testA3B2_C3D1E1F3" classname="com.mentor.nucleus.bp.ui.canvas.test.movement.ConnectorMoveTests_0" time="11.481"/>
      <testcase name="testA3B2_C3D1E2F3" classname="com.mentor.nucleus.bp.ui.canvas.test.movement.ConnectorMoveTests_0" time="11.528"/>
      <testcase name="testA3B2_C3D2E1F3" classname="com.mentor.nucleus.bp.ui.canvas.test.movement.ConnectorMoveTests_0" time="11.482"/>
      <testcase name="testA3B2_C3D2E2F3" classname="com.mentor.nucleus.bp.ui.canvas.test.movement.ConnectorMoveTests_0" time="11.559"/>
      <testcase name="testA3B2_C3D3E1F3" classname="com.mentor.nucleus.bp.ui.canvas.test.movement.ConnectorMoveTests_0" time="13.228"/>
      <testcase name="testA3B2_C3D3E2F3" classname="com.mentor.nucleus.bp.ui.canvas.test.movement.ConnectorMoveTests_0" time="11.482"/>
      <testcase name="testA3B3_C1D3E1F3" classname="com.mentor.nucleus.bp.ui.canvas.test.movement.ConnectorMoveTests_0" time="11.434"/>
      <testcase name="testA3B3_C1D3E2F3" classname="com.mentor.nucleus.bp.ui.canvas.test.movement.ConnectorMoveTests_0" time="11.497"/>
      <testcase name="testA3B3_C2D1E1F3" classname="com.mentor.nucleus.bp.ui.canvas.test.movement.ConnectorMoveTests_0" time="11.544"/>
      <testcase name="testA3B3_C2D1E2F3" classname="com.mentor.nucleus.bp.ui.canvas.test.movement.ConnectorMoveTests_0" time="11.575"/>
      <testcase name="testA3B3_C2D2E1F3" classname="com.mentor.nucleus.bp.ui.canvas.test.movement.ConnectorMoveTests_0" time="11.621"/>
      <testcase name="testA3B3_C2D2E2F3" classname="com.mentor.nucleus.bp.ui.canvas.test.movement.ConnectorMoveTests_0" time="11.607"/>
      <testcase name="testA3B3_C3D1E1F3" classname="com.mentor.nucleus.bp.ui.canvas.test.movement.ConnectorMoveTests_0" time="12.713"/>
      <testcase name="testA3B3_C3D1E2F3" classname="com.mentor.nucleus.bp.ui.canvas.test.movement.ConnectorMoveTests_0" time="11.653"/>
      <testcase name="testA3B3_C3D2E1F3" classname="com.mentor.nucleus.bp.ui.canvas.test.movement.ConnectorMoveTests_0" time="11.715"/>
      <testcase name="testA3B3_C3D2E2F3" classname="com.mentor.nucleus.bp.ui.canvas.test.movement.ConnectorMoveTests_0" time="11.7"/>
      <testcase name="testA3B3_C3D3E1F3" classname="com.mentor.nucleus.bp.ui.canvas.test.movement.ConnectorMoveTests_0" time="11.778"/>
      <testcase name="testA3B3_C3D3E2F3" classname="com.mentor.nucleus.bp.ui.canvas.test.movement.ConnectorMoveTests_0" time="11.7"/>
    </testsuite>
    <testsuite name="com.mentor.nucleus.bp.ui.canvas.test.TestReflexiveConnectorCreation" time="67.46">
      <testcase name="testReflexiveConnectorCreationOnMouseUp" classname="com.mentor.nucleus.bp.ui.canvas.test.TestReflexiveConnectorCreation" time="22.56"/>
      <testcase name="testReflexiveCornerNonIntersectionWithShape" classname="com.mentor.nucleus.bp.ui.canvas.test.TestReflexiveConnectorCreation" time="11.279"/>
      <testcase name="testReflexiveConnectorOnConnector" classname="com.mentor.nucleus.bp.ui.canvas.test.TestReflexiveConnectorCreation" time="33.621"/>
    </testsuite>
  </testsuite>
</testrun>
