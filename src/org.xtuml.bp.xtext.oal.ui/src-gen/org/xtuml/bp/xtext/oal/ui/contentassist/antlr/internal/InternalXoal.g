/*
* generated by Xtext
*/
grammar InternalXoal;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package org.xtuml.bp.xtext.oal.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtuml.bp.xtext.oal.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.xtuml.bp.xtext.oal.services.XoalGrammarAccess;

}

@parser::members {
 
 	private XoalGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(XoalGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleCode
entryRuleCode 
:
{ before(grammarAccess.getCodeRule()); }
	 ruleCode
{ after(grammarAccess.getCodeRule()); } 
	 EOF 
;

// Rule Code
ruleCode
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCodeAccess().getBlockParserRuleCall()); }
	ruleblock
{ after(grammarAccess.getCodeAccess().getBlockParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleblock
entryRuleblock 
:
{ before(grammarAccess.getBlockRule()); }
	 ruleblock
{ after(grammarAccess.getBlockRule()); } 
	 EOF 
;

// Rule block
ruleblock
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBlockAccess().getStatementsAssignment()); }
(rule__Block__StatementsAssignment)*
{ after(grammarAccess.getBlockAccess().getStatementsAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulestatement
entryRulestatement 
:
{ before(grammarAccess.getStatementRule()); }
	 rulestatement
{ after(grammarAccess.getStatementRule()); } 
	 EOF 
;

// Rule statement
rulestatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStatementAccess().getGroup()); }
(rule__Statement__Group__0)
{ after(grammarAccess.getStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleassignment_statement
entryRuleassignment_statement 
:
{ before(grammarAccess.getAssignment_statementRule()); }
	 ruleassignment_statement
{ after(grammarAccess.getAssignment_statementRule()); } 
	 EOF 
;

// Rule assignment_statement
ruleassignment_statement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAssignment_statementAccess().getGroup()); }
(rule__Assignment_statement__Group__0)
{ after(grammarAccess.getAssignment_statementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulebreak_statement
entryRulebreak_statement 
:
{ before(grammarAccess.getBreak_statementRule()); }
	 rulebreak_statement
{ after(grammarAccess.getBreak_statementRule()); } 
	 EOF 
;

// Rule break_statement
rulebreak_statement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBreak_statementAccess().getA1Assignment()); }
(rule__Break_statement__A1Assignment)
{ after(grammarAccess.getBreak_statementAccess().getA1Assignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulebridge_statement
entryRulebridge_statement 
:
{ before(grammarAccess.getBridge_statementRule()); }
	 rulebridge_statement
{ after(grammarAccess.getBridge_statementRule()); } 
	 EOF 
;

// Rule bridge_statement
rulebridge_statement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBridge_statementAccess().getA1Assignment()); }
(rule__Bridge_statement__A1Assignment)
{ after(grammarAccess.getBridge_statementAccess().getA1Assignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulesend_statement
entryRulesend_statement 
:
{ before(grammarAccess.getSend_statementRule()); }
	 rulesend_statement
{ after(grammarAccess.getSend_statementRule()); } 
	 EOF 
;

// Rule send_statement
rulesend_statement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSend_statementAccess().getA1Assignment()); }
(rule__Send_statement__A1Assignment)
{ after(grammarAccess.getSend_statementAccess().getA1Assignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulecontrol_statement
entryRulecontrol_statement 
:
{ before(grammarAccess.getControl_statementRule()); }
	 rulecontrol_statement
{ after(grammarAccess.getControl_statementRule()); } 
	 EOF 
;

// Rule control_statement
rulecontrol_statement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getControl_statementAccess().getGroup()); }
(rule__Control_statement__Group__0)
{ after(grammarAccess.getControl_statementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulecontinue_statement
entryRulecontinue_statement 
:
{ before(grammarAccess.getContinue_statementRule()); }
	 rulecontinue_statement
{ after(grammarAccess.getContinue_statementRule()); } 
	 EOF 
;

// Rule continue_statement
rulecontinue_statement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getContinue_statementAccess().getA1Assignment()); }
(rule__Continue_statement__A1Assignment)
{ after(grammarAccess.getContinue_statementAccess().getA1Assignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulecreate_event_statement
entryRulecreate_event_statement 
:
{ before(grammarAccess.getCreate_event_statementRule()); }
	 rulecreate_event_statement
{ after(grammarAccess.getCreate_event_statementRule()); } 
	 EOF 
;

// Rule create_event_statement
rulecreate_event_statement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCreate_event_statementAccess().getGroup()); }
(rule__Create_event_statement__Group__0)
{ after(grammarAccess.getCreate_event_statementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulecreate_object_statement
entryRulecreate_object_statement 
:
{ before(grammarAccess.getCreate_object_statementRule()); }
	 rulecreate_object_statement
{ after(grammarAccess.getCreate_object_statementRule()); } 
	 EOF 
;

// Rule create_object_statement
rulecreate_object_statement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCreate_object_statementAccess().getGroup()); }
(rule__Create_object_statement__Group__0)
{ after(grammarAccess.getCreate_object_statementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuledebug_statement
entryRuledebug_statement 
:
{ before(grammarAccess.getDebug_statementRule()); }
	 ruledebug_statement
{ after(grammarAccess.getDebug_statementRule()); } 
	 EOF 
;

// Rule debug_statement
ruledebug_statement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDebug_statementAccess().getGroup()); }
(rule__Debug_statement__Group__0)
{ after(grammarAccess.getDebug_statementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuledelete_statement
entryRuledelete_statement 
:
{ before(grammarAccess.getDelete_statementRule()); }
	 ruledelete_statement
{ after(grammarAccess.getDelete_statementRule()); } 
	 EOF 
;

// Rule delete_statement
ruledelete_statement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDelete_statementAccess().getGroup()); }
(rule__Delete_statement__Group__0)
{ after(grammarAccess.getDelete_statementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulefor_statement
entryRulefor_statement 
:
{ before(grammarAccess.getFor_statementRule()); }
	 rulefor_statement
{ after(grammarAccess.getFor_statementRule()); } 
	 EOF 
;

// Rule for_statement
rulefor_statement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFor_statementAccess().getGroup()); }
(rule__For_statement__Group__0)
{ after(grammarAccess.getFor_statementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulegenerate_statement
entryRulegenerate_statement 
:
{ before(grammarAccess.getGenerate_statementRule()); }
	 rulegenerate_statement
{ after(grammarAccess.getGenerate_statementRule()); } 
	 EOF 
;

// Rule generate_statement
rulegenerate_statement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getGenerate_statementAccess().getGroup()); }
(rule__Generate_statement__Group__0)
{ after(grammarAccess.getGenerate_statementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleif_statement
entryRuleif_statement 
:
{ before(grammarAccess.getIf_statementRule()); }
	 ruleif_statement
{ after(grammarAccess.getIf_statementRule()); } 
	 EOF 
;

// Rule if_statement
ruleif_statement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIf_statementAccess().getGroup()); }
(rule__If_statement__Group__0)
{ after(grammarAccess.getIf_statementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleimplicit_assignment_statement
entryRuleimplicit_assignment_statement 
:
{ before(grammarAccess.getImplicit_assignment_statementRule()); }
	 ruleimplicit_assignment_statement
{ after(grammarAccess.getImplicit_assignment_statementRule()); } 
	 EOF 
;

// Rule implicit_assignment_statement
ruleimplicit_assignment_statement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getImplicit_assignment_statementAccess().getImplicit_assignment_statementKeyword()); }

	'implicit_assignment_statement' 

{ after(grammarAccess.getImplicit_assignment_statementAccess().getImplicit_assignment_statementKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleimplicit_invocation_statement
entryRuleimplicit_invocation_statement 
:
{ before(grammarAccess.getImplicit_invocation_statementRule()); }
	 ruleimplicit_invocation_statement
{ after(grammarAccess.getImplicit_invocation_statementRule()); } 
	 EOF 
;

// Rule implicit_invocation_statement
ruleimplicit_invocation_statement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getImplicit_invocation_statementAccess().getImplicit_invocation_statementKeyword()); }

	'implicit_invocation_statement' 

{ after(grammarAccess.getImplicit_invocation_statementAccess().getImplicit_invocation_statementKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleimplicit_ib_transform_statement
entryRuleimplicit_ib_transform_statement 
:
{ before(grammarAccess.getImplicit_ib_transform_statementRule()); }
	 ruleimplicit_ib_transform_statement
{ after(grammarAccess.getImplicit_ib_transform_statementRule()); } 
	 EOF 
;

// Rule implicit_ib_transform_statement
ruleimplicit_ib_transform_statement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getImplicit_ib_transform_statementAccess().getImplicit_ib_transform_statementKeyword()); }

	'implicit_ib_transform_statement' 

{ after(grammarAccess.getImplicit_ib_transform_statementAccess().getImplicit_ib_transform_statementKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulerelate_statement
entryRulerelate_statement 
:
{ before(grammarAccess.getRelate_statementRule()); }
	 rulerelate_statement
{ after(grammarAccess.getRelate_statementRule()); } 
	 EOF 
;

// Rule relate_statement
rulerelate_statement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRelate_statementAccess().getGroup()); }
(rule__Relate_statement__Group__0)
{ after(grammarAccess.getRelate_statementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulereturn_statement
entryRulereturn_statement 
:
{ before(grammarAccess.getReturn_statementRule()); }
	 rulereturn_statement
{ after(grammarAccess.getReturn_statementRule()); } 
	 EOF 
;

// Rule return_statement
rulereturn_statement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getReturn_statementAccess().getGroup()); }
(rule__Return_statement__Group__0)
{ after(grammarAccess.getReturn_statementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleselect_statement
entryRuleselect_statement 
:
{ before(grammarAccess.getSelect_statementRule()); }
	 ruleselect_statement
{ after(grammarAccess.getSelect_statementRule()); } 
	 EOF 
;

// Rule select_statement
ruleselect_statement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSelect_statementAccess().getGroup()); }
(rule__Select_statement__Group__0)
{ after(grammarAccess.getSelect_statementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuletransform_statement
entryRuletransform_statement 
:
{ before(grammarAccess.getTransform_statementRule()); }
	 ruletransform_statement
{ after(grammarAccess.getTransform_statementRule()); } 
	 EOF 
;

// Rule transform_statement
ruletransform_statement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTransform_statementAccess().getTransformKeyword()); }

	'transform' 

{ after(grammarAccess.getTransform_statementAccess().getTransformKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulefunction_statement
entryRulefunction_statement 
:
{ before(grammarAccess.getFunction_statementRule()); }
	 rulefunction_statement
{ after(grammarAccess.getFunction_statementRule()); } 
	 EOF 
;

// Rule function_statement
rulefunction_statement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFunction_statementAccess().getFunction_statementKeyword()); }

	'function_statement' 

{ after(grammarAccess.getFunction_statementAccess().getFunction_statementKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleunrelate_statement
entryRuleunrelate_statement 
:
{ before(grammarAccess.getUnrelate_statementRule()); }
	 ruleunrelate_statement
{ after(grammarAccess.getUnrelate_statementRule()); } 
	 EOF 
;

// Rule unrelate_statement
ruleunrelate_statement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUnrelate_statementAccess().getGroup()); }
(rule__Unrelate_statement__Group__0)
{ after(grammarAccess.getUnrelate_statementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulewhile_statement
entryRulewhile_statement 
:
{ before(grammarAccess.getWhile_statementRule()); }
	 rulewhile_statement
{ after(grammarAccess.getWhile_statementRule()); } 
	 EOF 
;

// Rule while_statement
rulewhile_statement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getWhile_statementAccess().getGroup()); }
(rule__While_statement__Group__0)
{ after(grammarAccess.getWhile_statementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleassignment_expr
entryRuleassignment_expr 
:
{ before(grammarAccess.getAssignment_exprRule()); }
	 ruleassignment_expr
{ after(grammarAccess.getAssignment_exprRule()); } 
	 EOF 
;

// Rule assignment_expr
ruleassignment_expr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAssignment_exprAccess().getGroup()); }
(rule__Assignment_expr__Group__0)
{ after(grammarAccess.getAssignment_exprAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulebridge_invocation
entryRulebridge_invocation 
:
{ before(grammarAccess.getBridge_invocationRule()); }
	 rulebridge_invocation
{ after(grammarAccess.getBridge_invocationRule()); } 
	 EOF 
;

// Rule bridge_invocation
rulebridge_invocation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBridge_invocationAccess().getGroup()); }
(rule__Bridge_invocation__Group__0)
{ after(grammarAccess.getBridge_invocationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleinvocation
entryRuleinvocation 
:
{ before(grammarAccess.getInvocationRule()); }
	 ruleinvocation
{ after(grammarAccess.getInvocationRule()); } 
	 EOF 
;

// Rule invocation
ruleinvocation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInvocationAccess().getInvocationRuleKeyword()); }

	'invocation rule' 

{ after(grammarAccess.getInvocationAccess().getInvocationRuleKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}









// Entry rule entryRuledebug_operand
entryRuledebug_operand 
:
{ before(grammarAccess.getDebug_operandRule()); }
	 ruledebug_operand
{ after(grammarAccess.getDebug_operandRule()); } 
	 EOF 
;

// Rule debug_operand
ruledebug_operand
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDebug_operandAccess().getAlternatives()); }
(rule__Debug_operand__Alternatives)
{ after(grammarAccess.getDebug_operandAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleevent_spec
entryRuleevent_spec 
:
{ before(grammarAccess.getEvent_specRule()); }
	 ruleevent_spec
{ after(grammarAccess.getEvent_specRule()); } 
	 EOF 
;

// Rule event_spec
ruleevent_spec
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEvent_specAccess().getGroup()); }
(rule__Event_spec__Group__0)
{ after(grammarAccess.getEvent_specAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleinst_ref_var_or_ee_keyletters
entryRuleinst_ref_var_or_ee_keyletters 
:
{ before(grammarAccess.getInst_ref_var_or_ee_keylettersRule()); }
	 ruleinst_ref_var_or_ee_keyletters
{ after(grammarAccess.getInst_ref_var_or_ee_keylettersRule()); } 
	 EOF 
;

// Rule inst_ref_var_or_ee_keyletters
ruleinst_ref_var_or_ee_keyletters
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInst_ref_var_or_ee_keylettersAccess().getLocal_variableParserRuleCall()); }
	rulelocal_variable
{ after(grammarAccess.getInst_ref_var_or_ee_keylettersAccess().getLocal_variableParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}







// Entry rule entryRuleinstance_chain
entryRuleinstance_chain 
:
{ before(grammarAccess.getInstance_chainRule()); }
	 ruleinstance_chain
{ after(grammarAccess.getInstance_chainRule()); } 
	 EOF 
;

// Rule instance_chain
ruleinstance_chain
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInstance_chainAccess().getInstance_chainKeyword()); }

	'instance_chain' 

{ after(grammarAccess.getInstance_chainAccess().getInstance_chainKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleobject_spec
entryRuleobject_spec 
:
{ before(grammarAccess.getObject_specRule()); }
	 ruleobject_spec
{ after(grammarAccess.getObject_specRule()); } 
	 EOF 
;

// Rule object_spec
ruleobject_spec
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getObject_specAccess().getAlternatives()); }
(rule__Object_spec__Alternatives)
{ after(grammarAccess.getObject_specAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



















// Entry rule entryRuledata_item
entryRuledata_item 
:
{ before(grammarAccess.getData_itemRule()); }
	 ruledata_item
{ after(grammarAccess.getData_itemRule()); } 
	 EOF 
;

// Rule data_item
ruledata_item
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getData_itemAccess().getData_item_nameParserRuleCall()); }
	ruledata_item_name
{ after(grammarAccess.getData_itemAccess().getData_item_nameParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuledata_item_name
entryRuledata_item_name 
:
{ before(grammarAccess.getData_item_nameRule()); }
	 ruledata_item_name
{ after(grammarAccess.getData_item_nameRule()); } 
	 EOF 
;

// Rule data_item_name
ruledata_item_name
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getData_item_nameAccess().getGeneral_nameParserRuleCall()); }
	rulegeneral_name
{ after(grammarAccess.getData_item_nameAccess().getGeneral_nameParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}







// Entry rule entryRulekeyletters
entryRulekeyletters 
:
{ before(grammarAccess.getKeylettersRule()); }
	 rulekeyletters
{ after(grammarAccess.getKeylettersRule()); } 
	 EOF 
;

// Rule keyletters
rulekeyletters
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getKeylettersAccess().getGeneral_nameParserRuleCall()); }
	rulegeneral_name
{ after(grammarAccess.getKeylettersAccess().getGeneral_nameParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleee_keyletters
entryRuleee_keyletters 
:
{ before(grammarAccess.getEe_keylettersRule()); }
	 ruleee_keyletters
{ after(grammarAccess.getEe_keylettersRule()); } 
	 EOF 
;

// Rule ee_keyletters
ruleee_keyletters
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEe_keylettersAccess().getKeylettersParserRuleCall()); }
	rulekeyletters
{ after(grammarAccess.getEe_keylettersAccess().getKeylettersParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleevent_label
entryRuleevent_label 
:
{ before(grammarAccess.getEvent_labelRule()); }
	 ruleevent_label
{ after(grammarAccess.getEvent_labelRule()); } 
	 EOF 
;

// Rule event_label
ruleevent_label
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEvent_labelAccess().getGeneral_nameParserRuleCall()); }
	rulegeneral_name
{ after(grammarAccess.getEvent_labelAccess().getGeneral_nameParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRulegeneral_name
entryRulegeneral_name 
:
{ before(grammarAccess.getGeneral_nameRule()); }
	 rulegeneral_name
{ after(grammarAccess.getGeneral_nameRule()); } 
	 EOF 
;

// Rule general_name
rulegeneral_name
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getGeneral_nameAccess().getLimited_nameParserRuleCall()); }
	rulelimited_name
{ after(grammarAccess.getGeneral_nameAccess().getLimited_nameParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulesvc_general_name
entryRulesvc_general_name 
:
{ before(grammarAccess.getSvc_general_nameRule()); }
	 rulesvc_general_name
{ after(grammarAccess.getSvc_general_nameRule()); } 
	 EOF 
;

// Rule svc_general_name
rulesvc_general_name
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSvc_general_nameAccess().getLimited_nameParserRuleCall()); }
	rulelimited_name
{ after(grammarAccess.getSvc_general_nameAccess().getLimited_nameParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulelimited_name
entryRulelimited_name 
:
{ before(grammarAccess.getLimited_nameRule()); }
	 rulelimited_name
{ after(grammarAccess.getLimited_nameRule()); } 
	 EOF 
;

// Rule limited_name
rulelimited_name
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLimited_nameAccess().getIDTerminalRuleCall()); }
	RULE_ID
{ after(grammarAccess.getLimited_nameAccess().getIDTerminalRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleinst_ref_set_var
entryRuleinst_ref_set_var 
:
{ before(grammarAccess.getInst_ref_set_varRule()); }
	 ruleinst_ref_set_var
{ after(grammarAccess.getInst_ref_set_varRule()); } 
	 EOF 
;

// Rule inst_ref_set_var
ruleinst_ref_set_var
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInst_ref_set_varAccess().getA1Assignment()); }
(rule__Inst_ref_set_var__A1Assignment)
{ after(grammarAccess.getInst_ref_set_varAccess().getA1Assignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleinst_ref_var
entryRuleinst_ref_var 
:
{ before(grammarAccess.getInst_ref_varRule()); }
	 ruleinst_ref_var
{ after(grammarAccess.getInst_ref_varRule()); } 
	 EOF 
;

// Rule inst_ref_var
ruleinst_ref_var
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInst_ref_varAccess().getA1Assignment()); }
(rule__Inst_ref_var__A1Assignment)
{ after(grammarAccess.getInst_ref_varAccess().getA1Assignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulelocal_variable
entryRulelocal_variable 
:
{ before(grammarAccess.getLocal_variableRule()); }
	 rulelocal_variable
{ after(grammarAccess.getLocal_variableRule()); } 
	 EOF 
;

// Rule local_variable
rulelocal_variable
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLocal_variableAccess().getRoot_element_labelParserRuleCall()); }
	ruleroot_element_label
{ after(grammarAccess.getLocal_variableAccess().getRoot_element_labelParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleroot_element_label
entryRuleroot_element_label 
:
{ before(grammarAccess.getRoot_element_labelRule()); }
	 ruleroot_element_label
{ after(grammarAccess.getRoot_element_labelRule()); } 
	 EOF 
;

// Rule root_element_label
ruleroot_element_label
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRoot_element_labelAccess().getAlternatives()); }
(rule__Root_element_label__Alternatives)
{ after(grammarAccess.getRoot_element_labelAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleelement_label
entryRuleelement_label 
:
{ before(grammarAccess.getElement_labelRule()); }
	 ruleelement_label
{ after(grammarAccess.getElement_labelRule()); } 
	 EOF 
;

// Rule element_label
ruleelement_label
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getElement_labelAccess().getGeneral_nameParserRuleCall()); }
	rulegeneral_name
{ after(grammarAccess.getElement_labelAccess().getGeneral_nameParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulefunction_name
entryRulefunction_name 
:
{ before(grammarAccess.getFunction_nameRule()); }
	 rulefunction_name
{ after(grammarAccess.getFunction_nameRule()); } 
	 EOF 
;

// Rule function_name
rulefunction_name
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFunction_nameAccess().getGeneral_nameParserRuleCall()); }
	rulegeneral_name
{ after(grammarAccess.getFunction_nameAccess().getGeneral_nameParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulesvc_function_name
entryRulesvc_function_name 
:
{ before(grammarAccess.getSvc_function_nameRule()); }
	 rulesvc_function_name
{ after(grammarAccess.getSvc_function_nameRule()); } 
	 EOF 
;

// Rule svc_function_name
rulesvc_function_name
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSvc_function_nameAccess().getSvc_general_nameParserRuleCall()); }
	rulesvc_general_name
{ after(grammarAccess.getSvc_function_nameAccess().getSvc_general_nameParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleobject_keyletters
entryRuleobject_keyletters 
:
{ before(grammarAccess.getObject_keylettersRule()); }
	 ruleobject_keyletters
{ after(grammarAccess.getObject_keylettersRule()); } 
	 EOF 
;

// Rule object_keyletters
ruleobject_keyletters
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getObject_keylettersAccess().getKeylettersParserRuleCall()); }
	rulekeyletters
{ after(grammarAccess.getObject_keylettersAccess().getKeylettersParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulephrase
entryRulephrase 
:
{ before(grammarAccess.getPhraseRule()); }
	 rulephrase
{ after(grammarAccess.getPhraseRule()); } 
	 EOF 
;

// Rule phrase
rulephrase
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPhraseAccess().getPhraseKeyword()); }

	'phrase' 

{ after(grammarAccess.getPhraseAccess().getPhraseKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulerelationship
entryRulerelationship 
:
{ before(grammarAccess.getRelationshipRule()); }
	 rulerelationship
{ after(grammarAccess.getRelationshipRule()); } 
	 EOF 
;

// Rule relationship
rulerelationship
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRelationshipAccess().getIDTerminalRuleCall()); }
	RULE_ID
{ after(grammarAccess.getRelationshipAccess().getIDTerminalRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulesupp_data_item
entryRulesupp_data_item 
:
{ before(grammarAccess.getSupp_data_itemRule()); }
	 rulesupp_data_item
{ after(grammarAccess.getSupp_data_itemRule()); } 
	 EOF 
;

// Rule supp_data_item
rulesupp_data_item
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSupp_data_itemAccess().getData_item_nameParserRuleCall()); }
	ruledata_item_name
{ after(grammarAccess.getSupp_data_itemAccess().getData_item_nameParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}







// Entry rule entryRuleexpr
entryRuleexpr 
:
{ before(grammarAccess.getExprRule()); }
	 ruleexpr
{ after(grammarAccess.getExprRule()); } 
	 EOF 
;

// Rule expr
ruleexpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExprAccess().getA1Assignment()); }
(rule__Expr__A1Assignment)
{ after(grammarAccess.getExprAccess().getA1Assignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulesub_expr
entryRulesub_expr 
:
{ before(grammarAccess.getSub_exprRule()); }
	 rulesub_expr
{ after(grammarAccess.getSub_exprRule()); } 
	 EOF 
;

// Rule sub_expr
rulesub_expr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSub_exprAccess().getGroup()); }
(rule__Sub_expr__Group__0)
{ after(grammarAccess.getSub_exprAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleconjunction
entryRuleconjunction 
:
{ before(grammarAccess.getConjunctionRule()); }
	 ruleconjunction
{ after(grammarAccess.getConjunctionRule()); } 
	 EOF 
;

// Rule conjunction
ruleconjunction
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConjunctionAccess().getGroup()); }
(rule__Conjunction__Group__0)
{ after(grammarAccess.getConjunctionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulerelational_expr
entryRulerelational_expr 
:
{ before(grammarAccess.getRelational_exprRule()); }
	 rulerelational_expr
{ after(grammarAccess.getRelational_exprRule()); } 
	 EOF 
;

// Rule relational_expr
rulerelational_expr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRelational_exprAccess().getGroup()); }
(rule__Relational_expr__Group__0)
{ after(grammarAccess.getRelational_exprAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleaddition
entryRuleaddition 
:
{ before(grammarAccess.getAdditionRule()); }
	 ruleaddition
{ after(grammarAccess.getAdditionRule()); } 
	 EOF 
;

// Rule addition
ruleaddition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAdditionAccess().getGroup()); }
(rule__Addition__Group__0)
{ after(grammarAccess.getAdditionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulemultiplication
entryRulemultiplication 
:
{ before(grammarAccess.getMultiplicationRule()); }
	 rulemultiplication
{ after(grammarAccess.getMultiplicationRule()); } 
	 EOF 
;

// Rule multiplication
rulemultiplication
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMultiplicationAccess().getGroup()); }
(rule__Multiplication__Group__0)
{ after(grammarAccess.getMultiplicationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulesign_expr
entryRulesign_expr 
:
{ before(grammarAccess.getSign_exprRule()); }
	 rulesign_expr
{ after(grammarAccess.getSign_exprRule()); } 
	 EOF 
;

// Rule sign_expr
rulesign_expr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSign_exprAccess().getTermParserRuleCall()); }
	ruleterm
{ after(grammarAccess.getSign_exprAccess().getTermParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleterm
entryRuleterm 
:
{ before(grammarAccess.getTermRule()); }
	 ruleterm
{ after(grammarAccess.getTermRule()); } 
	 EOF 
;

// Rule term
ruleterm
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTermAccess().getAlternatives()); }
(rule__Term__Alternatives)
{ after(grammarAccess.getTermAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}









// Entry rule entryRuleinstance_start_segment
entryRuleinstance_start_segment 
:
{ before(grammarAccess.getInstance_start_segmentRule()); }
	 ruleinstance_start_segment
{ after(grammarAccess.getInstance_start_segmentRule()); } 
	 EOF 
;

// Rule instance_start_segment
ruleinstance_start_segment
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInstance_start_segmentAccess().getGroup()); }
(rule__Instance_start_segment__Group__0)
{ after(grammarAccess.getInstance_start_segmentAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}











// Entry rule entryRulearray_refs
entryRulearray_refs 
:
{ before(grammarAccess.getArray_refsRule()); }
	 rulearray_refs
{ after(grammarAccess.getArray_refsRule()); } 
	 EOF 
;

// Rule array_refs
rulearray_refs
    @init {
		int stackSize = keepStackSize();
    }
	:
(
(
{ before(grammarAccess.getArray_refsAccess().getGroup()); }
(rule__Array_refs__Group__0)
{ after(grammarAccess.getArray_refsAccess().getGroup()); }
)
(
{ before(grammarAccess.getArray_refsAccess().getGroup()); }
(rule__Array_refs__Group__0)*
{ after(grammarAccess.getArray_refsAccess().getGroup()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulerval
entryRulerval 
:
{ before(grammarAccess.getRvalRule()); }
	 rulerval
{ after(grammarAccess.getRvalRule()); } 
	 EOF 
;

// Rule rval
rulerval
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRvalAccess().getConstant_valueParserRuleCall()); }
	ruleconstant_value
{ after(grammarAccess.getRvalAccess().getConstant_valueParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleconstant_value
entryRuleconstant_value 
:
{ before(grammarAccess.getConstant_valueRule()); }
	 ruleconstant_value
{ after(grammarAccess.getConstant_valueRule()); } 
	 EOF 
;

// Rule constant_value
ruleconstant_value
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConstant_valueAccess().getAlternatives()); }
(rule__Constant_value__Alternatives)
{ after(grammarAccess.getConstant_valueAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulecomparison_operator
entryRulecomparison_operator 
:
{ before(grammarAccess.getComparison_operatorRule()); }
	 rulecomparison_operator
{ after(grammarAccess.getComparison_operatorRule()); } 
	 EOF 
;

// Rule comparison_operator
rulecomparison_operator
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getComparison_operatorAccess().getAlternatives()); }
(rule__Comparison_operator__Alternatives)
{ after(grammarAccess.getComparison_operatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleplus_or_minus
entryRuleplus_or_minus 
:
{ before(grammarAccess.getPlus_or_minusRule()); }
	 ruleplus_or_minus
{ after(grammarAccess.getPlus_or_minusRule()); } 
	 EOF 
;

// Rule plus_or_minus
ruleplus_or_minus
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPlus_or_minusAccess().getAlternatives()); }
(rule__Plus_or_minus__Alternatives)
{ after(grammarAccess.getPlus_or_minusAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulemult_op
entryRulemult_op 
:
{ before(grammarAccess.getMult_opRule()); }
	 rulemult_op
{ after(grammarAccess.getMult_opRule()); } 
	 EOF 
;

// Rule mult_op
rulemult_op
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMult_opAccess().getAlternatives()); }
(rule__Mult_op__Alternatives)
{ after(grammarAccess.getMult_opAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleTOK_NUMBER
entryRuleTOK_NUMBER 
:
{ before(grammarAccess.getTOK_NUMBERRule()); }
	 ruleTOK_NUMBER
{ after(grammarAccess.getTOK_NUMBERRule()); } 
	 EOF 
;

// Rule TOK_NUMBER
ruleTOK_NUMBER
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTOK_NUMBERAccess().getINTTerminalRuleCall()); }
	RULE_INT
{ after(grammarAccess.getTOK_NUMBERAccess().getINTTerminalRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Statement__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getGroup_0_0()); }
(rule__Statement__Group_0_0__0)
{ after(grammarAccess.getStatementAccess().getGroup_0_0()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getImplicit_assignment_statementParserRuleCall_0_1()); }
	ruleimplicit_assignment_statement
{ after(grammarAccess.getStatementAccess().getImplicit_assignment_statementParserRuleCall_0_1()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getImplicit_invocation_statementParserRuleCall_0_2()); }
	ruleimplicit_invocation_statement
{ after(grammarAccess.getStatementAccess().getImplicit_invocation_statementParserRuleCall_0_2()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getAssignment_statementParserRuleCall_0_3()); }
	ruleassignment_statement
{ after(grammarAccess.getStatementAccess().getAssignment_statementParserRuleCall_0_3()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getControl_statementParserRuleCall_0_4()); }
	rulecontrol_statement
{ after(grammarAccess.getStatementAccess().getControl_statementParserRuleCall_0_4()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getBreak_statementParserRuleCall_0_5()); }
	rulebreak_statement
{ after(grammarAccess.getStatementAccess().getBreak_statementParserRuleCall_0_5()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getBridge_statementParserRuleCall_0_6()); }
	rulebridge_statement
{ after(grammarAccess.getStatementAccess().getBridge_statementParserRuleCall_0_6()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getSend_statementParserRuleCall_0_7()); }
	rulesend_statement
{ after(grammarAccess.getStatementAccess().getSend_statementParserRuleCall_0_7()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getContinue_statementParserRuleCall_0_8()); }
	rulecontinue_statement
{ after(grammarAccess.getStatementAccess().getContinue_statementParserRuleCall_0_8()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getCreate_object_statementParserRuleCall_0_9()); }
	rulecreate_object_statement
{ after(grammarAccess.getStatementAccess().getCreate_object_statementParserRuleCall_0_9()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getCreate_event_statementParserRuleCall_0_10()); }
	rulecreate_event_statement
{ after(grammarAccess.getStatementAccess().getCreate_event_statementParserRuleCall_0_10()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getDelete_statementParserRuleCall_0_11()); }
	ruledelete_statement
{ after(grammarAccess.getStatementAccess().getDelete_statementParserRuleCall_0_11()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getFor_statementParserRuleCall_0_12()); }
	rulefor_statement
{ after(grammarAccess.getStatementAccess().getFor_statementParserRuleCall_0_12()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getGenerate_statementParserRuleCall_0_13()); }
	rulegenerate_statement
{ after(grammarAccess.getStatementAccess().getGenerate_statementParserRuleCall_0_13()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getIf_statementParserRuleCall_0_14()); }
	ruleif_statement
{ after(grammarAccess.getStatementAccess().getIf_statementParserRuleCall_0_14()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getRelate_statementParserRuleCall_0_15()); }
	rulerelate_statement
{ after(grammarAccess.getStatementAccess().getRelate_statementParserRuleCall_0_15()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getReturn_statementParserRuleCall_0_16()); }
	rulereturn_statement
{ after(grammarAccess.getStatementAccess().getReturn_statementParserRuleCall_0_16()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getSelect_statementParserRuleCall_0_17()); }
	ruleselect_statement
{ after(grammarAccess.getStatementAccess().getSelect_statementParserRuleCall_0_17()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getTransform_statementParserRuleCall_0_18()); }
	ruletransform_statement
{ after(grammarAccess.getStatementAccess().getTransform_statementParserRuleCall_0_18()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getWhile_statementParserRuleCall_0_19()); }
	rulewhile_statement
{ after(grammarAccess.getStatementAccess().getWhile_statementParserRuleCall_0_19()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getUnrelate_statementParserRuleCall_0_20()); }
	ruleunrelate_statement
{ after(grammarAccess.getStatementAccess().getUnrelate_statementParserRuleCall_0_20()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getDebug_statementParserRuleCall_0_21()); }
	ruledebug_statement
{ after(grammarAccess.getStatementAccess().getDebug_statementParserRuleCall_0_21()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Select_statement__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelect_statementAccess().getGroup_1_0()); }
(rule__Select_statement__Group_1_0__0)
{ after(grammarAccess.getSelect_statementAccess().getGroup_1_0()); }
)

    |(
{ before(grammarAccess.getSelect_statementAccess().getGroup_1_1()); }
(rule__Select_statement__Group_1_1__0)
{ after(grammarAccess.getSelect_statementAccess().getGroup_1_1()); }
)

    |(
{ before(grammarAccess.getSelect_statementAccess().getGroup_1_2()); }
(rule__Select_statement__Group_1_2__0)
{ after(grammarAccess.getSelect_statementAccess().getGroup_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Debug_operand__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDebug_operandAccess().getGroup_0()); }
(rule__Debug_operand__Group_0__0)
{ after(grammarAccess.getDebug_operandAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getDebug_operandAccess().getGroup_1()); }
(rule__Debug_operand__Group_1__0)
{ after(grammarAccess.getDebug_operandAccess().getGroup_1()); }
)

    |(
{ before(grammarAccess.getDebug_operandAccess().getGroup_2()); }
(rule__Debug_operand__Group_2__0)
{ after(grammarAccess.getDebug_operandAccess().getGroup_2()); }
)

    |(
{ before(grammarAccess.getDebug_operandAccess().get_onKeyword_3()); }

	'_on' 

{ after(grammarAccess.getDebug_operandAccess().get_onKeyword_3()); }
)

    |(
{ before(grammarAccess.getDebug_operandAccess().get_offKeyword_4()); }

	'_off' 

{ after(grammarAccess.getDebug_operandAccess().get_offKeyword_4()); }
)

    |(
{ before(grammarAccess.getDebug_operandAccess().get_statKeyword_5()); }

	'_stat' 

{ after(grammarAccess.getDebug_operandAccess().get_statKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Debug_operand__Alternatives_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDebug_operandAccess().get_offKeyword_0_1_0()); }

	'_off' 

{ after(grammarAccess.getDebug_operandAccess().get_offKeyword_0_1_0()); }
)

    |(
{ before(grammarAccess.getDebug_operandAccess().get_onKeyword_0_1_1()); }

	'_on' 

{ after(grammarAccess.getDebug_operandAccess().get_onKeyword_0_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Debug_operand__Alternatives_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDebug_operandAccess().get_offKeyword_1_1_0()); }

	'_off' 

{ after(grammarAccess.getDebug_operandAccess().get_offKeyword_1_1_0()); }
)

    |(
{ before(grammarAccess.getDebug_operandAccess().get_onKeyword_1_1_1()); }

	'_on' 

{ after(grammarAccess.getDebug_operandAccess().get_onKeyword_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Debug_operand__Alternatives_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDebug_operandAccess().get_offKeyword_2_1_0()); }

	'_off' 

{ after(grammarAccess.getDebug_operandAccess().get_offKeyword_2_1_0()); }
)

    |(
{ before(grammarAccess.getDebug_operandAccess().get_onKeyword_2_1_1()); }

	'_on' 

{ after(grammarAccess.getDebug_operandAccess().get_onKeyword_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Object_spec__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getObject_specAccess().getGroup_0()); }
(rule__Object_spec__Group_0__0)
{ after(grammarAccess.getObject_specAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getObject_specAccess().getGroup_1()); }
(rule__Object_spec__Group_1__0)
{ after(grammarAccess.getObject_specAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Root_element_label__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRoot_element_labelAccess().getSelectedKeyword_0()); }

	'selected' 

{ after(grammarAccess.getRoot_element_labelAccess().getSelectedKeyword_0()); }
)

    |(
{ before(grammarAccess.getRoot_element_labelAccess().getSelfKeyword_1()); }

	'self' 

{ after(grammarAccess.getRoot_element_labelAccess().getSelfKeyword_1()); }
)

    |(
{ before(grammarAccess.getRoot_element_labelAccess().getLimited_nameParserRuleCall_2()); }
	rulelimited_name
{ after(grammarAccess.getRoot_element_labelAccess().getLimited_nameParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getA1Assignment_0()); }
(rule__Term__A1Assignment_0)
{ after(grammarAccess.getTermAccess().getA1Assignment_0()); }
)

    |(
{ before(grammarAccess.getTermAccess().getGroup_1()); }
(rule__Term__Group_1__0)
{ after(grammarAccess.getTermAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Constant_value__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConstant_valueAccess().getTOK_NUMBERParserRuleCall_0()); }
	ruleTOK_NUMBER
{ after(grammarAccess.getConstant_valueAccess().getTOK_NUMBERParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getConstant_valueAccess().getTOK_STRINGTerminalRuleCall_1()); }
	RULE_TOK_STRING
{ after(grammarAccess.getConstant_valueAccess().getTOK_STRINGTerminalRuleCall_1()); }
)

    |(
{ before(grammarAccess.getConstant_valueAccess().getTrueKeyword_2()); }

	'true' 

{ after(grammarAccess.getConstant_valueAccess().getTrueKeyword_2()); }
)

    |(
{ before(grammarAccess.getConstant_valueAccess().getFalseKeyword_3()); }

	'false' 

{ after(grammarAccess.getConstant_valueAccess().getFalseKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison_operator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparison_operatorAccess().getEqualsSignEqualsSignKeyword_0()); }

	'==' 

{ after(grammarAccess.getComparison_operatorAccess().getEqualsSignEqualsSignKeyword_0()); }
)

    |(
{ before(grammarAccess.getComparison_operatorAccess().getTOK_NOTEQUALTerminalRuleCall_1()); }
	RULE_TOK_NOTEQUAL
{ after(grammarAccess.getComparison_operatorAccess().getTOK_NOTEQUALTerminalRuleCall_1()); }
)

    |(
{ before(grammarAccess.getComparison_operatorAccess().getTOK_LESSTHANTerminalRuleCall_2()); }
	RULE_TOK_LESSTHAN
{ after(grammarAccess.getComparison_operatorAccess().getTOK_LESSTHANTerminalRuleCall_2()); }
)

    |(
{ before(grammarAccess.getComparison_operatorAccess().getTOK_LETerminalRuleCall_3()); }
	RULE_TOK_LE
{ after(grammarAccess.getComparison_operatorAccess().getTOK_LETerminalRuleCall_3()); }
)

    |(
{ before(grammarAccess.getComparison_operatorAccess().getTOK_GTTerminalRuleCall_4()); }
	RULE_TOK_GT
{ after(grammarAccess.getComparison_operatorAccess().getTOK_GTTerminalRuleCall_4()); }
)

    |(
{ before(grammarAccess.getComparison_operatorAccess().getTOK_GETerminalRuleCall_5()); }
	RULE_TOK_GE
{ after(grammarAccess.getComparison_operatorAccess().getTOK_GETerminalRuleCall_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Plus_or_minus__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPlus_or_minusAccess().getTOK_PLUSTerminalRuleCall_0()); }
	RULE_TOK_PLUS
{ after(grammarAccess.getPlus_or_minusAccess().getTOK_PLUSTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getPlus_or_minusAccess().getTOK_MINUSTerminalRuleCall_1()); }
	RULE_TOK_MINUS
{ after(grammarAccess.getPlus_or_minusAccess().getTOK_MINUSTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Mult_op__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMult_opAccess().getTOK_TIMESTerminalRuleCall_0()); }
	RULE_TOK_TIMES
{ after(grammarAccess.getMult_opAccess().getTOK_TIMESTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getMult_opAccess().getTOK_DIVTerminalRuleCall_1()); }
	RULE_TOK_DIV
{ after(grammarAccess.getMult_opAccess().getTOK_DIVTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Statement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Statement__Group__0__Impl
	rule__Statement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getAlternatives_0()); }
(rule__Statement__Alternatives_0)
{ after(grammarAccess.getStatementAccess().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Statement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Statement__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getSemicolonKeyword_1()); }

	';' 

{ after(grammarAccess.getStatementAccess().getSemicolonKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Statement__Group_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Statement__Group_0_0__0__Impl
	rule__Statement__Group_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getImplicit_ib_transform_statementParserRuleCall_0_0_0()); }
	ruleimplicit_ib_transform_statement
{ after(grammarAccess.getStatementAccess().getImplicit_ib_transform_statementParserRuleCall_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Statement__Group_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Statement__Group_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getFunction_statementParserRuleCall_0_0_1()); }
	rulefunction_statement
{ after(grammarAccess.getStatementAccess().getFunction_statementParserRuleCall_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Assignment_statement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignment_statement__Group__0__Impl
	rule__Assignment_statement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment_statement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignment_statementAccess().getAssignKeyword_0()); }

	'assign' 

{ after(grammarAccess.getAssignment_statementAccess().getAssignKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Assignment_statement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignment_statement__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment_statement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignment_statementAccess().getA1Assignment_1()); }
(rule__Assignment_statement__A1Assignment_1)
{ after(grammarAccess.getAssignment_statementAccess().getA1Assignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Control_statement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Control_statement__Group__0__Impl
	rule__Control_statement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Control_statement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getControl_statementAccess().getA1Assignment_0()); }
(rule__Control_statement__A1Assignment_0)
{ after(grammarAccess.getControl_statementAccess().getA1Assignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Control_statement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Control_statement__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Control_statement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getControl_statementAccess().getStopKeyword_1()); }

	'stop' 

{ after(grammarAccess.getControl_statementAccess().getStopKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Create_event_statement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Create_event_statement__Group__0__Impl
	rule__Create_event_statement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Create_event_statement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCreate_event_statementAccess().getCreateKeyword_0()); }

	'create' 

{ after(grammarAccess.getCreate_event_statementAccess().getCreateKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Create_event_statement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Create_event_statement__Group__1__Impl
	rule__Create_event_statement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Create_event_statement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCreate_event_statementAccess().getEventKeyword_1()); }

	'event' 

{ after(grammarAccess.getCreate_event_statementAccess().getEventKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Create_event_statement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Create_event_statement__Group__2__Impl
	rule__Create_event_statement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Create_event_statement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCreate_event_statementAccess().getInstanceKeyword_2()); }

	'instance' 

{ after(grammarAccess.getCreate_event_statementAccess().getInstanceKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Create_event_statement__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Create_event_statement__Group__3__Impl
	rule__Create_event_statement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Create_event_statement__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCreate_event_statementAccess().getA1Assignment_3()); }
(rule__Create_event_statement__A1Assignment_3)
{ after(grammarAccess.getCreate_event_statementAccess().getA1Assignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Create_event_statement__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Create_event_statement__Group__4__Impl
	rule__Create_event_statement__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Create_event_statement__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCreate_event_statementAccess().getOfKeyword_4()); }

	'of' 

{ after(grammarAccess.getCreate_event_statementAccess().getOfKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Create_event_statement__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Create_event_statement__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Create_event_statement__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCreate_event_statementAccess().getA2Assignment_5()); }
(rule__Create_event_statement__A2Assignment_5)
{ after(grammarAccess.getCreate_event_statementAccess().getA2Assignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__Create_object_statement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Create_object_statement__Group__0__Impl
	rule__Create_object_statement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Create_object_statement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCreate_object_statementAccess().getCreateKeyword_0()); }

	'create' 

{ after(grammarAccess.getCreate_object_statementAccess().getCreateKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Create_object_statement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Create_object_statement__Group__1__Impl
	rule__Create_object_statement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Create_object_statement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCreate_object_statementAccess().getObjectKeyword_1()); }

	'object' 

{ after(grammarAccess.getCreate_object_statementAccess().getObjectKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Create_object_statement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Create_object_statement__Group__2__Impl
	rule__Create_object_statement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Create_object_statement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCreate_object_statementAccess().getInstanceKeyword_2()); }

	'instance' 

{ after(grammarAccess.getCreate_object_statementAccess().getInstanceKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Create_object_statement__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Create_object_statement__Group__3__Impl
	rule__Create_object_statement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Create_object_statement__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCreate_object_statementAccess().getA1Assignment_3()); }
(rule__Create_object_statement__A1Assignment_3)
{ after(grammarAccess.getCreate_object_statementAccess().getA1Assignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Create_object_statement__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Create_object_statement__Group__4__Impl
	rule__Create_object_statement__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Create_object_statement__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCreate_object_statementAccess().getOfKeyword_4()); }

	'of' 

{ after(grammarAccess.getCreate_object_statementAccess().getOfKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Create_object_statement__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Create_object_statement__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Create_object_statement__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCreate_object_statementAccess().getA2Assignment_5()); }
(rule__Create_object_statement__A2Assignment_5)
{ after(grammarAccess.getCreate_object_statementAccess().getA2Assignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__Debug_statement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Debug_statement__Group__0__Impl
	rule__Debug_statement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Debug_statement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDebug_statementAccess().get_debugKeyword_0()); }

	'_debug' 

{ after(grammarAccess.getDebug_statementAccess().get_debugKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Debug_statement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Debug_statement__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Debug_statement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getDebug_statementAccess().getDebug_operandParserRuleCall_1()); }
(	ruledebug_operand)
{ after(grammarAccess.getDebug_statementAccess().getDebug_operandParserRuleCall_1()); }
)
(
{ before(grammarAccess.getDebug_statementAccess().getDebug_operandParserRuleCall_1()); }
(	ruledebug_operand)*
{ after(grammarAccess.getDebug_statementAccess().getDebug_operandParserRuleCall_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Delete_statement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Delete_statement__Group__0__Impl
	rule__Delete_statement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Delete_statement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDelete_statementAccess().getDeleteKeyword_0()); }

	'delete' 

{ after(grammarAccess.getDelete_statementAccess().getDeleteKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Delete_statement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Delete_statement__Group__1__Impl
	rule__Delete_statement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Delete_statement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDelete_statementAccess().getObjectKeyword_1()); }

	'object' 

{ after(grammarAccess.getDelete_statementAccess().getObjectKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Delete_statement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Delete_statement__Group__2__Impl
	rule__Delete_statement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Delete_statement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDelete_statementAccess().getInstanceKeyword_2()); }

	'instance' 

{ after(grammarAccess.getDelete_statementAccess().getInstanceKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Delete_statement__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Delete_statement__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Delete_statement__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDelete_statementAccess().getA1Assignment_3()); }
(rule__Delete_statement__A1Assignment_3)
{ after(grammarAccess.getDelete_statementAccess().getA1Assignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__For_statement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__For_statement__Group__0__Impl
	rule__For_statement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__For_statement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFor_statementAccess().getForKeyword_0()); }

	'for' 

{ after(grammarAccess.getFor_statementAccess().getForKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__For_statement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__For_statement__Group__1__Impl
	rule__For_statement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__For_statement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFor_statementAccess().getEachKeyword_1()); }

	'each' 

{ after(grammarAccess.getFor_statementAccess().getEachKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__For_statement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__For_statement__Group__2__Impl
	rule__For_statement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__For_statement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFor_statementAccess().getA1Assignment_2()); }
(rule__For_statement__A1Assignment_2)
{ after(grammarAccess.getFor_statementAccess().getA1Assignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__For_statement__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__For_statement__Group__3__Impl
	rule__For_statement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__For_statement__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFor_statementAccess().getInKeyword_3()); }

	'in' 

{ after(grammarAccess.getFor_statementAccess().getInKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__For_statement__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__For_statement__Group__4__Impl
	rule__For_statement__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__For_statement__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFor_statementAccess().getA2Assignment_4()); }
(rule__For_statement__A2Assignment_4)
{ after(grammarAccess.getFor_statementAccess().getA2Assignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__For_statement__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__For_statement__Group__5__Impl
	rule__For_statement__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__For_statement__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFor_statementAccess().getA3Assignment_5()); }
(rule__For_statement__A3Assignment_5)
{ after(grammarAccess.getFor_statementAccess().getA3Assignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__For_statement__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__For_statement__Group__6__Impl
	rule__For_statement__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__For_statement__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFor_statementAccess().getEndKeyword_6()); }

	'end' 

{ after(grammarAccess.getFor_statementAccess().getEndKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__For_statement__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__For_statement__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__For_statement__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFor_statementAccess().getForKeyword_7()); }

	'for' 

{ after(grammarAccess.getFor_statementAccess().getForKeyword_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


















rule__Generate_statement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Generate_statement__Group__0__Impl
	rule__Generate_statement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Generate_statement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGenerate_statementAccess().getGenerateKeyword_0()); }

	'generate' 

{ after(grammarAccess.getGenerate_statementAccess().getGenerateKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Generate_statement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Generate_statement__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Generate_statement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGenerate_statementAccess().getA1Assignment_1()); }
(rule__Generate_statement__A1Assignment_1)
{ after(grammarAccess.getGenerate_statementAccess().getA1Assignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__If_statement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__If_statement__Group__0__Impl
	rule__If_statement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__If_statement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIf_statementAccess().getIfKeyword_0()); }

	'if' 

{ after(grammarAccess.getIf_statementAccess().getIfKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__If_statement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__If_statement__Group__1__Impl
	rule__If_statement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__If_statement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIf_statementAccess().getA1Assignment_1()); }
(rule__If_statement__A1Assignment_1)
{ after(grammarAccess.getIf_statementAccess().getA1Assignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__If_statement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__If_statement__Group__2__Impl
	rule__If_statement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__If_statement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIf_statementAccess().getA2Assignment_2()); }
(rule__If_statement__A2Assignment_2)
{ after(grammarAccess.getIf_statementAccess().getA2Assignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__If_statement__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__If_statement__Group__3__Impl
	rule__If_statement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__If_statement__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIf_statementAccess().getGroup_3()); }
(rule__If_statement__Group_3__0)?
{ after(grammarAccess.getIf_statementAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__If_statement__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__If_statement__Group__4__Impl
	rule__If_statement__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__If_statement__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIf_statementAccess().getGroup_4()); }
(rule__If_statement__Group_4__0)?
{ after(grammarAccess.getIf_statementAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__If_statement__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__If_statement__Group__5__Impl
	rule__If_statement__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__If_statement__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIf_statementAccess().getEndKeyword_5()); }

	'end' 

{ after(grammarAccess.getIf_statementAccess().getEndKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__If_statement__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__If_statement__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__If_statement__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIf_statementAccess().getIfKeyword_6()); }

	'if' 

{ after(grammarAccess.getIf_statementAccess().getIfKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__If_statement__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__If_statement__Group_3__0__Impl
	rule__If_statement__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__If_statement__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIf_statementAccess().getElifKeyword_3_0()); }

	'elif' 

{ after(grammarAccess.getIf_statementAccess().getElifKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__If_statement__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__If_statement__Group_3__1__Impl
	rule__If_statement__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__If_statement__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIf_statementAccess().getA3Assignment_3_1()); }
(rule__If_statement__A3Assignment_3_1)
{ after(grammarAccess.getIf_statementAccess().getA3Assignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__If_statement__Group_3__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__If_statement__Group_3__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__If_statement__Group_3__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIf_statementAccess().getA4Assignment_3_2()); }
(rule__If_statement__A4Assignment_3_2)
{ after(grammarAccess.getIf_statementAccess().getA4Assignment_3_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__If_statement__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__If_statement__Group_4__0__Impl
	rule__If_statement__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__If_statement__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIf_statementAccess().getElseKeyword_4_0()); }

	'else' 

{ after(grammarAccess.getIf_statementAccess().getElseKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__If_statement__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__If_statement__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__If_statement__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIf_statementAccess().getA5Assignment_4_1()); }
(rule__If_statement__A5Assignment_4_1)
{ after(grammarAccess.getIf_statementAccess().getA5Assignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Relate_statement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Relate_statement__Group__0__Impl
	rule__Relate_statement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Relate_statement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelate_statementAccess().getRelateKeyword_0()); }

	'relate' 

{ after(grammarAccess.getRelate_statementAccess().getRelateKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Relate_statement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Relate_statement__Group__1__Impl
	rule__Relate_statement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Relate_statement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelate_statementAccess().getA1Assignment_1()); }
(rule__Relate_statement__A1Assignment_1)
{ after(grammarAccess.getRelate_statementAccess().getA1Assignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Relate_statement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Relate_statement__Group__2__Impl
	rule__Relate_statement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Relate_statement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelate_statementAccess().getToKeyword_2()); }

	'to' 

{ after(grammarAccess.getRelate_statementAccess().getToKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Relate_statement__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Relate_statement__Group__3__Impl
	rule__Relate_statement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Relate_statement__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelate_statementAccess().getA2Assignment_3()); }
(rule__Relate_statement__A2Assignment_3)
{ after(grammarAccess.getRelate_statementAccess().getA2Assignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Relate_statement__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Relate_statement__Group__4__Impl
	rule__Relate_statement__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Relate_statement__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelate_statementAccess().getAcrossKeyword_4()); }

	'across' 

{ after(grammarAccess.getRelate_statementAccess().getAcrossKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Relate_statement__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Relate_statement__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Relate_statement__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelate_statementAccess().getA3Assignment_5()); }
(rule__Relate_statement__A3Assignment_5)
{ after(grammarAccess.getRelate_statementAccess().getA3Assignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__Return_statement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Return_statement__Group__0__Impl
	rule__Return_statement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Return_statement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReturn_statementAccess().getA1Assignment_0()); }
(rule__Return_statement__A1Assignment_0)
{ after(grammarAccess.getReturn_statementAccess().getA1Assignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Return_statement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Return_statement__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Return_statement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReturn_statementAccess().getA2Assignment_1()); }
(rule__Return_statement__A2Assignment_1)?
{ after(grammarAccess.getReturn_statementAccess().getA2Assignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Select_statement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Select_statement__Group__0__Impl
	rule__Select_statement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Select_statement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelect_statementAccess().getSelectKeyword_0()); }

	'select' 

{ after(grammarAccess.getSelect_statementAccess().getSelectKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Select_statement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Select_statement__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Select_statement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelect_statementAccess().getAlternatives_1()); }
(rule__Select_statement__Alternatives_1)
{ after(grammarAccess.getSelect_statementAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Select_statement__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Select_statement__Group_1_0__0__Impl
	rule__Select_statement__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Select_statement__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelect_statementAccess().getOneKeyword_1_0_0()); }

	'one' 

{ after(grammarAccess.getSelect_statementAccess().getOneKeyword_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Select_statement__Group_1_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Select_statement__Group_1_0__1__Impl
	rule__Select_statement__Group_1_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Select_statement__Group_1_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelect_statementAccess().getLocal_variableParserRuleCall_1_0_1()); }
	rulelocal_variable
{ after(grammarAccess.getSelect_statementAccess().getLocal_variableParserRuleCall_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Select_statement__Group_1_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Select_statement__Group_1_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Select_statement__Group_1_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelect_statementAccess().getA1Assignment_1_0_2()); }
(rule__Select_statement__A1Assignment_1_0_2)
{ after(grammarAccess.getSelect_statementAccess().getA1Assignment_1_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Select_statement__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Select_statement__Group_1_1__0__Impl
	rule__Select_statement__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Select_statement__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelect_statementAccess().getAnyKeyword_1_1_0()); }

	'any' 

{ after(grammarAccess.getSelect_statementAccess().getAnyKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Select_statement__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Select_statement__Group_1_1__1__Impl
	rule__Select_statement__Group_1_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Select_statement__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelect_statementAccess().getLocal_variableParserRuleCall_1_1_1()); }
	rulelocal_variable
{ after(grammarAccess.getSelect_statementAccess().getLocal_variableParserRuleCall_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Select_statement__Group_1_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Select_statement__Group_1_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Select_statement__Group_1_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelect_statementAccess().getA2Assignment_1_1_2()); }
(rule__Select_statement__A2Assignment_1_1_2)
{ after(grammarAccess.getSelect_statementAccess().getA2Assignment_1_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Select_statement__Group_1_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Select_statement__Group_1_2__0__Impl
	rule__Select_statement__Group_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Select_statement__Group_1_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelect_statementAccess().getManyKeyword_1_2_0()); }

	'many' 

{ after(grammarAccess.getSelect_statementAccess().getManyKeyword_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Select_statement__Group_1_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Select_statement__Group_1_2__1__Impl
	rule__Select_statement__Group_1_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Select_statement__Group_1_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelect_statementAccess().getLocal_variableParserRuleCall_1_2_1()); }
	rulelocal_variable
{ after(grammarAccess.getSelect_statementAccess().getLocal_variableParserRuleCall_1_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Select_statement__Group_1_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Select_statement__Group_1_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Select_statement__Group_1_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelect_statementAccess().getA3Assignment_1_2_2()); }
(rule__Select_statement__A3Assignment_1_2_2)
{ after(grammarAccess.getSelect_statementAccess().getA3Assignment_1_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Unrelate_statement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Unrelate_statement__Group__0__Impl
	rule__Unrelate_statement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Unrelate_statement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnrelate_statementAccess().getUnrelateKeyword_0()); }

	'unrelate' 

{ after(grammarAccess.getUnrelate_statementAccess().getUnrelateKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Unrelate_statement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Unrelate_statement__Group__1__Impl
	rule__Unrelate_statement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Unrelate_statement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnrelate_statementAccess().getA1Assignment_1()); }
(rule__Unrelate_statement__A1Assignment_1)
{ after(grammarAccess.getUnrelate_statementAccess().getA1Assignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Unrelate_statement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Unrelate_statement__Group__2__Impl
	rule__Unrelate_statement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Unrelate_statement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnrelate_statementAccess().getFromKeyword_2()); }

	'from' 

{ after(grammarAccess.getUnrelate_statementAccess().getFromKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Unrelate_statement__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Unrelate_statement__Group__3__Impl
	rule__Unrelate_statement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Unrelate_statement__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnrelate_statementAccess().getA2Assignment_3()); }
(rule__Unrelate_statement__A2Assignment_3)
{ after(grammarAccess.getUnrelate_statementAccess().getA2Assignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Unrelate_statement__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Unrelate_statement__Group__4__Impl
	rule__Unrelate_statement__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Unrelate_statement__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnrelate_statementAccess().getAcrossKeyword_4()); }

	'across' 

{ after(grammarAccess.getUnrelate_statementAccess().getAcrossKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Unrelate_statement__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Unrelate_statement__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Unrelate_statement__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnrelate_statementAccess().getA3Assignment_5()); }
(rule__Unrelate_statement__A3Assignment_5)
{ after(grammarAccess.getUnrelate_statementAccess().getA3Assignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__While_statement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__While_statement__Group__0__Impl
	rule__While_statement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__While_statement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhile_statementAccess().getWhileKeyword_0()); }

	'while' 

{ after(grammarAccess.getWhile_statementAccess().getWhileKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__While_statement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__While_statement__Group__1__Impl
	rule__While_statement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__While_statement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhile_statementAccess().getA1Assignment_1()); }
(rule__While_statement__A1Assignment_1)
{ after(grammarAccess.getWhile_statementAccess().getA1Assignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__While_statement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__While_statement__Group__2__Impl
	rule__While_statement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__While_statement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhile_statementAccess().getA2Assignment_2()); }
(rule__While_statement__A2Assignment_2)
{ after(grammarAccess.getWhile_statementAccess().getA2Assignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__While_statement__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__While_statement__Group__3__Impl
	rule__While_statement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__While_statement__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhile_statementAccess().getEndKeyword_3()); }

	'end' 

{ after(grammarAccess.getWhile_statementAccess().getEndKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__While_statement__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__While_statement__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__While_statement__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhile_statementAccess().getWhileKeyword_4()); }

	'while' 

{ after(grammarAccess.getWhile_statementAccess().getWhileKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Assignment_expr__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignment_expr__Group__0__Impl
	rule__Assignment_expr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment_expr__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignment_exprAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
{ after(grammarAccess.getAssignment_exprAccess().getIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Assignment_expr__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignment_expr__Group__1__Impl
	rule__Assignment_expr__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment_expr__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignment_exprAccess().getTOK_EQUALTerminalRuleCall_1()); }
	RULE_TOK_EQUAL
{ after(grammarAccess.getAssignment_exprAccess().getTOK_EQUALTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Assignment_expr__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assignment_expr__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment_expr__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignment_exprAccess().getA1Assignment_2()); }
(rule__Assignment_expr__A1Assignment_2)
{ after(grammarAccess.getAssignment_exprAccess().getA1Assignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Bridge_invocation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Bridge_invocation__Group__0__Impl
	rule__Bridge_invocation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Bridge_invocation__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBridge_invocationAccess().getA1Assignment_0()); }
(rule__Bridge_invocation__A1Assignment_0)
{ after(grammarAccess.getBridge_invocationAccess().getA1Assignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Bridge_invocation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Bridge_invocation__Group__1__Impl
	rule__Bridge_invocation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Bridge_invocation__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBridge_invocationAccess().getTOK_DOUBLECOLONTerminalRuleCall_1()); }
	RULE_TOK_DOUBLECOLON
{ after(grammarAccess.getBridge_invocationAccess().getTOK_DOUBLECOLONTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Bridge_invocation__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Bridge_invocation__Group__2__Impl
	rule__Bridge_invocation__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Bridge_invocation__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBridge_invocationAccess().getTOK_LPARENTerminalRuleCall_2()); }
	RULE_TOK_LPAREN
{ after(grammarAccess.getBridge_invocationAccess().getTOK_LPARENTerminalRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Bridge_invocation__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Bridge_invocation__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Bridge_invocation__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBridge_invocationAccess().getTOK_RPARENTerminalRuleCall_3()); }
	RULE_TOK_RPAREN
{ after(grammarAccess.getBridge_invocationAccess().getTOK_RPARENTerminalRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Debug_operand__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Debug_operand__Group_0__0__Impl
	rule__Debug_operand__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Debug_operand__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDebug_operandAccess().get_traceKeyword_0_0()); }

	'_trace' 

{ after(grammarAccess.getDebug_operandAccess().get_traceKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Debug_operand__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Debug_operand__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Debug_operand__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDebug_operandAccess().getAlternatives_0_1()); }
(rule__Debug_operand__Alternatives_0_1)
{ after(grammarAccess.getDebug_operandAccess().getAlternatives_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Debug_operand__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Debug_operand__Group_1__0__Impl
	rule__Debug_operand__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Debug_operand__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDebug_operandAccess().get_dumpKeyword_1_0()); }

	'_dump' 

{ after(grammarAccess.getDebug_operandAccess().get_dumpKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Debug_operand__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Debug_operand__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Debug_operand__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDebug_operandAccess().getAlternatives_1_1()); }
(rule__Debug_operand__Alternatives_1_1)
{ after(grammarAccess.getDebug_operandAccess().getAlternatives_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Debug_operand__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Debug_operand__Group_2__0__Impl
	rule__Debug_operand__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Debug_operand__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDebug_operandAccess().get_sorKeyword_2_0()); }

	'_sor' 

{ after(grammarAccess.getDebug_operandAccess().get_sorKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Debug_operand__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Debug_operand__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Debug_operand__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDebug_operandAccess().getAlternatives_2_1()); }
(rule__Debug_operand__Alternatives_2_1)
{ after(grammarAccess.getDebug_operandAccess().getAlternatives_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Event_spec__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Event_spec__Group__0__Impl
	rule__Event_spec__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Event_spec__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEvent_specAccess().getEvent_labelParserRuleCall_0()); }
	ruleevent_label
{ after(grammarAccess.getEvent_specAccess().getEvent_labelParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Event_spec__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Event_spec__Group__1__Impl
	rule__Event_spec__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Event_spec__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEvent_specAccess().getToKeyword_1()); }

	'to' 

{ after(grammarAccess.getEvent_specAccess().getToKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Event_spec__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Event_spec__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Event_spec__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEvent_specAccess().getInst_ref_var_or_ee_keylettersParserRuleCall_2()); }
	ruleinst_ref_var_or_ee_keyletters
{ after(grammarAccess.getEvent_specAccess().getInst_ref_var_or_ee_keylettersParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}









rule__Object_spec__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Object_spec__Group_0__0__Impl
	rule__Object_spec__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Object_spec__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getObject_specAccess().getRelatedKeyword_0_0()); }

	'related' 

{ after(grammarAccess.getObject_specAccess().getRelatedKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Object_spec__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Object_spec__Group_0__1__Impl
	rule__Object_spec__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Object_spec__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getObject_specAccess().getByKeyword_0_1()); }

	'by' 

{ after(grammarAccess.getObject_specAccess().getByKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Object_spec__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Object_spec__Group_0__2__Impl
	rule__Object_spec__Group_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Object_spec__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getObject_specAccess().getLocal_variableParserRuleCall_0_2()); }
	rulelocal_variable
{ after(grammarAccess.getObject_specAccess().getLocal_variableParserRuleCall_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Object_spec__Group_0__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Object_spec__Group_0__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Object_spec__Group_0__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getObject_specAccess().getInstance_chainParserRuleCall_0_3()); }
	ruleinstance_chain
{ after(grammarAccess.getObject_specAccess().getInstance_chainParserRuleCall_0_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Object_spec__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Object_spec__Group_1__0__Impl
	rule__Object_spec__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Object_spec__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getObject_specAccess().getFromKeyword_1_0()); }

	'from' 

{ after(grammarAccess.getObject_specAccess().getFromKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Object_spec__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Object_spec__Group_1__1__Impl
	rule__Object_spec__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Object_spec__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getObject_specAccess().getGroup_1_1()); }
(rule__Object_spec__Group_1_1__0)?
{ after(grammarAccess.getObject_specAccess().getGroup_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Object_spec__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Object_spec__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Object_spec__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getObject_specAccess().getObject_keylettersParserRuleCall_1_2()); }
	ruleobject_keyletters
{ after(grammarAccess.getObject_specAccess().getObject_keylettersParserRuleCall_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Object_spec__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Object_spec__Group_1_1__0__Impl
	rule__Object_spec__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Object_spec__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getObject_specAccess().getInstancesKeyword_1_1_0()); }

	'instances' 

{ after(grammarAccess.getObject_specAccess().getInstancesKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Object_spec__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Object_spec__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Object_spec__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getObject_specAccess().getOfKeyword_1_1_1()); }

	'of' 

{ after(grammarAccess.getObject_specAccess().getOfKeyword_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__Sub_expr__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Sub_expr__Group__0__Impl
	rule__Sub_expr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Sub_expr__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSub_exprAccess().getA1Assignment_0()); }
(rule__Sub_expr__A1Assignment_0)
{ after(grammarAccess.getSub_exprAccess().getA1Assignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Sub_expr__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Sub_expr__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Sub_expr__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSub_exprAccess().getGroup_1()); }
(rule__Sub_expr__Group_1__0)*
{ after(grammarAccess.getSub_exprAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Sub_expr__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Sub_expr__Group_1__0__Impl
	rule__Sub_expr__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Sub_expr__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSub_exprAccess().getOrKeyword_1_0()); }

	'or' 

{ after(grammarAccess.getSub_exprAccess().getOrKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Sub_expr__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Sub_expr__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Sub_expr__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSub_exprAccess().getA2Assignment_1_1()); }
(rule__Sub_expr__A2Assignment_1_1)
{ after(grammarAccess.getSub_exprAccess().getA2Assignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Conjunction__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Conjunction__Group__0__Impl
	rule__Conjunction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Conjunction__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConjunctionAccess().getA1Assignment_0()); }
(rule__Conjunction__A1Assignment_0)
{ after(grammarAccess.getConjunctionAccess().getA1Assignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Conjunction__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Conjunction__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Conjunction__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConjunctionAccess().getGroup_1()); }
(rule__Conjunction__Group_1__0)*
{ after(grammarAccess.getConjunctionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Conjunction__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Conjunction__Group_1__0__Impl
	rule__Conjunction__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Conjunction__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConjunctionAccess().getAndKeyword_1_0()); }

	'and' 

{ after(grammarAccess.getConjunctionAccess().getAndKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Conjunction__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Conjunction__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Conjunction__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConjunctionAccess().getA2Assignment_1_1()); }
(rule__Conjunction__A2Assignment_1_1)
{ after(grammarAccess.getConjunctionAccess().getA2Assignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Relational_expr__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Relational_expr__Group__0__Impl
	rule__Relational_expr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Relational_expr__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelational_exprAccess().getA1Assignment_0()); }
(rule__Relational_expr__A1Assignment_0)
{ after(grammarAccess.getRelational_exprAccess().getA1Assignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Relational_expr__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Relational_expr__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Relational_expr__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelational_exprAccess().getGroup_1()); }
(rule__Relational_expr__Group_1__0)?
{ after(grammarAccess.getRelational_exprAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Relational_expr__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Relational_expr__Group_1__0__Impl
	rule__Relational_expr__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Relational_expr__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelational_exprAccess().getComparison_operatorParserRuleCall_1_0()); }
	rulecomparison_operator
{ after(grammarAccess.getRelational_exprAccess().getComparison_operatorParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Relational_expr__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Relational_expr__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Relational_expr__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelational_exprAccess().getA2Assignment_1_1()); }
(rule__Relational_expr__A2Assignment_1_1)
{ after(grammarAccess.getRelational_exprAccess().getA2Assignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Addition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Addition__Group__0__Impl
	rule__Addition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getA1Assignment_0()); }
(rule__Addition__A1Assignment_0)
{ after(grammarAccess.getAdditionAccess().getA1Assignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Addition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Addition__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getGroup_1()); }
(rule__Addition__Group_1__0)*
{ after(grammarAccess.getAdditionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Addition__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Addition__Group_1__0__Impl
	rule__Addition__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getPlus_or_minusParserRuleCall_1_0()); }
	ruleplus_or_minus
{ after(grammarAccess.getAdditionAccess().getPlus_or_minusParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Addition__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Addition__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getA2Assignment_1_1()); }
(rule__Addition__A2Assignment_1_1)
{ after(grammarAccess.getAdditionAccess().getA2Assignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Multiplication__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group__0__Impl
	rule__Multiplication__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getA1Assignment_0()); }
(rule__Multiplication__A1Assignment_0)
{ after(grammarAccess.getMultiplicationAccess().getA1Assignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Multiplication__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getGroup_1()); }
(rule__Multiplication__Group_1__0)*
{ after(grammarAccess.getMultiplicationAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Multiplication__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group_1__0__Impl
	rule__Multiplication__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getMult_opParserRuleCall_1_0()); }
	rulemult_op
{ after(grammarAccess.getMultiplicationAccess().getMult_opParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Multiplication__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Multiplication__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getA2Assignment_1_1()); }
(rule__Multiplication__A2Assignment_1_1)
{ after(grammarAccess.getMultiplicationAccess().getA2Assignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__Term__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Term__Group_1__0__Impl
	rule__Term__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getTOK_LPARENTerminalRuleCall_1_0()); }
	RULE_TOK_LPAREN
{ after(grammarAccess.getTermAccess().getTOK_LPARENTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Term__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Term__Group_1__1__Impl
	rule__Term__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getA2Assignment_1_1()); }
(rule__Term__A2Assignment_1_1)
{ after(grammarAccess.getTermAccess().getA2Assignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Term__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Term__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Term__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getTOK_RPARENTerminalRuleCall_1_2()); }
	RULE_TOK_RPAREN
{ after(grammarAccess.getTermAccess().getTOK_RPARENTerminalRuleCall_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}











rule__Instance_start_segment__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Instance_start_segment__Group__0__Impl
	rule__Instance_start_segment__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Instance_start_segment__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstance_start_segmentAccess().getRoot_element_labelParserRuleCall_0()); }
	ruleroot_element_label
{ after(grammarAccess.getInstance_start_segmentAccess().getRoot_element_labelParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Instance_start_segment__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Instance_start_segment__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Instance_start_segment__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInstance_start_segmentAccess().getArray_refsParserRuleCall_1()); }
(	rulearray_refs)?
{ after(grammarAccess.getInstance_start_segmentAccess().getArray_refsParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Array_refs__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Array_refs__Group__0__Impl
	rule__Array_refs__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Array_refs__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArray_refsAccess().getTOK_LSQBRTerminalRuleCall_0()); }
	RULE_TOK_LSQBR
{ after(grammarAccess.getArray_refsAccess().getTOK_LSQBRTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Array_refs__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Array_refs__Group__1__Impl
	rule__Array_refs__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Array_refs__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArray_refsAccess().getA1Assignment_1()); }
(rule__Array_refs__A1Assignment_1)
{ after(grammarAccess.getArray_refsAccess().getA1Assignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Array_refs__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Array_refs__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Array_refs__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArray_refsAccess().getTOK_RSQBRTerminalRuleCall_2()); }
	RULE_TOK_RSQBR
{ after(grammarAccess.getArray_refsAccess().getTOK_RSQBRTerminalRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}









rule__Block__StatementsAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockAccess().getStatementsStatementParserRuleCall_0()); }
	rulestatement{ after(grammarAccess.getBlockAccess().getStatementsStatementParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment_statement__A1Assignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignment_statementAccess().getA1Assignment_exprParserRuleCall_1_0()); }
	ruleassignment_expr{ after(grammarAccess.getAssignment_statementAccess().getA1Assignment_exprParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Break_statement__A1Assignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBreak_statementAccess().getA1BreakKeyword_0()); }
(
{ before(grammarAccess.getBreak_statementAccess().getA1BreakKeyword_0()); }

	'break' 

{ after(grammarAccess.getBreak_statementAccess().getA1BreakKeyword_0()); }
)

{ after(grammarAccess.getBreak_statementAccess().getA1BreakKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Bridge_statement__A1Assignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBridge_statementAccess().getA1BridgeKeyword_0()); }
(
{ before(grammarAccess.getBridge_statementAccess().getA1BridgeKeyword_0()); }

	'bridge' 

{ after(grammarAccess.getBridge_statementAccess().getA1BridgeKeyword_0()); }
)

{ after(grammarAccess.getBridge_statementAccess().getA1BridgeKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Send_statement__A1Assignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSend_statementAccess().getA1SendKeyword_0()); }
(
{ before(grammarAccess.getSend_statementAccess().getA1SendKeyword_0()); }

	'send' 

{ after(grammarAccess.getSend_statementAccess().getA1SendKeyword_0()); }
)

{ after(grammarAccess.getSend_statementAccess().getA1SendKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Control_statement__A1Assignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getControl_statementAccess().getA1ControlKeyword_0_0()); }
(
{ before(grammarAccess.getControl_statementAccess().getA1ControlKeyword_0_0()); }

	'control' 

{ after(grammarAccess.getControl_statementAccess().getA1ControlKeyword_0_0()); }
)

{ after(grammarAccess.getControl_statementAccess().getA1ControlKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Continue_statement__A1Assignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContinue_statementAccess().getA1ContinueKeyword_0()); }
(
{ before(grammarAccess.getContinue_statementAccess().getA1ContinueKeyword_0()); }

	'continue' 

{ after(grammarAccess.getContinue_statementAccess().getA1ContinueKeyword_0()); }
)

{ after(grammarAccess.getContinue_statementAccess().getA1ContinueKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Create_event_statement__A1Assignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCreate_event_statementAccess().getA1Local_variableParserRuleCall_3_0()); }
	rulelocal_variable{ after(grammarAccess.getCreate_event_statementAccess().getA1Local_variableParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Create_event_statement__A2Assignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCreate_event_statementAccess().getA2Event_specParserRuleCall_5_0()); }
	ruleevent_spec{ after(grammarAccess.getCreate_event_statementAccess().getA2Event_specParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Create_object_statement__A1Assignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCreate_object_statementAccess().getA1Local_variableParserRuleCall_3_0()); }
	rulelocal_variable{ after(grammarAccess.getCreate_object_statementAccess().getA1Local_variableParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Create_object_statement__A2Assignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCreate_object_statementAccess().getA2Object_keylettersParserRuleCall_5_0()); }
	ruleobject_keyletters{ after(grammarAccess.getCreate_object_statementAccess().getA2Object_keylettersParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Delete_statement__A1Assignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDelete_statementAccess().getA1Inst_ref_varParserRuleCall_3_0()); }
	ruleinst_ref_var{ after(grammarAccess.getDelete_statementAccess().getA1Inst_ref_varParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__For_statement__A1Assignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFor_statementAccess().getA1Local_variableParserRuleCall_2_0()); }
	rulelocal_variable{ after(grammarAccess.getFor_statementAccess().getA1Local_variableParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__For_statement__A2Assignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFor_statementAccess().getA2Inst_ref_set_varParserRuleCall_4_0()); }
	ruleinst_ref_set_var{ after(grammarAccess.getFor_statementAccess().getA2Inst_ref_set_varParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__For_statement__A3Assignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFor_statementAccess().getA3BlockParserRuleCall_5_0()); }
	ruleblock{ after(grammarAccess.getFor_statementAccess().getA3BlockParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Generate_statement__A1Assignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGenerate_statementAccess().getA1Event_specParserRuleCall_1_0()); }
	ruleevent_spec{ after(grammarAccess.getGenerate_statementAccess().getA1Event_specParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__If_statement__A1Assignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIf_statementAccess().getA1ExprParserRuleCall_1_0()); }
	ruleexpr{ after(grammarAccess.getIf_statementAccess().getA1ExprParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__If_statement__A2Assignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIf_statementAccess().getA2BlockParserRuleCall_2_0()); }
	ruleblock{ after(grammarAccess.getIf_statementAccess().getA2BlockParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__If_statement__A3Assignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIf_statementAccess().getA3ExprParserRuleCall_3_1_0()); }
	ruleexpr{ after(grammarAccess.getIf_statementAccess().getA3ExprParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__If_statement__A4Assignment_3_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIf_statementAccess().getA4BlockParserRuleCall_3_2_0()); }
	ruleblock{ after(grammarAccess.getIf_statementAccess().getA4BlockParserRuleCall_3_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__If_statement__A5Assignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIf_statementAccess().getA5BlockParserRuleCall_4_1_0()); }
	ruleblock{ after(grammarAccess.getIf_statementAccess().getA5BlockParserRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Relate_statement__A1Assignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelate_statementAccess().getA1Inst_ref_varParserRuleCall_1_0()); }
	ruleinst_ref_var{ after(grammarAccess.getRelate_statementAccess().getA1Inst_ref_varParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Relate_statement__A2Assignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelate_statementAccess().getA2Inst_ref_varParserRuleCall_3_0()); }
	ruleinst_ref_var{ after(grammarAccess.getRelate_statementAccess().getA2Inst_ref_varParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Relate_statement__A3Assignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelate_statementAccess().getA3RelationshipParserRuleCall_5_0()); }
	rulerelationship{ after(grammarAccess.getRelate_statementAccess().getA3RelationshipParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Return_statement__A1Assignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReturn_statementAccess().getA1ReturnKeyword_0_0()); }
(
{ before(grammarAccess.getReturn_statementAccess().getA1ReturnKeyword_0_0()); }

	'return' 

{ after(grammarAccess.getReturn_statementAccess().getA1ReturnKeyword_0_0()); }
)

{ after(grammarAccess.getReturn_statementAccess().getA1ReturnKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Return_statement__A2Assignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReturn_statementAccess().getA2ExprParserRuleCall_1_0()); }
	ruleexpr{ after(grammarAccess.getReturn_statementAccess().getA2ExprParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Select_statement__A1Assignment_1_0_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelect_statementAccess().getA1Object_specParserRuleCall_1_0_2_0()); }
	ruleobject_spec{ after(grammarAccess.getSelect_statementAccess().getA1Object_specParserRuleCall_1_0_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Select_statement__A2Assignment_1_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelect_statementAccess().getA2Object_specParserRuleCall_1_1_2_0()); }
	ruleobject_spec{ after(grammarAccess.getSelect_statementAccess().getA2Object_specParserRuleCall_1_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Select_statement__A3Assignment_1_2_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelect_statementAccess().getA3Object_specParserRuleCall_1_2_2_0()); }
	ruleobject_spec{ after(grammarAccess.getSelect_statementAccess().getA3Object_specParserRuleCall_1_2_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Unrelate_statement__A1Assignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnrelate_statementAccess().getA1Inst_ref_varParserRuleCall_1_0()); }
	ruleinst_ref_var{ after(grammarAccess.getUnrelate_statementAccess().getA1Inst_ref_varParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Unrelate_statement__A2Assignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnrelate_statementAccess().getA2Inst_ref_varParserRuleCall_3_0()); }
	ruleinst_ref_var{ after(grammarAccess.getUnrelate_statementAccess().getA2Inst_ref_varParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Unrelate_statement__A3Assignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUnrelate_statementAccess().getA3RelationshipParserRuleCall_5_0()); }
	rulerelationship{ after(grammarAccess.getUnrelate_statementAccess().getA3RelationshipParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__While_statement__A1Assignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhile_statementAccess().getA1ExprParserRuleCall_1_0()); }
	ruleexpr{ after(grammarAccess.getWhile_statementAccess().getA1ExprParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__While_statement__A2Assignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhile_statementAccess().getA2BlockParserRuleCall_2_0()); }
	ruleblock{ after(grammarAccess.getWhile_statementAccess().getA2BlockParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment_expr__A1Assignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignment_exprAccess().getA1ExprParserRuleCall_2_0()); }
	ruleexpr{ after(grammarAccess.getAssignment_exprAccess().getA1ExprParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Bridge_invocation__A1Assignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBridge_invocationAccess().getA1Ee_keylettersParserRuleCall_0_0()); }
	ruleee_keyletters{ after(grammarAccess.getBridge_invocationAccess().getA1Ee_keylettersParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Inst_ref_set_var__A1Assignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInst_ref_set_varAccess().getA1Local_variableParserRuleCall_0()); }
	rulelocal_variable{ after(grammarAccess.getInst_ref_set_varAccess().getA1Local_variableParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Inst_ref_var__A1Assignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInst_ref_varAccess().getA1Local_variableParserRuleCall_0()); }
	rulelocal_variable{ after(grammarAccess.getInst_ref_varAccess().getA1Local_variableParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Expr__A1Assignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExprAccess().getA1Sub_exprParserRuleCall_0()); }
	rulesub_expr{ after(grammarAccess.getExprAccess().getA1Sub_exprParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Sub_expr__A1Assignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSub_exprAccess().getA1ConjunctionParserRuleCall_0_0()); }
	ruleconjunction{ after(grammarAccess.getSub_exprAccess().getA1ConjunctionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Sub_expr__A2Assignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSub_exprAccess().getA2ConjunctionParserRuleCall_1_1_0()); }
	ruleconjunction{ after(grammarAccess.getSub_exprAccess().getA2ConjunctionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Conjunction__A1Assignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConjunctionAccess().getA1Relational_exprParserRuleCall_0_0()); }
	rulerelational_expr{ after(grammarAccess.getConjunctionAccess().getA1Relational_exprParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Conjunction__A2Assignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConjunctionAccess().getA2Relational_exprParserRuleCall_1_1_0()); }
	rulerelational_expr{ after(grammarAccess.getConjunctionAccess().getA2Relational_exprParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Relational_expr__A1Assignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelational_exprAccess().getA1AdditionParserRuleCall_0_0()); }
	ruleaddition{ after(grammarAccess.getRelational_exprAccess().getA1AdditionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Relational_expr__A2Assignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelational_exprAccess().getA2AdditionParserRuleCall_1_1_0()); }
	ruleaddition{ after(grammarAccess.getRelational_exprAccess().getA2AdditionParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__A1Assignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getA1MultiplicationParserRuleCall_0_0()); }
	rulemultiplication{ after(grammarAccess.getAdditionAccess().getA1MultiplicationParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__A2Assignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditionAccess().getA2MultiplicationParserRuleCall_1_1_0()); }
	rulemultiplication{ after(grammarAccess.getAdditionAccess().getA2MultiplicationParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__A1Assignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getA1Sign_exprParserRuleCall_0_0()); }
	rulesign_expr{ after(grammarAccess.getMultiplicationAccess().getA1Sign_exprParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__A2Assignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicationAccess().getA2Sign_exprParserRuleCall_1_1_0()); }
	rulesign_expr{ after(grammarAccess.getMultiplicationAccess().getA2Sign_exprParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Term__A1Assignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getA1RvalParserRuleCall_0_0()); }
	rulerval{ after(grammarAccess.getTermAccess().getA1RvalParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Term__A2Assignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTermAccess().getA2ExprParserRuleCall_1_1_0()); }
	ruleexpr{ after(grammarAccess.getTermAccess().getA2ExprParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Array_refs__A1Assignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArray_refsAccess().getA1ExprParserRuleCall_1_0()); }
	ruleexpr{ after(grammarAccess.getArray_refsAccess().getA1ExprParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_TOK_COLON : ':';

RULE_TOK_DOUBLECOLON : '::';

RULE_TOK_COMMA : ',';

RULE_TOK_DIV : '/';

RULE_TOK_DOT : '.';

RULE_TOK_EQUAL : '=';

RULE_TOK_GE : '>=';

RULE_TOK_GT : '>';

RULE_TOK_LE : '<=';

RULE_TOK_LESSTHAN : '<';

RULE_TOK_LPAREN : '(';

RULE_TOK_LSQBR : '[';

RULE_TOK_MINUS : '-';

RULE_TOK_NOTEQUAL : '!=';

RULE_TOK_PLUS : '+';

RULE_TOK_QMARK : '"';

RULE_TOK_RPAREN : ')';

RULE_TOK_RSQBR : ']';

RULE_TOK_STRING : '"' ('a'..'z')* '"';

RULE_TOK_TIMES : '*';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


