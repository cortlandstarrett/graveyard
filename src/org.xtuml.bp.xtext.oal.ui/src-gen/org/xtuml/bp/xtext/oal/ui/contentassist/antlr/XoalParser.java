/*
* generated by Xtext
*/
package org.xtuml.bp.xtext.oal.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.xtuml.bp.xtext.oal.services.XoalGrammarAccess;

public class XoalParser extends AbstractContentAssistParser {
	
	@Inject
	private XoalGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.xtuml.bp.xtext.oal.ui.contentassist.antlr.internal.InternalXoalParser createParser() {
		org.xtuml.bp.xtext.oal.ui.contentassist.antlr.internal.InternalXoalParser result = new org.xtuml.bp.xtext.oal.ui.contentassist.antlr.internal.InternalXoalParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getStatementAccess().getAlternatives_0(), "rule__Statement__Alternatives_0");
					put(grammarAccess.getSelect_statementAccess().getAlternatives_1(), "rule__Select_statement__Alternatives_1");
					put(grammarAccess.getDebug_operandAccess().getAlternatives(), "rule__Debug_operand__Alternatives");
					put(grammarAccess.getDebug_operandAccess().getAlternatives_0_1(), "rule__Debug_operand__Alternatives_0_1");
					put(grammarAccess.getDebug_operandAccess().getAlternatives_1_1(), "rule__Debug_operand__Alternatives_1_1");
					put(grammarAccess.getDebug_operandAccess().getAlternatives_2_1(), "rule__Debug_operand__Alternatives_2_1");
					put(grammarAccess.getObject_specAccess().getAlternatives(), "rule__Object_spec__Alternatives");
					put(grammarAccess.getRoot_element_labelAccess().getAlternatives(), "rule__Root_element_label__Alternatives");
					put(grammarAccess.getTermAccess().getAlternatives(), "rule__Term__Alternatives");
					put(grammarAccess.getConstant_valueAccess().getAlternatives(), "rule__Constant_value__Alternatives");
					put(grammarAccess.getComparison_operatorAccess().getAlternatives(), "rule__Comparison_operator__Alternatives");
					put(grammarAccess.getPlus_or_minusAccess().getAlternatives(), "rule__Plus_or_minus__Alternatives");
					put(grammarAccess.getMult_opAccess().getAlternatives(), "rule__Mult_op__Alternatives");
					put(grammarAccess.getStatementAccess().getGroup(), "rule__Statement__Group__0");
					put(grammarAccess.getStatementAccess().getGroup_0_0(), "rule__Statement__Group_0_0__0");
					put(grammarAccess.getAssignment_statementAccess().getGroup(), "rule__Assignment_statement__Group__0");
					put(grammarAccess.getControl_statementAccess().getGroup(), "rule__Control_statement__Group__0");
					put(grammarAccess.getCreate_event_statementAccess().getGroup(), "rule__Create_event_statement__Group__0");
					put(grammarAccess.getCreate_object_statementAccess().getGroup(), "rule__Create_object_statement__Group__0");
					put(grammarAccess.getDebug_statementAccess().getGroup(), "rule__Debug_statement__Group__0");
					put(grammarAccess.getDelete_statementAccess().getGroup(), "rule__Delete_statement__Group__0");
					put(grammarAccess.getFor_statementAccess().getGroup(), "rule__For_statement__Group__0");
					put(grammarAccess.getGenerate_statementAccess().getGroup(), "rule__Generate_statement__Group__0");
					put(grammarAccess.getIf_statementAccess().getGroup(), "rule__If_statement__Group__0");
					put(grammarAccess.getIf_statementAccess().getGroup_3(), "rule__If_statement__Group_3__0");
					put(grammarAccess.getIf_statementAccess().getGroup_4(), "rule__If_statement__Group_4__0");
					put(grammarAccess.getRelate_statementAccess().getGroup(), "rule__Relate_statement__Group__0");
					put(grammarAccess.getReturn_statementAccess().getGroup(), "rule__Return_statement__Group__0");
					put(grammarAccess.getSelect_statementAccess().getGroup(), "rule__Select_statement__Group__0");
					put(grammarAccess.getSelect_statementAccess().getGroup_1_0(), "rule__Select_statement__Group_1_0__0");
					put(grammarAccess.getSelect_statementAccess().getGroup_1_1(), "rule__Select_statement__Group_1_1__0");
					put(grammarAccess.getSelect_statementAccess().getGroup_1_2(), "rule__Select_statement__Group_1_2__0");
					put(grammarAccess.getUnrelate_statementAccess().getGroup(), "rule__Unrelate_statement__Group__0");
					put(grammarAccess.getWhile_statementAccess().getGroup(), "rule__While_statement__Group__0");
					put(grammarAccess.getAssignment_exprAccess().getGroup(), "rule__Assignment_expr__Group__0");
					put(grammarAccess.getBridge_invocationAccess().getGroup(), "rule__Bridge_invocation__Group__0");
					put(grammarAccess.getMessage_invocationAccess().getGroup(), "rule__Message_invocation__Group__0");
					put(grammarAccess.getBridge_exprAccess().getGroup(), "rule__Bridge_expr__Group__0");
					put(grammarAccess.getDebug_operandAccess().getGroup_0(), "rule__Debug_operand__Group_0__0");
					put(grammarAccess.getDebug_operandAccess().getGroup_1(), "rule__Debug_operand__Group_1__0");
					put(grammarAccess.getDebug_operandAccess().getGroup_2(), "rule__Debug_operand__Group_2__0");
					put(grammarAccess.getEvent_specAccess().getGroup(), "rule__Event_spec__Group__0");
					put(grammarAccess.getInvocation_parametersAccess().getGroup(), "rule__Invocation_parameters__Group__0");
					put(grammarAccess.getObject_specAccess().getGroup_0(), "rule__Object_spec__Group_0__0");
					put(grammarAccess.getObject_specAccess().getGroup_1(), "rule__Object_spec__Group_1__0");
					put(grammarAccess.getObject_specAccess().getGroup_1_1(), "rule__Object_spec__Group_1_1__0");
					put(grammarAccess.getSupp_dataAccess().getGroup(), "rule__Supp_data__Group__0");
					put(grammarAccess.getSub_exprAccess().getGroup(), "rule__Sub_expr__Group__0");
					put(grammarAccess.getSub_exprAccess().getGroup_1(), "rule__Sub_expr__Group_1__0");
					put(grammarAccess.getConjunctionAccess().getGroup(), "rule__Conjunction__Group__0");
					put(grammarAccess.getConjunctionAccess().getGroup_1(), "rule__Conjunction__Group_1__0");
					put(grammarAccess.getRelational_exprAccess().getGroup(), "rule__Relational_expr__Group__0");
					put(grammarAccess.getRelational_exprAccess().getGroup_1(), "rule__Relational_expr__Group_1__0");
					put(grammarAccess.getAdditionAccess().getGroup(), "rule__Addition__Group__0");
					put(grammarAccess.getAdditionAccess().getGroup_1(), "rule__Addition__Group_1__0");
					put(grammarAccess.getMultiplicationAccess().getGroup(), "rule__Multiplication__Group__0");
					put(grammarAccess.getMultiplicationAccess().getGroup_1(), "rule__Multiplication__Group_1__0");
					put(grammarAccess.getBoolean_negationAccess().getGroup(), "rule__Boolean_negation__Group__0");
					put(grammarAccess.getTermAccess().getGroup_1(), "rule__Term__Group_1__0");
					put(grammarAccess.getCardinality_opAccess().getGroup(), "rule__Cardinality_op__Group__0");
					put(grammarAccess.getEmpty_opAccess().getGroup(), "rule__Empty_op__Group__0");
					put(grammarAccess.getNot_empty_opAccess().getGroup(), "rule__Not_empty_op__Group__0");
					put(grammarAccess.getInstance_start_segmentAccess().getGroup(), "rule__Instance_start_segment__Group__0");
					put(grammarAccess.getParam_data_accessAccess().getGroup(), "rule__Param_data_access__Group__0");
					put(grammarAccess.getEvent_data_accessAccess().getGroup(), "rule__Event_data_access__Group__0");
					put(grammarAccess.getArray_refsAccess().getGroup(), "rule__Array_refs__Group__0");
					put(grammarAccess.getBlockAccess().getStatementsAssignment(), "rule__Block__StatementsAssignment");
					put(grammarAccess.getAssignment_statementAccess().getA1Assignment_1(), "rule__Assignment_statement__A1Assignment_1");
					put(grammarAccess.getBreak_statementAccess().getA1Assignment(), "rule__Break_statement__A1Assignment");
					put(grammarAccess.getBridge_statementAccess().getA1Assignment(), "rule__Bridge_statement__A1Assignment");
					put(grammarAccess.getSend_statementAccess().getA1Assignment(), "rule__Send_statement__A1Assignment");
					put(grammarAccess.getControl_statementAccess().getA1Assignment_0(), "rule__Control_statement__A1Assignment_0");
					put(grammarAccess.getContinue_statementAccess().getA1Assignment(), "rule__Continue_statement__A1Assignment");
					put(grammarAccess.getCreate_event_statementAccess().getA1Assignment_3(), "rule__Create_event_statement__A1Assignment_3");
					put(grammarAccess.getCreate_event_statementAccess().getA2Assignment_5(), "rule__Create_event_statement__A2Assignment_5");
					put(grammarAccess.getCreate_object_statementAccess().getA1Assignment_3(), "rule__Create_object_statement__A1Assignment_3");
					put(grammarAccess.getCreate_object_statementAccess().getA2Assignment_5(), "rule__Create_object_statement__A2Assignment_5");
					put(grammarAccess.getDelete_statementAccess().getA1Assignment_3(), "rule__Delete_statement__A1Assignment_3");
					put(grammarAccess.getFor_statementAccess().getA1Assignment_2(), "rule__For_statement__A1Assignment_2");
					put(grammarAccess.getFor_statementAccess().getA2Assignment_4(), "rule__For_statement__A2Assignment_4");
					put(grammarAccess.getFor_statementAccess().getA3Assignment_5(), "rule__For_statement__A3Assignment_5");
					put(grammarAccess.getGenerate_statementAccess().getA1Assignment_1(), "rule__Generate_statement__A1Assignment_1");
					put(grammarAccess.getIf_statementAccess().getA1Assignment_1(), "rule__If_statement__A1Assignment_1");
					put(grammarAccess.getIf_statementAccess().getA2Assignment_2(), "rule__If_statement__A2Assignment_2");
					put(grammarAccess.getIf_statementAccess().getA3Assignment_3_1(), "rule__If_statement__A3Assignment_3_1");
					put(grammarAccess.getIf_statementAccess().getA4Assignment_3_2(), "rule__If_statement__A4Assignment_3_2");
					put(grammarAccess.getIf_statementAccess().getA5Assignment_4_1(), "rule__If_statement__A5Assignment_4_1");
					put(grammarAccess.getRelate_statementAccess().getA1Assignment_1(), "rule__Relate_statement__A1Assignment_1");
					put(grammarAccess.getRelate_statementAccess().getA2Assignment_3(), "rule__Relate_statement__A2Assignment_3");
					put(grammarAccess.getRelate_statementAccess().getA3Assignment_5(), "rule__Relate_statement__A3Assignment_5");
					put(grammarAccess.getReturn_statementAccess().getA1Assignment_0(), "rule__Return_statement__A1Assignment_0");
					put(grammarAccess.getReturn_statementAccess().getA2Assignment_1(), "rule__Return_statement__A2Assignment_1");
					put(grammarAccess.getSelect_statementAccess().getA1Assignment_1_0_2(), "rule__Select_statement__A1Assignment_1_0_2");
					put(grammarAccess.getSelect_statementAccess().getA2Assignment_1_1_2(), "rule__Select_statement__A2Assignment_1_1_2");
					put(grammarAccess.getSelect_statementAccess().getA3Assignment_1_2_2(), "rule__Select_statement__A3Assignment_1_2_2");
					put(grammarAccess.getUnrelate_statementAccess().getA1Assignment_1(), "rule__Unrelate_statement__A1Assignment_1");
					put(grammarAccess.getUnrelate_statementAccess().getA2Assignment_3(), "rule__Unrelate_statement__A2Assignment_3");
					put(grammarAccess.getUnrelate_statementAccess().getA3Assignment_5(), "rule__Unrelate_statement__A3Assignment_5");
					put(grammarAccess.getWhile_statementAccess().getA1Assignment_1(), "rule__While_statement__A1Assignment_1");
					put(grammarAccess.getWhile_statementAccess().getA2Assignment_2(), "rule__While_statement__A2Assignment_2");
					put(grammarAccess.getAssignment_exprAccess().getA1Assignment_2(), "rule__Assignment_expr__A1Assignment_2");
					put(grammarAccess.getBridge_invocationAccess().getA1Assignment_0(), "rule__Bridge_invocation__A1Assignment_0");
					put(grammarAccess.getBridge_exprAccess().getA1Assignment_1(), "rule__Bridge_expr__A1Assignment_1");
					put(grammarAccess.getInst_ref_set_varAccess().getA1Assignment(), "rule__Inst_ref_set_var__A1Assignment");
					put(grammarAccess.getInst_ref_varAccess().getA1Assignment(), "rule__Inst_ref_var__A1Assignment");
					put(grammarAccess.getExprAccess().getA1Assignment(), "rule__Expr__A1Assignment");
					put(grammarAccess.getSub_exprAccess().getA1Assignment_0(), "rule__Sub_expr__A1Assignment_0");
					put(grammarAccess.getSub_exprAccess().getA2Assignment_1_1(), "rule__Sub_expr__A2Assignment_1_1");
					put(grammarAccess.getConjunctionAccess().getA1Assignment_0(), "rule__Conjunction__A1Assignment_0");
					put(grammarAccess.getConjunctionAccess().getA2Assignment_1_1(), "rule__Conjunction__A2Assignment_1_1");
					put(grammarAccess.getRelational_exprAccess().getA1Assignment_0(), "rule__Relational_expr__A1Assignment_0");
					put(grammarAccess.getRelational_exprAccess().getA2Assignment_1_1(), "rule__Relational_expr__A2Assignment_1_1");
					put(grammarAccess.getAdditionAccess().getA1Assignment_0(), "rule__Addition__A1Assignment_0");
					put(grammarAccess.getAdditionAccess().getA2Assignment_1_1(), "rule__Addition__A2Assignment_1_1");
					put(grammarAccess.getMultiplicationAccess().getA1Assignment_0(), "rule__Multiplication__A1Assignment_0");
					put(grammarAccess.getMultiplicationAccess().getA2Assignment_1_1(), "rule__Multiplication__A2Assignment_1_1");
					put(grammarAccess.getTermAccess().getA1Assignment_0(), "rule__Term__A1Assignment_0");
					put(grammarAccess.getTermAccess().getA2Assignment_1_1(), "rule__Term__A2Assignment_1_1");
					put(grammarAccess.getArray_refsAccess().getA1Assignment_1(), "rule__Array_refs__A1Assignment_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.xtuml.bp.xtext.oal.ui.contentassist.antlr.internal.InternalXoalParser typedParser = (org.xtuml.bp.xtext.oal.ui.contentassist.antlr.internal.InternalXoalParser) parser;
			typedParser.entryRuleCode();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public XoalGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(XoalGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
