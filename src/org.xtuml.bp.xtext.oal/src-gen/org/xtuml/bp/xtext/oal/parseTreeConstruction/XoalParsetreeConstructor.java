/*
* generated by Xtext
*/
package org.xtuml.bp.xtext.oal.parseTreeConstruction;

import org.eclipse.emf.ecore.*;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parsetree.reconstr.IEObjectConsumer;
import org.eclipse.xtext.parsetree.reconstr.impl.AbstractParseTreeConstructor;

import org.xtuml.bp.xtext.oal.services.XoalGrammarAccess;

import com.google.inject.Inject;

@SuppressWarnings("all")
public class XoalParsetreeConstructor extends AbstractParseTreeConstructor {
		
	@Inject
	private XoalGrammarAccess grammarAccess;
	
	@Override
	protected AbstractToken getRootToken(IEObjectConsumer inst) {
		return new ThisRootNode(inst);	
	}
	
protected class ThisRootNode extends RootToken {
	public ThisRootNode(IEObjectConsumer inst) {
		super(inst);
	}
	
	@Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Code_BlockParserRuleCall(this, this, 0, inst);
			case 1: return new Block_StatementsAssignment(this, this, 1, inst);
			case 2: return new Statement_Group(this, this, 2, inst);
			case 3: return new Assignment_statement_Group(this, this, 3, inst);
			case 4: return new Break_statement_A1Assignment(this, this, 4, inst);
			case 5: return new Bridge_statement_A1Assignment(this, this, 5, inst);
			case 6: return new Send_statement_A1Assignment(this, this, 6, inst);
			case 7: return new Control_statement_Group(this, this, 7, inst);
			case 8: return new Continue_statement_A1Assignment(this, this, 8, inst);
			case 9: return new Create_event_statement_Group(this, this, 9, inst);
			case 10: return new Create_object_statement_Group(this, this, 10, inst);
			case 11: return new Delete_statement_Group(this, this, 11, inst);
			case 12: return new For_statement_Group(this, this, 12, inst);
			case 13: return new Generate_statement_Group(this, this, 13, inst);
			case 14: return new If_statement_Group(this, this, 14, inst);
			case 15: return new Relate_statement_Group(this, this, 15, inst);
			case 16: return new Return_statement_Group(this, this, 16, inst);
			case 17: return new Select_statement_Group(this, this, 17, inst);
			case 18: return new Unrelate_statement_Group(this, this, 18, inst);
			case 19: return new While_statement_Group(this, this, 19, inst);
			case 20: return new Assignment_expr_Group(this, this, 20, inst);
			case 21: return new Bridge_invocation_Group(this, this, 21, inst);
			case 22: return new Bridge_expr_Group(this, this, 22, inst);
			case 23: return new Assoc_obj_inst_ref_var_Inst_ref_varParserRuleCall(this, this, 23, inst);
			case 24: return new Inst_ref_set_var_A1Assignment(this, this, 24, inst);
			case 25: return new Inst_ref_var_A1Assignment(this, this, 25, inst);
			case 26: return new Expr_A1Assignment(this, this, 26, inst);
			case 27: return new Sub_expr_Group(this, this, 27, inst);
			case 28: return new Conjunction_Group(this, this, 28, inst);
			case 29: return new Relational_expr_Group(this, this, 29, inst);
			case 30: return new Addition_Group(this, this, 30, inst);
			case 31: return new Multiplication_Group(this, this, 31, inst);
			case 32: return new Sign_expr_TermParserRuleCall(this, this, 32, inst);
			case 33: return new Boolean_negation_Group(this, this, 33, inst);
			case 34: return new Term_Alternatives(this, this, 34, inst);
			case 35: return new Instance_start_segment_Group(this, this, 35, inst);
			case 36: return new Member_access_Instance_start_segmentParserRuleCall(this, this, 36, inst);
			case 37: return new Array_refs_Group(this, this, 37, inst);
			default: return null;
		}	
	}	
}
	

/************ begin Rule Code ****************
 *
 * Code:
 * 	block;
 *
 **/

// block
protected class Code_BlockParserRuleCall extends RuleCallToken {
	
	public Code_BlockParserRuleCall(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getCodeAccess().getBlockParserRuleCall();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Block_StatementsAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getBlockRule().getType().getClassifier())
			return null;
		if(checkForRecursion(Block_StatementsAssignment.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

/************ end Rule Code ****************/


/************ begin Rule block ****************
 *
 * block:
 * 	statements+=statement*;
 *
 **/

// statements+=statement*
protected class Block_StatementsAssignment extends AssignmentToken  {
	
	public Block_StatementsAssignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBlockAccess().getStatementsAssignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Statement_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("statements",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("statements");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getStatementRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getBlockAccess().getStatementsStatementParserRuleCall_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Block_StatementsAssignment(lastRuleCallOrigin, next, actIndex, consumed);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index - 1, consumed);
		}	
	}	
}

/************ end Rule block ****************/


/************ begin Rule statement ****************
 *
 * statement: //  (implicit_ib_transform_statement )=>
 * 	(implicit_ib_transform_statement //|
 * 	//  (function_statement )=>
 * 	function_statement //| empty_statement
 * 	| implicit_assignment_statement | implicit_invocation_statement | assignment_statement | control_statement |
 * 	break_statement | bridge_statement | send_statement | continue_statement | create_object_statement |
 * 	create_event_statement | delete_statement | for_statement | generate_statement | if_statement | relate_statement |
 * 	return_statement | select_statement | transform_statement | while_statement | unrelate_statement | debug_statement)
 * 	";";
 *
 **/

// //  (implicit_ib_transform_statement )=>
// (implicit_ib_transform_statement //|
// //  (function_statement )=>
// function_statement //| empty_statement
// | implicit_assignment_statement | implicit_invocation_statement | assignment_statement | control_statement |
// break_statement | bridge_statement | send_statement | continue_statement | create_object_statement |
// create_event_statement | delete_statement | for_statement | generate_statement | if_statement | relate_statement |
// return_statement | select_statement | transform_statement | while_statement | unrelate_statement | debug_statement) ";"
protected class Statement_Group extends GroupToken {
	
	public Statement_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getStatementAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Statement_SemicolonKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAssignment_statementRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getBreak_statementRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getBridge_statementRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getContinue_statementRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getControl_statementRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCreate_event_statementRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getCreate_object_statementRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getDelete_statementRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getFor_statementRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getGenerate_statementRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getIf_statementRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getRelate_statementRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getReturn_statementRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSelect_statementRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getSend_statementRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getUnrelate_statementRule().getType().getClassifier() && 
		   getEObject().eClass() != grammarAccess.getWhile_statementRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// //  (implicit_ib_transform_statement )=>
// implicit_ib_transform_statement //|
// //  (function_statement )=>
// function_statement //| empty_statement
// | implicit_assignment_statement | implicit_invocation_statement | assignment_statement | control_statement |
// break_statement | bridge_statement | send_statement | continue_statement | create_object_statement |
// create_event_statement | delete_statement | for_statement | generate_statement | if_statement | relate_statement |
// return_statement | select_statement | transform_statement | while_statement | unrelate_statement | debug_statement
protected class Statement_Alternatives_0 extends AlternativesToken {

	public Statement_Alternatives_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getStatementAccess().getAlternatives_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Statement_Implicit_assignment_statementParserRuleCall_0_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Statement_Assignment_statementParserRuleCall_0_3(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Statement_Control_statementParserRuleCall_0_4(lastRuleCallOrigin, this, 2, inst);
			case 3: return new Statement_Break_statementParserRuleCall_0_5(lastRuleCallOrigin, this, 3, inst);
			case 4: return new Statement_Bridge_statementParserRuleCall_0_6(lastRuleCallOrigin, this, 4, inst);
			case 5: return new Statement_Send_statementParserRuleCall_0_7(lastRuleCallOrigin, this, 5, inst);
			case 6: return new Statement_Continue_statementParserRuleCall_0_8(lastRuleCallOrigin, this, 6, inst);
			case 7: return new Statement_Create_object_statementParserRuleCall_0_9(lastRuleCallOrigin, this, 7, inst);
			case 8: return new Statement_Create_event_statementParserRuleCall_0_10(lastRuleCallOrigin, this, 8, inst);
			case 9: return new Statement_Delete_statementParserRuleCall_0_11(lastRuleCallOrigin, this, 9, inst);
			case 10: return new Statement_For_statementParserRuleCall_0_12(lastRuleCallOrigin, this, 10, inst);
			case 11: return new Statement_Generate_statementParserRuleCall_0_13(lastRuleCallOrigin, this, 11, inst);
			case 12: return new Statement_If_statementParserRuleCall_0_14(lastRuleCallOrigin, this, 12, inst);
			case 13: return new Statement_Relate_statementParserRuleCall_0_15(lastRuleCallOrigin, this, 13, inst);
			case 14: return new Statement_Return_statementParserRuleCall_0_16(lastRuleCallOrigin, this, 14, inst);
			case 15: return new Statement_Select_statementParserRuleCall_0_17(lastRuleCallOrigin, this, 15, inst);
			case 16: return new Statement_While_statementParserRuleCall_0_19(lastRuleCallOrigin, this, 16, inst);
			case 17: return new Statement_Unrelate_statementParserRuleCall_0_20(lastRuleCallOrigin, this, 17, inst);
			default: return null;
		}	
	}

}

// implicit_assignment_statement
protected class Statement_Implicit_assignment_statementParserRuleCall_0_1 extends UnassignedTextToken {

	public Statement_Implicit_assignment_statementParserRuleCall_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getStatementAccess().getImplicit_assignment_statementParserRuleCall_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// assignment_statement
protected class Statement_Assignment_statementParserRuleCall_0_3 extends RuleCallToken {
	
	public Statement_Assignment_statementParserRuleCall_0_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getStatementAccess().getAssignment_statementParserRuleCall_0_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Assignment_statement_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAssignment_statementRule().getType().getClassifier())
			return null;
		if(checkForRecursion(Assignment_statement_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// control_statement
protected class Statement_Control_statementParserRuleCall_0_4 extends RuleCallToken {
	
	public Statement_Control_statementParserRuleCall_0_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getStatementAccess().getControl_statementParserRuleCall_0_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Control_statement_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getControl_statementRule().getType().getClassifier())
			return null;
		if(checkForRecursion(Control_statement_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// break_statement
protected class Statement_Break_statementParserRuleCall_0_5 extends RuleCallToken {
	
	public Statement_Break_statementParserRuleCall_0_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getStatementAccess().getBreak_statementParserRuleCall_0_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Break_statement_A1Assignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getBreak_statementRule().getType().getClassifier())
			return null;
		if(checkForRecursion(Break_statement_A1Assignment.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// bridge_statement
protected class Statement_Bridge_statementParserRuleCall_0_6 extends RuleCallToken {
	
	public Statement_Bridge_statementParserRuleCall_0_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getStatementAccess().getBridge_statementParserRuleCall_0_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Bridge_statement_A1Assignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getBridge_statementRule().getType().getClassifier())
			return null;
		if(checkForRecursion(Bridge_statement_A1Assignment.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// send_statement
protected class Statement_Send_statementParserRuleCall_0_7 extends RuleCallToken {
	
	public Statement_Send_statementParserRuleCall_0_7(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getStatementAccess().getSend_statementParserRuleCall_0_7();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Send_statement_A1Assignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSend_statementRule().getType().getClassifier())
			return null;
		if(checkForRecursion(Send_statement_A1Assignment.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// continue_statement
protected class Statement_Continue_statementParserRuleCall_0_8 extends RuleCallToken {
	
	public Statement_Continue_statementParserRuleCall_0_8(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getStatementAccess().getContinue_statementParserRuleCall_0_8();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Continue_statement_A1Assignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getContinue_statementRule().getType().getClassifier())
			return null;
		if(checkForRecursion(Continue_statement_A1Assignment.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// create_object_statement
protected class Statement_Create_object_statementParserRuleCall_0_9 extends RuleCallToken {
	
	public Statement_Create_object_statementParserRuleCall_0_9(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getStatementAccess().getCreate_object_statementParserRuleCall_0_9();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Create_object_statement_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getCreate_object_statementRule().getType().getClassifier())
			return null;
		if(checkForRecursion(Create_object_statement_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// create_event_statement
protected class Statement_Create_event_statementParserRuleCall_0_10 extends RuleCallToken {
	
	public Statement_Create_event_statementParserRuleCall_0_10(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getStatementAccess().getCreate_event_statementParserRuleCall_0_10();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Create_event_statement_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getCreate_event_statementRule().getType().getClassifier())
			return null;
		if(checkForRecursion(Create_event_statement_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// delete_statement
protected class Statement_Delete_statementParserRuleCall_0_11 extends RuleCallToken {
	
	public Statement_Delete_statementParserRuleCall_0_11(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getStatementAccess().getDelete_statementParserRuleCall_0_11();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Delete_statement_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDelete_statementRule().getType().getClassifier())
			return null;
		if(checkForRecursion(Delete_statement_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// for_statement
protected class Statement_For_statementParserRuleCall_0_12 extends RuleCallToken {
	
	public Statement_For_statementParserRuleCall_0_12(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getStatementAccess().getFor_statementParserRuleCall_0_12();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new For_statement_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getFor_statementRule().getType().getClassifier())
			return null;
		if(checkForRecursion(For_statement_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// generate_statement
protected class Statement_Generate_statementParserRuleCall_0_13 extends RuleCallToken {
	
	public Statement_Generate_statementParserRuleCall_0_13(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getStatementAccess().getGenerate_statementParserRuleCall_0_13();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Generate_statement_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getGenerate_statementRule().getType().getClassifier())
			return null;
		if(checkForRecursion(Generate_statement_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// if_statement
protected class Statement_If_statementParserRuleCall_0_14 extends RuleCallToken {
	
	public Statement_If_statementParserRuleCall_0_14(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getStatementAccess().getIf_statementParserRuleCall_0_14();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new If_statement_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getIf_statementRule().getType().getClassifier())
			return null;
		if(checkForRecursion(If_statement_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// relate_statement
protected class Statement_Relate_statementParserRuleCall_0_15 extends RuleCallToken {
	
	public Statement_Relate_statementParserRuleCall_0_15(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getStatementAccess().getRelate_statementParserRuleCall_0_15();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Relate_statement_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getRelate_statementRule().getType().getClassifier())
			return null;
		if(checkForRecursion(Relate_statement_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// return_statement
protected class Statement_Return_statementParserRuleCall_0_16 extends RuleCallToken {
	
	public Statement_Return_statementParserRuleCall_0_16(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getStatementAccess().getReturn_statementParserRuleCall_0_16();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Return_statement_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getReturn_statementRule().getType().getClassifier())
			return null;
		if(checkForRecursion(Return_statement_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// select_statement
protected class Statement_Select_statementParserRuleCall_0_17 extends RuleCallToken {
	
	public Statement_Select_statementParserRuleCall_0_17(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getStatementAccess().getSelect_statementParserRuleCall_0_17();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Select_statement_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSelect_statementRule().getType().getClassifier())
			return null;
		if(checkForRecursion(Select_statement_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// while_statement
protected class Statement_While_statementParserRuleCall_0_19 extends RuleCallToken {
	
	public Statement_While_statementParserRuleCall_0_19(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getStatementAccess().getWhile_statementParserRuleCall_0_19();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new While_statement_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getWhile_statementRule().getType().getClassifier())
			return null;
		if(checkForRecursion(While_statement_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

// unrelate_statement
protected class Statement_Unrelate_statementParserRuleCall_0_20 extends RuleCallToken {
	
	public Statement_Unrelate_statementParserRuleCall_0_20(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getStatementAccess().getUnrelate_statementParserRuleCall_0_20();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Unrelate_statement_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getUnrelate_statementRule().getType().getClassifier())
			return null;
		if(checkForRecursion(Unrelate_statement_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}


// ";"
protected class Statement_SemicolonKeyword_1 extends KeywordToken  {
	
	public Statement_SemicolonKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getStatementAccess().getSemicolonKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Statement_Alternatives_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule statement ****************/


/************ begin Rule assignment_statement ****************
 *
 * assignment_statement:
 * 	"assign" a1=assignment_expr;
 *
 **/

// "assign" a1=assignment_expr
protected class Assignment_statement_Group extends GroupToken {
	
	public Assignment_statement_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAssignment_statementAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Assignment_statement_A1Assignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAssignment_statementRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "assign"
protected class Assignment_statement_AssignKeyword_0 extends KeywordToken  {
	
	public Assignment_statement_AssignKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getAssignment_statementAccess().getAssignKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// a1=assignment_expr
protected class Assignment_statement_A1Assignment_1 extends AssignmentToken  {
	
	public Assignment_statement_A1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAssignment_statementAccess().getA1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Assignment_expr_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("a1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("a1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAssignment_exprRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAssignment_statementAccess().getA1Assignment_exprParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Assignment_statement_AssignKeyword_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule assignment_statement ****************/


/************ begin Rule break_statement ****************
 *
 * break_statement:
 * 	a1="break";
 *
 **/

// a1="break"
protected class Break_statement_A1Assignment extends AssignmentToken  {
	
	public Break_statement_A1Assignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBreak_statementAccess().getA1Assignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getBreak_statementRule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("a1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("a1");
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getBreak_statementAccess().getA1BreakKeyword_0(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getBreak_statementAccess().getA1BreakKeyword_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule break_statement ****************/


/************ begin Rule bridge_statement ****************
 *
 * //  (
 * //    (
 * //      ( member_access
 * //      | param_data_access
 * //      )
 * //      TOK_EQUAL
 * //      bridge_invocation
 * //    )
 * //|
 * //    bridge_invocation
 * //  )
 * bridge_statement:
 * 	a1="bridge";
 *
 **/

// a1="bridge"
protected class Bridge_statement_A1Assignment extends AssignmentToken  {
	
	public Bridge_statement_A1Assignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBridge_statementAccess().getA1Assignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getBridge_statementRule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("a1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("a1");
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getBridge_statementAccess().getA1BridgeKeyword_0(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getBridge_statementAccess().getA1BridgeKeyword_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule bridge_statement ****************/


/************ begin Rule send_statement ****************
 *
 * //  (
 * //    (
 * //      ( member_access
 * //      | param_data_access
 * //      )
 * //      TOK_EQUAL
 * //      message_invocation
 * //    )
 * //|
 * //    message_invocation
 * //  )
 * send_statement:
 * 	a1="send";
 *
 **/

// a1="send"
protected class Send_statement_A1Assignment extends AssignmentToken  {
	
	public Send_statement_A1Assignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSend_statementAccess().getA1Assignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSend_statementRule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("a1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("a1");
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getSend_statementAccess().getA1SendKeyword_0(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getSend_statementAccess().getA1SendKeyword_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule send_statement ****************/


/************ begin Rule control_statement ****************
 *
 * control_statement:
 * 	a1="control" "stop";
 *
 **/

// a1="control" "stop"
protected class Control_statement_Group extends GroupToken {
	
	public Control_statement_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getControl_statementAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Control_statement_StopKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getControl_statementRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// a1="control"
protected class Control_statement_A1Assignment_0 extends AssignmentToken  {
	
	public Control_statement_A1Assignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getControl_statementAccess().getA1Assignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("a1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("a1");
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getControl_statementAccess().getA1ControlKeyword_0_0(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getControl_statementAccess().getA1ControlKeyword_0_0();
			return obj;
		}
		return null;
	}

}

// "stop"
protected class Control_statement_StopKeyword_1 extends KeywordToken  {
	
	public Control_statement_StopKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getControl_statementAccess().getStopKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Control_statement_A1Assignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule control_statement ****************/


/************ begin Rule continue_statement ****************
 *
 * continue_statement:
 * 	a1="continue";
 *
 **/

// a1="continue"
protected class Continue_statement_A1Assignment extends AssignmentToken  {
	
	public Continue_statement_A1Assignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getContinue_statementAccess().getA1Assignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getContinue_statementRule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("a1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("a1");
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getContinue_statementAccess().getA1ContinueKeyword_0(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getContinue_statementAccess().getA1ContinueKeyword_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule continue_statement ****************/


/************ begin Rule create_event_statement ****************
 *
 * create_event_statement:
 * 	"create" "event" "instance" a1=local_variable "of" a2=event_spec;
 *
 **/

// "create" "event" "instance" a1=local_variable "of" a2=event_spec
protected class Create_event_statement_Group extends GroupToken {
	
	public Create_event_statement_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getCreate_event_statementAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Create_event_statement_A2Assignment_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getCreate_event_statementRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "create"
protected class Create_event_statement_CreateKeyword_0 extends KeywordToken  {
	
	public Create_event_statement_CreateKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCreate_event_statementAccess().getCreateKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// "event"
protected class Create_event_statement_EventKeyword_1 extends KeywordToken  {
	
	public Create_event_statement_EventKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCreate_event_statementAccess().getEventKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Create_event_statement_CreateKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "instance"
protected class Create_event_statement_InstanceKeyword_2 extends KeywordToken  {
	
	public Create_event_statement_InstanceKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCreate_event_statementAccess().getInstanceKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Create_event_statement_EventKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// a1=local_variable
protected class Create_event_statement_A1Assignment_3 extends AssignmentToken  {
	
	public Create_event_statement_A1Assignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCreate_event_statementAccess().getA1Assignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Create_event_statement_InstanceKeyword_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("a1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("a1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getCreate_event_statementAccess().getA1Local_variableParserRuleCall_3_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getCreate_event_statementAccess().getA1Local_variableParserRuleCall_3_0();
			return obj;
		}
		return null;
	}

}

// "of"
protected class Create_event_statement_OfKeyword_4 extends KeywordToken  {
	
	public Create_event_statement_OfKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCreate_event_statementAccess().getOfKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Create_event_statement_A1Assignment_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// a2=event_spec
protected class Create_event_statement_A2Assignment_5 extends AssignmentToken  {
	
	public Create_event_statement_A2Assignment_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCreate_event_statementAccess().getA2Assignment_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Create_event_statement_OfKeyword_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("a2",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("a2");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getCreate_event_statementAccess().getA2Event_specParserRuleCall_5_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getCreate_event_statementAccess().getA2Event_specParserRuleCall_5_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule create_event_statement ****************/


/************ begin Rule create_object_statement ****************
 *
 * create_object_statement:
 * 	"create" "object" "instance" //(
 * 	//  (  local_variable "of" )=>
 * 	a1=local_variable //)?
 * 	"of" a2=object_keyletters;
 *
 **/

// "create" "object" "instance" //(
// //  (  local_variable "of" )=>
// a1=local_variable //)?
// "of" a2=object_keyletters
protected class Create_object_statement_Group extends GroupToken {
	
	public Create_object_statement_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getCreate_object_statementAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Create_object_statement_A2Assignment_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getCreate_object_statementRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "create"
protected class Create_object_statement_CreateKeyword_0 extends KeywordToken  {
	
	public Create_object_statement_CreateKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCreate_object_statementAccess().getCreateKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// "object"
protected class Create_object_statement_ObjectKeyword_1 extends KeywordToken  {
	
	public Create_object_statement_ObjectKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCreate_object_statementAccess().getObjectKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Create_object_statement_CreateKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "instance"
protected class Create_object_statement_InstanceKeyword_2 extends KeywordToken  {
	
	public Create_object_statement_InstanceKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCreate_object_statementAccess().getInstanceKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Create_object_statement_ObjectKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// //(
// //  (  local_variable "of" )=>
// a1=local_variable
protected class Create_object_statement_A1Assignment_3 extends AssignmentToken  {
	
	public Create_object_statement_A1Assignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCreate_object_statementAccess().getA1Assignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Create_object_statement_InstanceKeyword_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("a1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("a1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getCreate_object_statementAccess().getA1Local_variableParserRuleCall_3_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getCreate_object_statementAccess().getA1Local_variableParserRuleCall_3_0();
			return obj;
		}
		return null;
	}

}

// //)?
// "of"
protected class Create_object_statement_OfKeyword_4 extends KeywordToken  {
	
	public Create_object_statement_OfKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getCreate_object_statementAccess().getOfKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Create_object_statement_A1Assignment_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// a2=object_keyletters
protected class Create_object_statement_A2Assignment_5 extends AssignmentToken  {
	
	public Create_object_statement_A2Assignment_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getCreate_object_statementAccess().getA2Assignment_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Create_object_statement_OfKeyword_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("a2",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("a2");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getCreate_object_statementAccess().getA2Object_keylettersParserRuleCall_5_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getCreate_object_statementAccess().getA2Object_keylettersParserRuleCall_5_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule create_object_statement ****************/



/************ begin Rule delete_statement ****************
 *
 * delete_statement:
 * 	"delete" "object" "instance" a1=inst_ref_var;
 *
 **/

// "delete" "object" "instance" a1=inst_ref_var
protected class Delete_statement_Group extends GroupToken {
	
	public Delete_statement_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getDelete_statementAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Delete_statement_A1Assignment_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getDelete_statementRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "delete"
protected class Delete_statement_DeleteKeyword_0 extends KeywordToken  {
	
	public Delete_statement_DeleteKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDelete_statementAccess().getDeleteKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// "object"
protected class Delete_statement_ObjectKeyword_1 extends KeywordToken  {
	
	public Delete_statement_ObjectKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDelete_statementAccess().getObjectKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Delete_statement_DeleteKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "instance"
protected class Delete_statement_InstanceKeyword_2 extends KeywordToken  {
	
	public Delete_statement_InstanceKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getDelete_statementAccess().getInstanceKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Delete_statement_ObjectKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// a1=inst_ref_var
protected class Delete_statement_A1Assignment_3 extends AssignmentToken  {
	
	public Delete_statement_A1Assignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getDelete_statementAccess().getA1Assignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Inst_ref_var_A1Assignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("a1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("a1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getInst_ref_varRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getDelete_statementAccess().getA1Inst_ref_varParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Delete_statement_InstanceKeyword_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule delete_statement ****************/


/************ begin Rule for_statement ****************
 *
 * //empty_statement
 * //  :
 * //  ;
 * for_statement:
 * 	"for" "each" a1=local_variable "in" a2=inst_ref_set_var a3=block "end" "for";
 *
 **/

// "for" "each" a1=local_variable "in" a2=inst_ref_set_var a3=block "end" "for"
protected class For_statement_Group extends GroupToken {
	
	public For_statement_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getFor_statementAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new For_statement_ForKeyword_7(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getFor_statementRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "for"
protected class For_statement_ForKeyword_0 extends KeywordToken  {
	
	public For_statement_ForKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFor_statementAccess().getForKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// "each"
protected class For_statement_EachKeyword_1 extends KeywordToken  {
	
	public For_statement_EachKeyword_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFor_statementAccess().getEachKeyword_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new For_statement_ForKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// a1=local_variable
protected class For_statement_A1Assignment_2 extends AssignmentToken  {
	
	public For_statement_A1Assignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFor_statementAccess().getA1Assignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new For_statement_EachKeyword_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("a1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("a1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getFor_statementAccess().getA1Local_variableParserRuleCall_2_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getFor_statementAccess().getA1Local_variableParserRuleCall_2_0();
			return obj;
		}
		return null;
	}

}

// "in"
protected class For_statement_InKeyword_3 extends KeywordToken  {
	
	public For_statement_InKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFor_statementAccess().getInKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new For_statement_A1Assignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// a2=inst_ref_set_var
protected class For_statement_A2Assignment_4 extends AssignmentToken  {
	
	public For_statement_A2Assignment_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFor_statementAccess().getA2Assignment_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Inst_ref_set_var_A1Assignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("a2",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("a2");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getInst_ref_set_varRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getFor_statementAccess().getA2Inst_ref_set_varParserRuleCall_4_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new For_statement_InKeyword_3(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// a3=block
protected class For_statement_A3Assignment_5 extends AssignmentToken  {
	
	public For_statement_A3Assignment_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getFor_statementAccess().getA3Assignment_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Block_StatementsAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("a3",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("a3");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getBlockRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getFor_statementAccess().getA3BlockParserRuleCall_5_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new For_statement_A2Assignment_4(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "end"
protected class For_statement_EndKeyword_6 extends KeywordToken  {
	
	public For_statement_EndKeyword_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFor_statementAccess().getEndKeyword_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new For_statement_A3Assignment_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "for"
protected class For_statement_ForKeyword_7 extends KeywordToken  {
	
	public For_statement_ForKeyword_7(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getFor_statementAccess().getForKeyword_7();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new For_statement_EndKeyword_6(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule for_statement ****************/


/************ begin Rule generate_statement ****************
 *
 * generate_statement:
 * 	"generate" a1=event_spec //|
 * 	//  member_access
 * ;
 *
 **/

// "generate" a1=event_spec //|
// //  member_access
protected class Generate_statement_Group extends GroupToken {
	
	public Generate_statement_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getGenerate_statementAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Generate_statement_A1Assignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getGenerate_statementRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "generate"
protected class Generate_statement_GenerateKeyword_0 extends KeywordToken  {
	
	public Generate_statement_GenerateKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getGenerate_statementAccess().getGenerateKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// a1=event_spec
protected class Generate_statement_A1Assignment_1 extends AssignmentToken  {
	
	public Generate_statement_A1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getGenerate_statementAccess().getA1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Generate_statement_GenerateKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("a1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("a1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getGenerate_statementAccess().getA1Event_specParserRuleCall_1_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getGenerate_statementAccess().getA1Event_specParserRuleCall_1_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule generate_statement ****************/


/************ begin Rule if_statement ****************
 *
 * if_statement:
 * 	"if" a1=expr a2=block ("elif" a3+=expr a4+=block)? ("else" a5=block)? "end" "if";
 *
 **/

// "if" a1=expr a2=block ("elif" a3+=expr a4+=block)? ("else" a5=block)? "end" "if"
protected class If_statement_Group extends GroupToken {
	
	public If_statement_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getIf_statementAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new If_statement_IfKeyword_6(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getIf_statementRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "if"
protected class If_statement_IfKeyword_0 extends KeywordToken  {
	
	public If_statement_IfKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getIf_statementAccess().getIfKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// a1=expr
protected class If_statement_A1Assignment_1 extends AssignmentToken  {
	
	public If_statement_A1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getIf_statementAccess().getA1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expr_A1Assignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("a1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("a1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExprRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getIf_statementAccess().getA1ExprParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new If_statement_IfKeyword_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// a2=block
protected class If_statement_A2Assignment_2 extends AssignmentToken  {
	
	public If_statement_A2Assignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getIf_statementAccess().getA2Assignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Block_StatementsAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("a2",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("a2");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getBlockRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getIf_statementAccess().getA2BlockParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new If_statement_A1Assignment_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// ("elif" a3+=expr a4+=block)?
protected class If_statement_Group_3 extends GroupToken {
	
	public If_statement_Group_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getIf_statementAccess().getGroup_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new If_statement_A4Assignment_3_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "elif"
protected class If_statement_ElifKeyword_3_0 extends KeywordToken  {
	
	public If_statement_ElifKeyword_3_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getIf_statementAccess().getElifKeyword_3_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new If_statement_A2Assignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// a3+=expr
protected class If_statement_A3Assignment_3_1 extends AssignmentToken  {
	
	public If_statement_A3Assignment_3_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getIf_statementAccess().getA3Assignment_3_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expr_A1Assignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("a3",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("a3");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExprRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getIf_statementAccess().getA3ExprParserRuleCall_3_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new If_statement_ElifKeyword_3_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// a4+=block
protected class If_statement_A4Assignment_3_2 extends AssignmentToken  {
	
	public If_statement_A4Assignment_3_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getIf_statementAccess().getA4Assignment_3_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Block_StatementsAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("a4",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("a4");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getBlockRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getIf_statementAccess().getA4BlockParserRuleCall_3_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new If_statement_A3Assignment_3_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// ("else" a5=block)?
protected class If_statement_Group_4 extends GroupToken {
	
	public If_statement_Group_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getIf_statementAccess().getGroup_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new If_statement_A5Assignment_4_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "else"
protected class If_statement_ElseKeyword_4_0 extends KeywordToken  {
	
	public If_statement_ElseKeyword_4_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getIf_statementAccess().getElseKeyword_4_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new If_statement_Group_3(lastRuleCallOrigin, this, 0, inst);
			case 1: return new If_statement_A2Assignment_2(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// a5=block
protected class If_statement_A5Assignment_4_1 extends AssignmentToken  {
	
	public If_statement_A5Assignment_4_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getIf_statementAccess().getA5Assignment_4_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Block_StatementsAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("a5",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("a5");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getBlockRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getIf_statementAccess().getA5BlockParserRuleCall_4_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new If_statement_ElseKeyword_4_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


// "end"
protected class If_statement_EndKeyword_5 extends KeywordToken  {
	
	public If_statement_EndKeyword_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getIf_statementAccess().getEndKeyword_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new If_statement_Group_4(lastRuleCallOrigin, this, 0, inst);
			case 1: return new If_statement_Group_3(lastRuleCallOrigin, this, 1, inst);
			case 2: return new If_statement_A2Assignment_2(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

}

// "if"
protected class If_statement_IfKeyword_6 extends KeywordToken  {
	
	public If_statement_IfKeyword_6(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getIf_statementAccess().getIfKeyword_6();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new If_statement_EndKeyword_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule if_statement ****************/





/************ begin Rule relate_statement ****************
 *
 * //  (
 * //    TOK_DOT
 * //    phrase
 * //  )?
 * //  (
 * //    "using"
 * //    assoc_obj_inst_ref_var
 * //  )?
 * relate_statement:
 * 	"relate" a1=inst_ref_var "to" a2=inst_ref_var "across" a3=relationship;
 *
 **/

// "relate" a1=inst_ref_var "to" a2=inst_ref_var "across" a3=relationship
protected class Relate_statement_Group extends GroupToken {
	
	public Relate_statement_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRelate_statementAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Relate_statement_A3Assignment_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getRelate_statementRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "relate"
protected class Relate_statement_RelateKeyword_0 extends KeywordToken  {
	
	public Relate_statement_RelateKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRelate_statementAccess().getRelateKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// a1=inst_ref_var
protected class Relate_statement_A1Assignment_1 extends AssignmentToken  {
	
	public Relate_statement_A1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRelate_statementAccess().getA1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Inst_ref_var_A1Assignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("a1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("a1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getInst_ref_varRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getRelate_statementAccess().getA1Inst_ref_varParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Relate_statement_RelateKeyword_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "to"
protected class Relate_statement_ToKeyword_2 extends KeywordToken  {
	
	public Relate_statement_ToKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRelate_statementAccess().getToKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Relate_statement_A1Assignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// a2=inst_ref_var
protected class Relate_statement_A2Assignment_3 extends AssignmentToken  {
	
	public Relate_statement_A2Assignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRelate_statementAccess().getA2Assignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Inst_ref_var_A1Assignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("a2",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("a2");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getInst_ref_varRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getRelate_statementAccess().getA2Inst_ref_varParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Relate_statement_ToKeyword_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "across"
protected class Relate_statement_AcrossKeyword_4 extends KeywordToken  {
	
	public Relate_statement_AcrossKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getRelate_statementAccess().getAcrossKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Relate_statement_A2Assignment_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// a3=relationship
protected class Relate_statement_A3Assignment_5 extends AssignmentToken  {
	
	public Relate_statement_A3Assignment_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRelate_statementAccess().getA3Assignment_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Relate_statement_AcrossKeyword_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("a3",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("a3");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getRelate_statementAccess().getA3RelationshipParserRuleCall_5_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getRelate_statementAccess().getA3RelationshipParserRuleCall_5_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule relate_statement ****************/


/************ begin Rule return_statement ****************
 *
 * return_statement:
 * 	a1="return" a2=expr?;
 *
 **/

// a1="return" a2=expr?
protected class Return_statement_Group extends GroupToken {
	
	public Return_statement_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getReturn_statementAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Return_statement_A2Assignment_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Return_statement_A1Assignment_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getReturn_statementRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// a1="return"
protected class Return_statement_A1Assignment_0 extends AssignmentToken  {
	
	public Return_statement_A1Assignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getReturn_statementAccess().getA1Assignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("a1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("a1");
		if(keywordSerializer.isValid(obj.getEObject(), grammarAccess.getReturn_statementAccess().getA1ReturnKeyword_0_0(), value, null)) {
			type = AssignmentType.KEYWORD;
			element = grammarAccess.getReturn_statementAccess().getA1ReturnKeyword_0_0();
			return obj;
		}
		return null;
	}

}

// a2=expr?
protected class Return_statement_A2Assignment_1 extends AssignmentToken  {
	
	public Return_statement_A2Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getReturn_statementAccess().getA2Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expr_A1Assignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("a2",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("a2");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExprRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getReturn_statementAccess().getA2ExprParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Return_statement_A1Assignment_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule return_statement ****************/


/************ begin Rule select_statement ****************
 *
 * select_statement:
 * 	"select" ("one" local_variable a1=object_spec | "any" local_variable a2=object_spec | "many" local_variable
 * 	a3=object_spec);
 *
 **/

// "select" ("one" local_variable a1=object_spec | "any" local_variable a2=object_spec | "many" local_variable
// a3=object_spec)
protected class Select_statement_Group extends GroupToken {
	
	public Select_statement_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSelect_statementAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Select_statement_Alternatives_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSelect_statementRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "select"
protected class Select_statement_SelectKeyword_0 extends KeywordToken  {
	
	public Select_statement_SelectKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSelect_statementAccess().getSelectKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// "one" local_variable a1=object_spec | "any" local_variable a2=object_spec | "many" local_variable a3=object_spec
protected class Select_statement_Alternatives_1 extends AlternativesToken {

	public Select_statement_Alternatives_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getSelect_statementAccess().getAlternatives_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Select_statement_Group_1_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Select_statement_Group_1_1(lastRuleCallOrigin, this, 1, inst);
			case 2: return new Select_statement_Group_1_2(lastRuleCallOrigin, this, 2, inst);
			default: return null;
		}	
	}

}

// "one" local_variable a1=object_spec
protected class Select_statement_Group_1_0 extends GroupToken {
	
	public Select_statement_Group_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSelect_statementAccess().getGroup_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Select_statement_A1Assignment_1_0_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "one"
protected class Select_statement_OneKeyword_1_0_0 extends KeywordToken  {
	
	public Select_statement_OneKeyword_1_0_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSelect_statementAccess().getOneKeyword_1_0_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Select_statement_SelectKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// local_variable
protected class Select_statement_Local_variableParserRuleCall_1_0_1 extends UnassignedTextToken {

	public Select_statement_Local_variableParserRuleCall_1_0_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSelect_statementAccess().getLocal_variableParserRuleCall_1_0_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Select_statement_OneKeyword_1_0_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// a1=object_spec
protected class Select_statement_A1Assignment_1_0_2 extends AssignmentToken  {
	
	public Select_statement_A1Assignment_1_0_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSelect_statementAccess().getA1Assignment_1_0_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Select_statement_Local_variableParserRuleCall_1_0_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("a1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("a1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getSelect_statementAccess().getA1Object_specParserRuleCall_1_0_2_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getSelect_statementAccess().getA1Object_specParserRuleCall_1_0_2_0();
			return obj;
		}
		return null;
	}

}


// "any" local_variable a2=object_spec
protected class Select_statement_Group_1_1 extends GroupToken {
	
	public Select_statement_Group_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSelect_statementAccess().getGroup_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Select_statement_A2Assignment_1_1_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "any"
protected class Select_statement_AnyKeyword_1_1_0 extends KeywordToken  {
	
	public Select_statement_AnyKeyword_1_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSelect_statementAccess().getAnyKeyword_1_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Select_statement_SelectKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// local_variable
protected class Select_statement_Local_variableParserRuleCall_1_1_1 extends UnassignedTextToken {

	public Select_statement_Local_variableParserRuleCall_1_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSelect_statementAccess().getLocal_variableParserRuleCall_1_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Select_statement_AnyKeyword_1_1_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// a2=object_spec
protected class Select_statement_A2Assignment_1_1_2 extends AssignmentToken  {
	
	public Select_statement_A2Assignment_1_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSelect_statementAccess().getA2Assignment_1_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Select_statement_Local_variableParserRuleCall_1_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("a2",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("a2");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getSelect_statementAccess().getA2Object_specParserRuleCall_1_1_2_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getSelect_statementAccess().getA2Object_specParserRuleCall_1_1_2_0();
			return obj;
		}
		return null;
	}

}


// "many" local_variable a3=object_spec
protected class Select_statement_Group_1_2 extends GroupToken {
	
	public Select_statement_Group_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSelect_statementAccess().getGroup_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Select_statement_A3Assignment_1_2_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "many"
protected class Select_statement_ManyKeyword_1_2_0 extends KeywordToken  {
	
	public Select_statement_ManyKeyword_1_2_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSelect_statementAccess().getManyKeyword_1_2_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Select_statement_SelectKeyword_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// local_variable
protected class Select_statement_Local_variableParserRuleCall_1_2_1 extends UnassignedTextToken {

	public Select_statement_Local_variableParserRuleCall_1_2_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSelect_statementAccess().getLocal_variableParserRuleCall_1_2_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Select_statement_ManyKeyword_1_2_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// a3=object_spec
protected class Select_statement_A3Assignment_1_2_2 extends AssignmentToken  {
	
	public Select_statement_A3Assignment_1_2_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSelect_statementAccess().getA3Assignment_1_2_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Select_statement_Local_variableParserRuleCall_1_2_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("a3",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("a3");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getSelect_statementAccess().getA3Object_specParserRuleCall_1_2_2_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getSelect_statementAccess().getA3Object_specParserRuleCall_1_2_2_0();
			return obj;
		}
		return null;
	}

}




/************ end Rule select_statement ****************/




/************ begin Rule unrelate_statement ****************
 *
 * //  (
 * //    TOK_DOT
 * //    phrase
 * //  )?
 * //  (
 * //    "using"
 * //    assoc_obj_inst_ref_var
 * //  )?
 * unrelate_statement:
 * 	"unrelate" a1=inst_ref_var "from" a2=inst_ref_var "across" a3=relationship;
 *
 **/

// "unrelate" a1=inst_ref_var "from" a2=inst_ref_var "across" a3=relationship
protected class Unrelate_statement_Group extends GroupToken {
	
	public Unrelate_statement_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getUnrelate_statementAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Unrelate_statement_A3Assignment_5(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getUnrelate_statementRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "unrelate"
protected class Unrelate_statement_UnrelateKeyword_0 extends KeywordToken  {
	
	public Unrelate_statement_UnrelateKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getUnrelate_statementAccess().getUnrelateKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// a1=inst_ref_var
protected class Unrelate_statement_A1Assignment_1 extends AssignmentToken  {
	
	public Unrelate_statement_A1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getUnrelate_statementAccess().getA1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Inst_ref_var_A1Assignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("a1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("a1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getInst_ref_varRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getUnrelate_statementAccess().getA1Inst_ref_varParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Unrelate_statement_UnrelateKeyword_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "from"
protected class Unrelate_statement_FromKeyword_2 extends KeywordToken  {
	
	public Unrelate_statement_FromKeyword_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getUnrelate_statementAccess().getFromKeyword_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Unrelate_statement_A1Assignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// a2=inst_ref_var
protected class Unrelate_statement_A2Assignment_3 extends AssignmentToken  {
	
	public Unrelate_statement_A2Assignment_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getUnrelate_statementAccess().getA2Assignment_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Inst_ref_var_A1Assignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("a2",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("a2");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getInst_ref_varRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getUnrelate_statementAccess().getA2Inst_ref_varParserRuleCall_3_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Unrelate_statement_FromKeyword_2(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "across"
protected class Unrelate_statement_AcrossKeyword_4 extends KeywordToken  {
	
	public Unrelate_statement_AcrossKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getUnrelate_statementAccess().getAcrossKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Unrelate_statement_A2Assignment_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// a3=relationship
protected class Unrelate_statement_A3Assignment_5 extends AssignmentToken  {
	
	public Unrelate_statement_A3Assignment_5(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getUnrelate_statementAccess().getA3Assignment_5();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Unrelate_statement_AcrossKeyword_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("a3",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("a3");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getUnrelate_statementAccess().getA3RelationshipParserRuleCall_5_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getUnrelate_statementAccess().getA3RelationshipParserRuleCall_5_0();
			return obj;
		}
		return null;
	}

}


/************ end Rule unrelate_statement ****************/


/************ begin Rule while_statement ****************
 *
 * while_statement:
 * 	"while" a1=expr a2=block "end" "while";
 *
 **/

// "while" a1=expr a2=block "end" "while"
protected class While_statement_Group extends GroupToken {
	
	public While_statement_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getWhile_statementAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new While_statement_WhileKeyword_4(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getWhile_statementRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "while"
protected class While_statement_WhileKeyword_0 extends KeywordToken  {
	
	public While_statement_WhileKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getWhile_statementAccess().getWhileKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// a1=expr
protected class While_statement_A1Assignment_1 extends AssignmentToken  {
	
	public While_statement_A1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getWhile_statementAccess().getA1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expr_A1Assignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("a1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("a1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExprRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getWhile_statementAccess().getA1ExprParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new While_statement_WhileKeyword_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// a2=block
protected class While_statement_A2Assignment_2 extends AssignmentToken  {
	
	public While_statement_A2Assignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getWhile_statementAccess().getA2Assignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Block_StatementsAssignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("a2",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("a2");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getBlockRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getWhile_statementAccess().getA2BlockParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new While_statement_A1Assignment_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// "end"
protected class While_statement_EndKeyword_3 extends KeywordToken  {
	
	public While_statement_EndKeyword_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getWhile_statementAccess().getEndKeyword_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new While_statement_A2Assignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "while"
protected class While_statement_WhileKeyword_4 extends KeywordToken  {
	
	public While_statement_WhileKeyword_4(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getWhile_statementAccess().getWhileKeyword_4();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new While_statement_EndKeyword_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule while_statement ****************/


/************ begin Rule assignment_expr ****************
 *
 * //|
 * //  ( "param" TOK_DOT )=>
 * //  param_data_access
 * //  TOK_EQUAL
 * //  expr
 * assignment_expr: //member_access
 * 	ID TOK_EQUAL a1=expr;
 *
 **/

// //member_access
// ID TOK_EQUAL a1=expr
protected class Assignment_expr_Group extends GroupToken {
	
	public Assignment_expr_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAssignment_exprAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Assignment_expr_A1Assignment_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAssignment_exprRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// //member_access
// ID
protected class Assignment_expr_IDTerminalRuleCall_0 extends UnassignedTextToken {

	public Assignment_expr_IDTerminalRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAssignment_exprAccess().getIDTerminalRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// TOK_EQUAL
protected class Assignment_expr_TOK_EQUALTerminalRuleCall_1 extends UnassignedTextToken {

	public Assignment_expr_TOK_EQUALTerminalRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAssignment_exprAccess().getTOK_EQUALTerminalRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Assignment_expr_IDTerminalRuleCall_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// a1=expr
protected class Assignment_expr_A1Assignment_2 extends AssignmentToken  {
	
	public Assignment_expr_A1Assignment_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAssignment_exprAccess().getA1Assignment_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expr_A1Assignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("a1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("a1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExprRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAssignment_exprAccess().getA1ExprParserRuleCall_2_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Assignment_expr_TOK_EQUALTerminalRuleCall_1(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule assignment_expr ****************/


/************ begin Rule bridge_invocation ****************
 *
 * bridge_invocation:
 * 	a1=ee_keyletters TOK_DOUBLECOLON //  bridge_function
 * 	TOK_LPAREN //  (
 * 	//    invocation_parameters
 * 	//  )?
 * 	TOK_RPAREN;
 *
 **/

// a1=ee_keyletters TOK_DOUBLECOLON //  bridge_function
// TOK_LPAREN //  (
// //    invocation_parameters
// //  )?
// TOK_RPAREN
protected class Bridge_invocation_Group extends GroupToken {
	
	public Bridge_invocation_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getBridge_invocationAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Bridge_invocation_TOK_RPARENTerminalRuleCall_3(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getBridge_invocationRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// a1=ee_keyletters
protected class Bridge_invocation_A1Assignment_0 extends AssignmentToken  {
	
	public Bridge_invocation_A1Assignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBridge_invocationAccess().getA1Assignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("a1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("a1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getBridge_invocationAccess().getA1Ee_keylettersParserRuleCall_0_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getBridge_invocationAccess().getA1Ee_keylettersParserRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// TOK_DOUBLECOLON
protected class Bridge_invocation_TOK_DOUBLECOLONTerminalRuleCall_1 extends UnassignedTextToken {

	public Bridge_invocation_TOK_DOUBLECOLONTerminalRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getBridge_invocationAccess().getTOK_DOUBLECOLONTerminalRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Bridge_invocation_A1Assignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// //  bridge_function
// TOK_LPAREN
protected class Bridge_invocation_TOK_LPARENTerminalRuleCall_2 extends UnassignedTextToken {

	public Bridge_invocation_TOK_LPARENTerminalRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getBridge_invocationAccess().getTOK_LPARENTerminalRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Bridge_invocation_TOK_DOUBLECOLONTerminalRuleCall_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// //  (
// //    invocation_parameters
// //  )?
// TOK_RPAREN
protected class Bridge_invocation_TOK_RPARENTerminalRuleCall_3 extends UnassignedTextToken {

	public Bridge_invocation_TOK_RPARENTerminalRuleCall_3(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getBridge_invocationAccess().getTOK_RPARENTerminalRuleCall_3();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Bridge_invocation_TOK_LPARENTerminalRuleCall_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule bridge_invocation ****************/




/************ begin Rule bridge_expr ****************
 *
 * bridge_expr:
 * 	"bridge" a1=bridge_invocation;
 *
 **/

// "bridge" a1=bridge_invocation
protected class Bridge_expr_Group extends GroupToken {
	
	public Bridge_expr_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getBridge_exprAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Bridge_expr_A1Assignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getBridge_exprRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "bridge"
protected class Bridge_expr_BridgeKeyword_0 extends KeywordToken  {
	
	public Bridge_expr_BridgeKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getBridge_exprAccess().getBridgeKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// a1=bridge_invocation
protected class Bridge_expr_A1Assignment_1 extends AssignmentToken  {
	
	public Bridge_expr_A1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getBridge_exprAccess().getA1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Bridge_invocation_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("a1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("a1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getBridge_invocationRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getBridge_exprAccess().getA1Bridge_invocationParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Bridge_expr_BridgeKeyword_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}


/************ end Rule bridge_expr ****************/

















/************ begin Rule assoc_obj_inst_ref_var ****************
 *
 * assoc_obj_inst_ref_var:
 * 	inst_ref_var;
 *
 **/

// inst_ref_var
protected class Assoc_obj_inst_ref_var_Inst_ref_varParserRuleCall extends RuleCallToken {
	
	public Assoc_obj_inst_ref_var_Inst_ref_varParserRuleCall(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAssoc_obj_inst_ref_varAccess().getInst_ref_varParserRuleCall();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Inst_ref_var_A1Assignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getInst_ref_varRule().getType().getClassifier())
			return null;
		if(checkForRecursion(Inst_ref_var_A1Assignment.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

/************ end Rule assoc_obj_inst_ref_var ****************/















/************ begin Rule inst_ref_set_var ****************
 *
 * inst_ref_set_var:
 * 	a1=local_variable;
 *
 **/

// a1=local_variable
protected class Inst_ref_set_var_A1Assignment extends AssignmentToken  {
	
	public Inst_ref_set_var_A1Assignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getInst_ref_set_varAccess().getA1Assignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getInst_ref_set_varRule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("a1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("a1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getInst_ref_set_varAccess().getA1Local_variableParserRuleCall_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getInst_ref_set_varAccess().getA1Local_variableParserRuleCall_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule inst_ref_set_var ****************/


/************ begin Rule inst_ref_var ****************
 *
 * inst_ref_var:
 * 	a1=local_variable;
 *
 **/

// a1=local_variable
protected class Inst_ref_var_A1Assignment extends AssignmentToken  {
	
	public Inst_ref_var_A1Assignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getInst_ref_varAccess().getA1Assignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getInst_ref_varRule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("a1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("a1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getInst_ref_varAccess().getA1Local_variableParserRuleCall_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getInst_ref_varAccess().getA1Local_variableParserRuleCall_0();
			return obj;
		}
		return null;
	}

}

/************ end Rule inst_ref_var ****************/














/************ begin Rule expr ****************
 *
 * expr:
 * 	a1=sub_expr;
 *
 **/

// a1=sub_expr
protected class Expr_A1Assignment extends AssignmentToken  {
	
	public Expr_A1Assignment(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getExprAccess().getA1Assignment();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Sub_expr_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getExprRule().getType().getClassifier())
			return null;
		if((value = eObjectConsumer.getConsumable("a1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("a1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSub_exprRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getExprAccess().getA1Sub_exprParserRuleCall_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

/************ end Rule expr ****************/


/************ begin Rule sub_expr ****************
 *
 * sub_expr:
 * 	a1=conjunction ("or" a2+=conjunction)*;
 *
 **/

// a1=conjunction ("or" a2+=conjunction)*
protected class Sub_expr_Group extends GroupToken {
	
	public Sub_expr_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSub_exprAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Sub_expr_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Sub_expr_A1Assignment_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getSub_exprRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// a1=conjunction
protected class Sub_expr_A1Assignment_0 extends AssignmentToken  {
	
	public Sub_expr_A1Assignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSub_exprAccess().getA1Assignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Conjunction_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("a1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("a1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getConjunctionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getSub_exprAccess().getA1ConjunctionParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// ("or" a2+=conjunction)*
protected class Sub_expr_Group_1 extends GroupToken {
	
	public Sub_expr_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getSub_exprAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Sub_expr_A2Assignment_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "or"
protected class Sub_expr_OrKeyword_1_0 extends KeywordToken  {
	
	public Sub_expr_OrKeyword_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getSub_exprAccess().getOrKeyword_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Sub_expr_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Sub_expr_A1Assignment_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// a2+=conjunction
protected class Sub_expr_A2Assignment_1_1 extends AssignmentToken  {
	
	public Sub_expr_A2Assignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getSub_exprAccess().getA2Assignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Conjunction_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("a2",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("a2");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getConjunctionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getSub_exprAccess().getA2ConjunctionParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Sub_expr_OrKeyword_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule sub_expr ****************/


/************ begin Rule conjunction ****************
 *
 * conjunction:
 * 	a1=relational_expr ("and" a2+=relational_expr)*;
 *
 **/

// a1=relational_expr ("and" a2+=relational_expr)*
protected class Conjunction_Group extends GroupToken {
	
	public Conjunction_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getConjunctionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Conjunction_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Conjunction_A1Assignment_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getConjunctionRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// a1=relational_expr
protected class Conjunction_A1Assignment_0 extends AssignmentToken  {
	
	public Conjunction_A1Assignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getConjunctionAccess().getA1Assignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Relational_expr_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("a1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("a1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getRelational_exprRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getConjunctionAccess().getA1Relational_exprParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// ("and" a2+=relational_expr)*
protected class Conjunction_Group_1 extends GroupToken {
	
	public Conjunction_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getConjunctionAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Conjunction_A2Assignment_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// "and"
protected class Conjunction_AndKeyword_1_0 extends KeywordToken  {
	
	public Conjunction_AndKeyword_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getConjunctionAccess().getAndKeyword_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Conjunction_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Conjunction_A1Assignment_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// a2+=relational_expr
protected class Conjunction_A2Assignment_1_1 extends AssignmentToken  {
	
	public Conjunction_A2Assignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getConjunctionAccess().getA2Assignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Relational_expr_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("a2",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("a2");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getRelational_exprRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getConjunctionAccess().getA2Relational_exprParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Conjunction_AndKeyword_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule conjunction ****************/


/************ begin Rule relational_expr ****************
 *
 * relational_expr:
 * 	a1=addition (comparison_operator a2=addition)?;
 *
 **/

// a1=addition (comparison_operator a2=addition)?
protected class Relational_expr_Group extends GroupToken {
	
	public Relational_expr_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRelational_exprAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Relational_expr_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Relational_expr_A1Assignment_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getRelational_exprRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// a1=addition
protected class Relational_expr_A1Assignment_0 extends AssignmentToken  {
	
	public Relational_expr_A1Assignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRelational_exprAccess().getA1Assignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Addition_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("a1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("a1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAdditionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getRelational_exprAccess().getA1AdditionParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// (comparison_operator a2=addition)?
protected class Relational_expr_Group_1 extends GroupToken {
	
	public Relational_expr_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getRelational_exprAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Relational_expr_A2Assignment_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// comparison_operator
protected class Relational_expr_Comparison_operatorParserRuleCall_1_0 extends UnassignedTextToken {

	public Relational_expr_Comparison_operatorParserRuleCall_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getRelational_exprAccess().getComparison_operatorParserRuleCall_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Relational_expr_A1Assignment_0(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// a2=addition
protected class Relational_expr_A2Assignment_1_1 extends AssignmentToken  {
	
	public Relational_expr_A2Assignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getRelational_exprAccess().getA2Assignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Addition_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("a2",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("a2");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getAdditionRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getRelational_exprAccess().getA2AdditionParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Relational_expr_Comparison_operatorParserRuleCall_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule relational_expr ****************/


/************ begin Rule addition ****************
 *
 * addition:
 * 	a1=multiplication (plus_or_minus a2+=multiplication)*;
 *
 **/

// a1=multiplication (plus_or_minus a2+=multiplication)*
protected class Addition_Group extends GroupToken {
	
	public Addition_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAdditionAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Addition_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Addition_A1Assignment_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getAdditionRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// a1=multiplication
protected class Addition_A1Assignment_0 extends AssignmentToken  {
	
	public Addition_A1Assignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAdditionAccess().getA1Assignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Multiplication_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("a1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("a1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getMultiplicationRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAdditionAccess().getA1MultiplicationParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// (plus_or_minus a2+=multiplication)*
protected class Addition_Group_1 extends GroupToken {
	
	public Addition_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getAdditionAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Addition_A2Assignment_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// plus_or_minus
protected class Addition_Plus_or_minusParserRuleCall_1_0 extends UnassignedTextToken {

	public Addition_Plus_or_minusParserRuleCall_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getAdditionAccess().getPlus_or_minusParserRuleCall_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Addition_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Addition_A1Assignment_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// a2+=multiplication
protected class Addition_A2Assignment_1_1 extends AssignmentToken  {
	
	public Addition_A2Assignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getAdditionAccess().getA2Assignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Multiplication_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("a2",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("a2");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getMultiplicationRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getAdditionAccess().getA2MultiplicationParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Addition_Plus_or_minusParserRuleCall_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule addition ****************/


/************ begin Rule multiplication ****************
 *
 * multiplication: //  ( boolean_negation )=>
 * //  boolean_negation
 * //|
 * 	a1=sign_expr (mult_op a2+=sign_expr)*;
 *
 **/

// //  ( boolean_negation )=>
// //  boolean_negation
// //|
// a1=sign_expr (mult_op a2+=sign_expr)*
protected class Multiplication_Group extends GroupToken {
	
	public Multiplication_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getMultiplicationAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Multiplication_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Multiplication_A1Assignment_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getMultiplicationRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// //  ( boolean_negation )=>
// //  boolean_negation
// //|
// a1=sign_expr
protected class Multiplication_A1Assignment_0 extends AssignmentToken  {
	
	public Multiplication_A1Assignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMultiplicationAccess().getA1Assignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Sign_expr_TermParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("a1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("a1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSign_exprRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getMultiplicationAccess().getA1Sign_exprParserRuleCall_0_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, consumed);
		}	
	}	
}

// (mult_op a2+=sign_expr)*
protected class Multiplication_Group_1 extends GroupToken {
	
	public Multiplication_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getMultiplicationAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Multiplication_A2Assignment_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// mult_op
protected class Multiplication_Mult_opParserRuleCall_1_0 extends UnassignedTextToken {

	public Multiplication_Mult_opParserRuleCall_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getMultiplicationAccess().getMult_opParserRuleCall_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Multiplication_Group_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Multiplication_A1Assignment_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

}

// a2+=sign_expr
protected class Multiplication_A2Assignment_1_1 extends AssignmentToken  {
	
	public Multiplication_A2Assignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getMultiplicationAccess().getA2Assignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Sign_expr_TermParserRuleCall(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("a2",false)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("a2");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getSign_exprRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getMultiplicationAccess().getA2Sign_exprParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Multiplication_Mult_opParserRuleCall_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}



/************ end Rule multiplication ****************/


/************ begin Rule sign_expr ****************
 *
 * sign_expr: //  (
 * //    plus_or_minus
 * //  )?
 * 	term;
 *
 **/

// //  (
// //    plus_or_minus
// //  )?
// term
protected class Sign_expr_TermParserRuleCall extends RuleCallToken {
	
	public Sign_expr_TermParserRuleCall(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getSign_exprAccess().getTermParserRuleCall();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTermRule().getType().getClassifier())
			return null;
		if(checkForRecursion(Term_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

/************ end Rule sign_expr ****************/


/************ begin Rule boolean_negation ****************
 *
 * boolean_negation:
 * 	"not" term;
 *
 **/

// "not" term
protected class Boolean_negation_Group extends GroupToken {
	
	public Boolean_negation_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getBoolean_negationAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Boolean_negation_TermParserRuleCall_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTermRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// "not"
protected class Boolean_negation_NotKeyword_0 extends KeywordToken  {
	
	public Boolean_negation_NotKeyword_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Keyword getGrammarElement() {
		return grammarAccess.getBoolean_negationAccess().getNotKeyword_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// term
protected class Boolean_negation_TermParserRuleCall_1 extends RuleCallToken {
	
	public Boolean_negation_TermParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getBoolean_negationAccess().getTermParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term_Alternatives(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(Term_Alternatives.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Boolean_negation_NotKeyword_0(lastRuleCallOrigin, next, actIndex, inst);
			default: return null;
		}	
	}	
}


/************ end Rule boolean_negation ****************/


/************ begin Rule term ****************
 *
 * term: //  (cardinality_op) => cardinality_op
 * //|
 * //  (empty_op) => empty_op
 * //|
 * //  (not_empty_op) => not_empty_op
 * //|
 * 	a1=rval | TOK_LPAREN //  (
 * 	//    ( assignment_expr )=>
 * 	//    assignment_expr
 * 	//  |
 * 	a2=expr //  )
 * 	TOK_RPAREN;
 *
 **/

// //  (cardinality_op) => cardinality_op
// //|
// //  (empty_op) => empty_op
// //|
// //  (not_empty_op) => not_empty_op
// //|
// a1=rval | TOK_LPAREN //  (
// //    ( assignment_expr )=>
// //    assignment_expr
// //  |
// a2=expr //  )
// TOK_RPAREN
protected class Term_Alternatives extends AlternativesToken {

	public Term_Alternatives(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Alternatives getGrammarElement() {
		return grammarAccess.getTermAccess().getAlternatives();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term_A1Assignment_0(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Term_Group_1(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getTermRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// //  (cardinality_op) => cardinality_op
// //|
// //  (empty_op) => empty_op
// //|
// //  (not_empty_op) => not_empty_op
// //|
// a1=rval
protected class Term_A1Assignment_0 extends AssignmentToken  {
	
	public Term_A1Assignment_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTermAccess().getA1Assignment_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("a1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("a1");
		if(valueSerializer.isValid(obj.getEObject(), grammarAccess.getTermAccess().getA1RvalParserRuleCall_0_0(), value, null)) {
			type = AssignmentType.DATATYPE_RULE_CALL;
			element = grammarAccess.getTermAccess().getA1RvalParserRuleCall_0_0();
			return obj;
		}
		return null;
	}

}

// TOK_LPAREN //  (
// //    ( assignment_expr )=>
// //    assignment_expr
// //  |
// a2=expr //  )
// TOK_RPAREN
protected class Term_Group_1 extends GroupToken {
	
	public Term_Group_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getTermAccess().getGroup_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term_TOK_RPARENTerminalRuleCall_1_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// TOK_LPAREN
protected class Term_TOK_LPARENTerminalRuleCall_1_0 extends UnassignedTextToken {

	public Term_TOK_LPARENTerminalRuleCall_1_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTermAccess().getTOK_LPARENTerminalRuleCall_1_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// //  (
// //    ( assignment_expr )=>
// //    assignment_expr
// //  |
// a2=expr
protected class Term_A2Assignment_1_1 extends AssignmentToken  {
	
	public Term_A2Assignment_1_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getTermAccess().getA2Assignment_1_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expr_A1Assignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("a2",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("a2");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExprRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getTermAccess().getA2ExprParserRuleCall_1_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Term_TOK_LPARENTerminalRuleCall_1_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// //  )
// TOK_RPAREN
protected class Term_TOK_RPARENTerminalRuleCall_1_2 extends UnassignedTextToken {

	public Term_TOK_RPARENTerminalRuleCall_1_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getTermAccess().getTOK_RPARENTerminalRuleCall_1_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Term_A2Assignment_1_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}



/************ end Rule term ****************/





/************ begin Rule instance_start_segment ****************
 *
 * instance_start_segment:
 * 	root_element_label array_refs?;
 *
 **/

// root_element_label array_refs?
protected class Instance_start_segment_Group extends GroupToken {
	
	public Instance_start_segment_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getInstance_start_segmentAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Instance_start_segment_Array_refsParserRuleCall_1(lastRuleCallOrigin, this, 0, inst);
			case 1: return new Instance_start_segment_Root_element_labelParserRuleCall_0(lastRuleCallOrigin, this, 1, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getArray_refsRule().getType().getClassifier())
			return null;
		return eObjectConsumer;
	}

}

// root_element_label
protected class Instance_start_segment_Root_element_labelParserRuleCall_0 extends UnassignedTextToken {

	public Instance_start_segment_Root_element_labelParserRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getInstance_start_segmentAccess().getRoot_element_labelParserRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index, inst);
		}	
	}

}

// array_refs?
protected class Instance_start_segment_Array_refsParserRuleCall_1 extends RuleCallToken {
	
	public Instance_start_segment_Array_refsParserRuleCall_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getInstance_start_segmentAccess().getArray_refsParserRuleCall_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Array_refs_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(checkForRecursion(Array_refs_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Instance_start_segment_Root_element_labelParserRuleCall_0(lastRuleCallOrigin, next, actIndex, inst);
			default: return null;
		}	
	}	
}


/************ end Rule instance_start_segment ****************/



/************ begin Rule member_access ****************
 *
 * //(TOK_DOT
 * // instance_access_segment
 * //)*
 * member_access:
 * 	instance_start_segment;
 *
 **/

// instance_start_segment
protected class Member_access_Instance_start_segmentParserRuleCall extends RuleCallToken {
	
	public Member_access_Instance_start_segmentParserRuleCall(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getMember_accessAccess().getInstance_start_segmentParserRuleCall();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Instance_start_segment_Group(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override
	public IEObjectConsumer tryConsume() {
		if(getEObject().eClass() != grammarAccess.getArray_refsRule().getType().getClassifier())
			return null;
		if(checkForRecursion(Instance_start_segment_Group.class, eObjectConsumer)) return null;
		return eObjectConsumer;
	}
	
    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		switch(index) {
			default: return lastRuleCallOrigin.createFollowerAfterReturn(next, actIndex , index, inst);
		}	
	}	
}

/************ end Rule member_access ****************/




/************ begin Rule array_refs ****************
 *
 * array_refs:
 * 	(TOK_LSQBR a1+=expr TOK_RSQBR)+;
 *
 **/

// (TOK_LSQBR a1+=expr TOK_RSQBR)+
protected class Array_refs_Group extends GroupToken {
	
	public Array_refs_Group(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Group getGrammarElement() {
		return grammarAccess.getArray_refsAccess().getGroup();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Array_refs_TOK_RSQBRTerminalRuleCall_2(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}

// TOK_LSQBR
protected class Array_refs_TOK_LSQBRTerminalRuleCall_0 extends UnassignedTextToken {

	public Array_refs_TOK_LSQBRTerminalRuleCall_0(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getArray_refsAccess().getTOK_LSQBRTerminalRuleCall_0();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Array_refs_Group(lastRuleCallOrigin, this, 0, inst);
			default: return lastRuleCallOrigin.createFollowerAfterReturn(this, index, index - 1, inst);
		}	
	}

}

// a1+=expr
protected class Array_refs_A1Assignment_1 extends AssignmentToken  {
	
	public Array_refs_A1Assignment_1(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public Assignment getGrammarElement() {
		return grammarAccess.getArray_refsAccess().getA1Assignment_1();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Expr_A1Assignment(this, this, 0, inst);
			default: return null;
		}	
	}

    @Override	
	public IEObjectConsumer tryConsume() {
		if((value = eObjectConsumer.getConsumable("a1",true)) == null) return null;
		IEObjectConsumer obj = eObjectConsumer.cloneAndConsume("a1");
		if(value instanceof EObject) { // org::eclipse::xtext::impl::RuleCallImpl
			IEObjectConsumer param = createEObjectConsumer((EObject)value);
			if(param.isInstanceOf(grammarAccess.getExprRule().getType().getClassifier())) {
				type = AssignmentType.PARSER_RULE_CALL;
				element = grammarAccess.getArray_refsAccess().getA1ExprParserRuleCall_1_0(); 
				consumed = obj;
				return param;
			}
		}
		return null;
	}

    @Override
	public AbstractToken createFollowerAfterReturn(AbstractToken next,	int actIndex, int index, IEObjectConsumer inst) {
		if(value == inst.getEObject() && !inst.isConsumed()) return null;
		switch(index) {
			case 0: return new Array_refs_TOK_LSQBRTerminalRuleCall_0(lastRuleCallOrigin, next, actIndex, consumed);
			default: return null;
		}	
	}	
}

// TOK_RSQBR
protected class Array_refs_TOK_RSQBRTerminalRuleCall_2 extends UnassignedTextToken {

	public Array_refs_TOK_RSQBRTerminalRuleCall_2(AbstractToken lastRuleCallOrigin, AbstractToken next, int transitionIndex, IEObjectConsumer eObjectConsumer) {
		super(lastRuleCallOrigin, next, transitionIndex, eObjectConsumer);
	}
	
	@Override
	public RuleCall getGrammarElement() {
		return grammarAccess.getArray_refsAccess().getTOK_RSQBRTerminalRuleCall_2();
	}

    @Override
	public AbstractToken createFollower(int index, IEObjectConsumer inst) {
		switch(index) {
			case 0: return new Array_refs_A1Assignment_1(lastRuleCallOrigin, this, 0, inst);
			default: return null;
		}	
	}

}


/************ end Rule array_refs ****************/








}
