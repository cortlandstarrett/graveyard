/*
* generated by Xtext
*/
grammar InternalXoal;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.xtuml.bp.xtext.oal.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtuml.bp.xtext.oal.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtuml.bp.xtext.oal.services.XoalGrammarAccess;

}

@parser::members {

 	private XoalGrammarAccess grammarAccess;
 	
    public InternalXoalParser(TokenStream input, XoalGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Code";	
   	}
   	
   	@Override
   	protected XoalGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleCode
entryRuleCode returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCodeRule()); }
	 iv_ruleCode=ruleCode 
	 { $current=$iv_ruleCode.current; } 
	 EOF 
;

// Rule Code
ruleCode returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getCodeAccess().getBlockParserRuleCall()); 
    }
    this_block_0=ruleblock
    { 
        $current = $this_block_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleblock
entryRuleblock returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBlockRule()); }
	 iv_ruleblock=ruleblock 
	 { $current=$iv_ruleblock.current; } 
	 EOF 
;

// Rule block
ruleblock returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getBlockAccess().getStatementsStatementParserRuleCall_0()); 
	    }
		lv_statements_0_0=rulestatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBlockRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_0_0, 
        		"statement");
	        afterParserOrEnumRuleCall();
	    }

)
)*
;





// Entry rule entryRulestatement
entryRulestatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	 iv_rulestatement=rulestatement 
	 { $current=$iv_rulestatement.current; } 
	 EOF 
;

// Rule statement
rulestatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getImplicit_ib_transform_statementParserRuleCall_0_0_0()); 
    }
ruleimplicit_ib_transform_statement
    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getStatementAccess().getFunction_statementParserRuleCall_0_0_1()); 
    }
rulefunction_statement
    { 
        afterParserOrEnumRuleCall();
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getImplicit_assignment_statementParserRuleCall_0_1()); 
    }
ruleimplicit_assignment_statement
    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getImplicit_invocation_statementParserRuleCall_0_2()); 
    }
ruleimplicit_invocation_statement
    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getAssignment_statementParserRuleCall_0_3()); 
    }
    this_assignment_statement_4=ruleassignment_statement
    { 
        $current = $this_assignment_statement_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getControl_statementParserRuleCall_0_4()); 
    }
    this_control_statement_5=rulecontrol_statement
    { 
        $current = $this_control_statement_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getBreak_statementParserRuleCall_0_5()); 
    }
    this_break_statement_6=rulebreak_statement
    { 
        $current = $this_break_statement_6.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getBridge_statementParserRuleCall_0_6()); 
    }
    this_bridge_statement_7=rulebridge_statement
    { 
        $current = $this_bridge_statement_7.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getSend_statementParserRuleCall_0_7()); 
    }
    this_send_statement_8=rulesend_statement
    { 
        $current = $this_send_statement_8.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getContinue_statementParserRuleCall_0_8()); 
    }
    this_continue_statement_9=rulecontinue_statement
    { 
        $current = $this_continue_statement_9.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getCreate_object_statementParserRuleCall_0_9()); 
    }
    this_create_object_statement_10=rulecreate_object_statement
    { 
        $current = $this_create_object_statement_10.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getCreate_event_statementParserRuleCall_0_10()); 
    }
    this_create_event_statement_11=rulecreate_event_statement
    { 
        $current = $this_create_event_statement_11.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getDelete_statementParserRuleCall_0_11()); 
    }
    this_delete_statement_12=ruledelete_statement
    { 
        $current = $this_delete_statement_12.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getFor_statementParserRuleCall_0_12()); 
    }
    this_for_statement_13=rulefor_statement
    { 
        $current = $this_for_statement_13.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getGenerate_statementParserRuleCall_0_13()); 
    }
    this_generate_statement_14=rulegenerate_statement
    { 
        $current = $this_generate_statement_14.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getIf_statementParserRuleCall_0_14()); 
    }
    this_if_statement_15=ruleif_statement
    { 
        $current = $this_if_statement_15.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getRelate_statementParserRuleCall_0_15()); 
    }
    this_relate_statement_16=rulerelate_statement
    { 
        $current = $this_relate_statement_16.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getReturn_statementParserRuleCall_0_16()); 
    }
    this_return_statement_17=rulereturn_statement
    { 
        $current = $this_return_statement_17.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getSelect_statementParserRuleCall_0_17()); 
    }
    this_select_statement_18=ruleselect_statement
    { 
        $current = $this_select_statement_18.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getTransform_statementParserRuleCall_0_18()); 
    }
ruletransform_statement
    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getWhile_statementParserRuleCall_0_19()); 
    }
    this_while_statement_20=rulewhile_statement
    { 
        $current = $this_while_statement_20.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getUnrelate_statementParserRuleCall_0_20()); 
    }
    this_unrelate_statement_21=ruleunrelate_statement
    { 
        $current = $this_unrelate_statement_21.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getDebug_statementParserRuleCall_0_21()); 
    }
ruledebug_statement
    { 
        afterParserOrEnumRuleCall();
    }
)	otherlv_23=';' 
    {
    	newLeafNode(otherlv_23, grammarAccess.getStatementAccess().getSemicolonKeyword_1());
    }
)
;





// Entry rule entryRuleassignment_statement
entryRuleassignment_statement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAssignment_statementRule()); }
	 iv_ruleassignment_statement=ruleassignment_statement 
	 { $current=$iv_ruleassignment_statement.current; } 
	 EOF 
;

// Rule assignment_statement
ruleassignment_statement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='assign' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAssignment_statementAccess().getAssignKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAssignment_statementAccess().getA1Assignment_exprParserRuleCall_1_0()); 
	    }
		lv_a1_1_0=ruleassignment_expr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignment_statementRule());
	        }
       		set(
       			$current, 
       			"a1",
        		lv_a1_1_0, 
        		"assignment_expr");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulebreak_statement
entryRulebreak_statement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBreak_statementRule()); }
	 iv_rulebreak_statement=rulebreak_statement 
	 { $current=$iv_rulebreak_statement.current; } 
	 EOF 
;

// Rule break_statement
rulebreak_statement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_a1_0_0=	'break' 
    {
        newLeafNode(lv_a1_0_0, grammarAccess.getBreak_statementAccess().getA1BreakKeyword_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBreak_statementRule());
	        }
       		setWithLastConsumed($current, "a1", lv_a1_0_0, "break");
	    }

)
)
;





// Entry rule entryRulebridge_statement
entryRulebridge_statement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBridge_statementRule()); }
	 iv_rulebridge_statement=rulebridge_statement 
	 { $current=$iv_rulebridge_statement.current; } 
	 EOF 
;

// Rule bridge_statement
rulebridge_statement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_a1_0_0=	'bridge' 
    {
        newLeafNode(lv_a1_0_0, grammarAccess.getBridge_statementAccess().getA1BridgeKeyword_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBridge_statementRule());
	        }
       		setWithLastConsumed($current, "a1", lv_a1_0_0, "bridge");
	    }

)
)
;





// Entry rule entryRulesend_statement
entryRulesend_statement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSend_statementRule()); }
	 iv_rulesend_statement=rulesend_statement 
	 { $current=$iv_rulesend_statement.current; } 
	 EOF 
;

// Rule send_statement
rulesend_statement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_a1_0_0=	'send' 
    {
        newLeafNode(lv_a1_0_0, grammarAccess.getSend_statementAccess().getA1SendKeyword_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSend_statementRule());
	        }
       		setWithLastConsumed($current, "a1", lv_a1_0_0, "send");
	    }

)
)
;





// Entry rule entryRulecontrol_statement
entryRulecontrol_statement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getControl_statementRule()); }
	 iv_rulecontrol_statement=rulecontrol_statement 
	 { $current=$iv_rulecontrol_statement.current; } 
	 EOF 
;

// Rule control_statement
rulecontrol_statement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_a1_0_0=	'control' 
    {
        newLeafNode(lv_a1_0_0, grammarAccess.getControl_statementAccess().getA1ControlKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getControl_statementRule());
	        }
       		setWithLastConsumed($current, "a1", lv_a1_0_0, "control");
	    }

)
)	otherlv_1='stop' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getControl_statementAccess().getStopKeyword_1());
    }
)
;





// Entry rule entryRulecontinue_statement
entryRulecontinue_statement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getContinue_statementRule()); }
	 iv_rulecontinue_statement=rulecontinue_statement 
	 { $current=$iv_rulecontinue_statement.current; } 
	 EOF 
;

// Rule continue_statement
rulecontinue_statement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_a1_0_0=	'continue' 
    {
        newLeafNode(lv_a1_0_0, grammarAccess.getContinue_statementAccess().getA1ContinueKeyword_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getContinue_statementRule());
	        }
       		setWithLastConsumed($current, "a1", lv_a1_0_0, "continue");
	    }

)
)
;





// Entry rule entryRulecreate_event_statement
entryRulecreate_event_statement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCreate_event_statementRule()); }
	 iv_rulecreate_event_statement=rulecreate_event_statement 
	 { $current=$iv_rulecreate_event_statement.current; } 
	 EOF 
;

// Rule create_event_statement
rulecreate_event_statement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='create' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getCreate_event_statementAccess().getCreateKeyword_0());
    }
	otherlv_1='event' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getCreate_event_statementAccess().getEventKeyword_1());
    }
	otherlv_2='instance' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getCreate_event_statementAccess().getInstanceKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCreate_event_statementAccess().getA1Local_variableParserRuleCall_3_0()); 
	    }
		lv_a1_3_0=rulelocal_variable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCreate_event_statementRule());
	        }
       		set(
       			$current, 
       			"a1",
        		lv_a1_3_0, 
        		"local_variable");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='of' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getCreate_event_statementAccess().getOfKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCreate_event_statementAccess().getA2Event_specParserRuleCall_5_0()); 
	    }
		lv_a2_5_0=ruleevent_spec		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCreate_event_statementRule());
	        }
       		set(
       			$current, 
       			"a2",
        		lv_a2_5_0, 
        		"event_spec");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulecreate_object_statement
entryRulecreate_object_statement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCreate_object_statementRule()); }
	 iv_rulecreate_object_statement=rulecreate_object_statement 
	 { $current=$iv_rulecreate_object_statement.current; } 
	 EOF 
;

// Rule create_object_statement
rulecreate_object_statement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='create' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getCreate_object_statementAccess().getCreateKeyword_0());
    }
	otherlv_1='object' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getCreate_object_statementAccess().getObjectKeyword_1());
    }
	otherlv_2='instance' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getCreate_object_statementAccess().getInstanceKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCreate_object_statementAccess().getA1Local_variableParserRuleCall_3_0()); 
	    }
		lv_a1_3_0=rulelocal_variable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCreate_object_statementRule());
	        }
       		set(
       			$current, 
       			"a1",
        		lv_a1_3_0, 
        		"local_variable");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='of' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getCreate_object_statementAccess().getOfKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCreate_object_statementAccess().getA2Object_keylettersParserRuleCall_5_0()); 
	    }
		lv_a2_5_0=ruleobject_keyletters		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCreate_object_statementRule());
	        }
       		set(
       			$current, 
       			"a2",
        		lv_a2_5_0, 
        		"object_keyletters");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuledebug_statement
entryRuledebug_statement returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getDebug_statementRule()); } 
	 iv_ruledebug_statement=ruledebug_statement 
	 { $current=$iv_ruledebug_statement.current.getText(); }  
	 EOF 
;

// Rule debug_statement
ruledebug_statement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='_debug' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDebug_statementAccess().get_debugKeyword_0()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getDebug_statementAccess().getDebug_operandParserRuleCall_1()); 
    }
    this_debug_operand_1=ruledebug_operand    {
		$current.merge(this_debug_operand_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)+)
    ;





// Entry rule entryRuledelete_statement
entryRuledelete_statement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDelete_statementRule()); }
	 iv_ruledelete_statement=ruledelete_statement 
	 { $current=$iv_ruledelete_statement.current; } 
	 EOF 
;

// Rule delete_statement
ruledelete_statement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='delete' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDelete_statementAccess().getDeleteKeyword_0());
    }
	otherlv_1='object' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getDelete_statementAccess().getObjectKeyword_1());
    }
	otherlv_2='instance' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getDelete_statementAccess().getInstanceKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDelete_statementAccess().getA1Inst_ref_varParserRuleCall_3_0()); 
	    }
		lv_a1_3_0=ruleinst_ref_var		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDelete_statementRule());
	        }
       		set(
       			$current, 
       			"a1",
        		lv_a1_3_0, 
        		"inst_ref_var");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulefor_statement
entryRulefor_statement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFor_statementRule()); }
	 iv_rulefor_statement=rulefor_statement 
	 { $current=$iv_rulefor_statement.current; } 
	 EOF 
;

// Rule for_statement
rulefor_statement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='for' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFor_statementAccess().getForKeyword_0());
    }
	otherlv_1='each' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFor_statementAccess().getEachKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFor_statementAccess().getA1Local_variableParserRuleCall_2_0()); 
	    }
		lv_a1_2_0=rulelocal_variable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFor_statementRule());
	        }
       		set(
       			$current, 
       			"a1",
        		lv_a1_2_0, 
        		"local_variable");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='in' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFor_statementAccess().getInKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFor_statementAccess().getA2Inst_ref_set_varParserRuleCall_4_0()); 
	    }
		lv_a2_4_0=ruleinst_ref_set_var		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFor_statementRule());
	        }
       		set(
       			$current, 
       			"a2",
        		lv_a2_4_0, 
        		"inst_ref_set_var");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFor_statementAccess().getA3BlockParserRuleCall_5_0()); 
	    }
		lv_a3_5_0=ruleblock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFor_statementRule());
	        }
       		set(
       			$current, 
       			"a3",
        		lv_a3_5_0, 
        		"block");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6='end' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getFor_statementAccess().getEndKeyword_6());
    }
	otherlv_7='for' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getFor_statementAccess().getForKeyword_7());
    }
)
;





// Entry rule entryRulegenerate_statement
entryRulegenerate_statement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGenerate_statementRule()); }
	 iv_rulegenerate_statement=rulegenerate_statement 
	 { $current=$iv_rulegenerate_statement.current; } 
	 EOF 
;

// Rule generate_statement
rulegenerate_statement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='generate' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getGenerate_statementAccess().getGenerateKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGenerate_statementAccess().getA1Event_specParserRuleCall_1_0()); 
	    }
		lv_a1_1_0=ruleevent_spec		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGenerate_statementRule());
	        }
       		set(
       			$current, 
       			"a1",
        		lv_a1_1_0, 
        		"event_spec");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleif_statement
entryRuleif_statement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIf_statementRule()); }
	 iv_ruleif_statement=ruleif_statement 
	 { $current=$iv_ruleif_statement.current; } 
	 EOF 
;

// Rule if_statement
ruleif_statement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='if' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getIf_statementAccess().getIfKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIf_statementAccess().getA1ExprParserRuleCall_1_0()); 
	    }
		lv_a1_1_0=ruleexpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIf_statementRule());
	        }
       		set(
       			$current, 
       			"a1",
        		lv_a1_1_0, 
        		"expr");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getIf_statementAccess().getA2BlockParserRuleCall_2_0()); 
	    }
		lv_a2_2_0=ruleblock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIf_statementRule());
	        }
       		set(
       			$current, 
       			"a2",
        		lv_a2_2_0, 
        		"block");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3='elif' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getIf_statementAccess().getElifKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIf_statementAccess().getA3ExprParserRuleCall_3_1_0()); 
	    }
		lv_a3_4_0=ruleexpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIf_statementRule());
	        }
       		add(
       			$current, 
       			"a3",
        		lv_a3_4_0, 
        		"expr");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getIf_statementAccess().getA4BlockParserRuleCall_3_2_0()); 
	    }
		lv_a4_5_0=ruleblock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIf_statementRule());
	        }
       		add(
       			$current, 
       			"a4",
        		lv_a4_5_0, 
        		"block");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_6='else' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getIf_statementAccess().getElseKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIf_statementAccess().getA5BlockParserRuleCall_4_1_0()); 
	    }
		lv_a5_7_0=ruleblock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIf_statementRule());
	        }
       		set(
       			$current, 
       			"a5",
        		lv_a5_7_0, 
        		"block");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_8='end' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getIf_statementAccess().getEndKeyword_5());
    }
	otherlv_9='if' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getIf_statementAccess().getIfKeyword_6());
    }
)
;





// Entry rule entryRuleimplicit_assignment_statement
entryRuleimplicit_assignment_statement returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getImplicit_assignment_statementRule()); } 
	 iv_ruleimplicit_assignment_statement=ruleimplicit_assignment_statement 
	 { $current=$iv_ruleimplicit_assignment_statement.current.getText(); }  
	 EOF 
;

// Rule implicit_assignment_statement
ruleimplicit_assignment_statement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='implicit_assignment_statement' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getImplicit_assignment_statementAccess().getImplicit_assignment_statementKeyword()); 
    }

    ;





// Entry rule entryRuleimplicit_invocation_statement
entryRuleimplicit_invocation_statement returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getImplicit_invocation_statementRule()); } 
	 iv_ruleimplicit_invocation_statement=ruleimplicit_invocation_statement 
	 { $current=$iv_ruleimplicit_invocation_statement.current.getText(); }  
	 EOF 
;

// Rule implicit_invocation_statement
ruleimplicit_invocation_statement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='implicit_invocation_statement' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getImplicit_invocation_statementAccess().getImplicit_invocation_statementKeyword()); 
    }

    ;





// Entry rule entryRuleimplicit_ib_transform_statement
entryRuleimplicit_ib_transform_statement returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getImplicit_ib_transform_statementRule()); } 
	 iv_ruleimplicit_ib_transform_statement=ruleimplicit_ib_transform_statement 
	 { $current=$iv_ruleimplicit_ib_transform_statement.current.getText(); }  
	 EOF 
;

// Rule implicit_ib_transform_statement
ruleimplicit_ib_transform_statement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='implicit_ib_transform_statement' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getImplicit_ib_transform_statementAccess().getImplicit_ib_transform_statementKeyword()); 
    }

    ;





// Entry rule entryRulerelate_statement
entryRulerelate_statement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRelate_statementRule()); }
	 iv_rulerelate_statement=rulerelate_statement 
	 { $current=$iv_rulerelate_statement.current; } 
	 EOF 
;

// Rule relate_statement
rulerelate_statement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='relate' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getRelate_statementAccess().getRelateKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRelate_statementAccess().getA1Inst_ref_varParserRuleCall_1_0()); 
	    }
		lv_a1_1_0=ruleinst_ref_var		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelate_statementRule());
	        }
       		set(
       			$current, 
       			"a1",
        		lv_a1_1_0, 
        		"inst_ref_var");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='to' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getRelate_statementAccess().getToKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRelate_statementAccess().getA2Inst_ref_varParserRuleCall_3_0()); 
	    }
		lv_a2_3_0=ruleinst_ref_var		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelate_statementRule());
	        }
       		set(
       			$current, 
       			"a2",
        		lv_a2_3_0, 
        		"inst_ref_var");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='across' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getRelate_statementAccess().getAcrossKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRelate_statementAccess().getA3RelationshipParserRuleCall_5_0()); 
	    }
		lv_a3_5_0=rulerelationship		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelate_statementRule());
	        }
       		set(
       			$current, 
       			"a3",
        		lv_a3_5_0, 
        		"relationship");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulereturn_statement
entryRulereturn_statement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getReturn_statementRule()); }
	 iv_rulereturn_statement=rulereturn_statement 
	 { $current=$iv_rulereturn_statement.current; } 
	 EOF 
;

// Rule return_statement
rulereturn_statement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_a1_0_0=	'return' 
    {
        newLeafNode(lv_a1_0_0, grammarAccess.getReturn_statementAccess().getA1ReturnKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getReturn_statementRule());
	        }
       		setWithLastConsumed($current, "a1", lv_a1_0_0, "return");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getReturn_statementAccess().getA2ExprParserRuleCall_1_0()); 
	    }
		lv_a2_1_0=ruleexpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReturn_statementRule());
	        }
       		set(
       			$current, 
       			"a2",
        		lv_a2_1_0, 
        		"expr");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleselect_statement
entryRuleselect_statement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSelect_statementRule()); }
	 iv_ruleselect_statement=ruleselect_statement 
	 { $current=$iv_ruleselect_statement.current; } 
	 EOF 
;

// Rule select_statement
ruleselect_statement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='select' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSelect_statementAccess().getSelectKeyword_0());
    }
((	otherlv_1='one' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSelect_statementAccess().getOneKeyword_1_0_0());
    }

    { 
        newCompositeNode(grammarAccess.getSelect_statementAccess().getLocal_variableParserRuleCall_1_0_1()); 
    }
rulelocal_variable
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSelect_statementAccess().getA1Object_specParserRuleCall_1_0_2_0()); 
	    }
		lv_a1_3_0=ruleobject_spec		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelect_statementRule());
	        }
       		set(
       			$current, 
       			"a1",
        		lv_a1_3_0, 
        		"object_spec");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(	otherlv_4='any' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSelect_statementAccess().getAnyKeyword_1_1_0());
    }

    { 
        newCompositeNode(grammarAccess.getSelect_statementAccess().getLocal_variableParserRuleCall_1_1_1()); 
    }
rulelocal_variable
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSelect_statementAccess().getA2Object_specParserRuleCall_1_1_2_0()); 
	    }
		lv_a2_6_0=ruleobject_spec		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelect_statementRule());
	        }
       		set(
       			$current, 
       			"a2",
        		lv_a2_6_0, 
        		"object_spec");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(	otherlv_7='many' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getSelect_statementAccess().getManyKeyword_1_2_0());
    }

    { 
        newCompositeNode(grammarAccess.getSelect_statementAccess().getLocal_variableParserRuleCall_1_2_1()); 
    }
rulelocal_variable
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSelect_statementAccess().getA3Object_specParserRuleCall_1_2_2_0()); 
	    }
		lv_a3_9_0=ruleobject_spec		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSelect_statementRule());
	        }
       		set(
       			$current, 
       			"a3",
        		lv_a3_9_0, 
        		"object_spec");
	        afterParserOrEnumRuleCall();
	    }

)
))))
;





// Entry rule entryRuletransform_statement
entryRuletransform_statement returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTransform_statementRule()); } 
	 iv_ruletransform_statement=ruletransform_statement 
	 { $current=$iv_ruletransform_statement.current.getText(); }  
	 EOF 
;

// Rule transform_statement
ruletransform_statement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='transform' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTransform_statementAccess().getTransformKeyword()); 
    }

    ;





// Entry rule entryRulefunction_statement
entryRulefunction_statement returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunction_statementRule()); } 
	 iv_rulefunction_statement=rulefunction_statement 
	 { $current=$iv_rulefunction_statement.current.getText(); }  
	 EOF 
;

// Rule function_statement
rulefunction_statement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='function_statement' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFunction_statementAccess().getFunction_statementKeyword()); 
    }

    ;





// Entry rule entryRuleunrelate_statement
entryRuleunrelate_statement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnrelate_statementRule()); }
	 iv_ruleunrelate_statement=ruleunrelate_statement 
	 { $current=$iv_ruleunrelate_statement.current; } 
	 EOF 
;

// Rule unrelate_statement
ruleunrelate_statement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='unrelate' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getUnrelate_statementAccess().getUnrelateKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUnrelate_statementAccess().getA1Inst_ref_varParserRuleCall_1_0()); 
	    }
		lv_a1_1_0=ruleinst_ref_var		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnrelate_statementRule());
	        }
       		set(
       			$current, 
       			"a1",
        		lv_a1_1_0, 
        		"inst_ref_var");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='from' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getUnrelate_statementAccess().getFromKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUnrelate_statementAccess().getA2Inst_ref_varParserRuleCall_3_0()); 
	    }
		lv_a2_3_0=ruleinst_ref_var		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnrelate_statementRule());
	        }
       		set(
       			$current, 
       			"a2",
        		lv_a2_3_0, 
        		"inst_ref_var");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='across' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getUnrelate_statementAccess().getAcrossKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUnrelate_statementAccess().getA3RelationshipParserRuleCall_5_0()); 
	    }
		lv_a3_5_0=rulerelationship		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnrelate_statementRule());
	        }
       		set(
       			$current, 
       			"a3",
        		lv_a3_5_0, 
        		"relationship");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulewhile_statement
entryRulewhile_statement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getWhile_statementRule()); }
	 iv_rulewhile_statement=rulewhile_statement 
	 { $current=$iv_rulewhile_statement.current; } 
	 EOF 
;

// Rule while_statement
rulewhile_statement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='while' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getWhile_statementAccess().getWhileKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getWhile_statementAccess().getA1ExprParserRuleCall_1_0()); 
	    }
		lv_a1_1_0=ruleexpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWhile_statementRule());
	        }
       		set(
       			$current, 
       			"a1",
        		lv_a1_1_0, 
        		"expr");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getWhile_statementAccess().getA2BlockParserRuleCall_2_0()); 
	    }
		lv_a2_2_0=ruleblock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWhile_statementRule());
	        }
       		set(
       			$current, 
       			"a2",
        		lv_a2_2_0, 
        		"block");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='end' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getWhile_statementAccess().getEndKeyword_3());
    }
	otherlv_4='while' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getWhile_statementAccess().getWhileKeyword_4());
    }
)
;





// Entry rule entryRuleassignment_expr
entryRuleassignment_expr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAssignment_exprRule()); }
	 iv_ruleassignment_expr=ruleassignment_expr 
	 { $current=$iv_ruleassignment_expr.current; } 
	 EOF 
;

// Rule assignment_expr
ruleassignment_expr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(this_ID_0=RULE_ID
    { 
    newLeafNode(this_ID_0, grammarAccess.getAssignment_exprAccess().getIDTerminalRuleCall_0()); 
    }
this_TOK_EQUAL_1=RULE_TOK_EQUAL
    { 
    newLeafNode(this_TOK_EQUAL_1, grammarAccess.getAssignment_exprAccess().getTOK_EQUALTerminalRuleCall_1()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAssignment_exprAccess().getA1ExprParserRuleCall_2_0()); 
	    }
		lv_a1_2_0=ruleexpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignment_exprRule());
	        }
       		set(
       			$current, 
       			"a1",
        		lv_a1_2_0, 
        		"expr");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulebridge_invocation
entryRulebridge_invocation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBridge_invocationRule()); }
	 iv_rulebridge_invocation=rulebridge_invocation 
	 { $current=$iv_rulebridge_invocation.current; } 
	 EOF 
;

// Rule bridge_invocation
rulebridge_invocation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getBridge_invocationAccess().getA1Ee_keylettersParserRuleCall_0_0()); 
	    }
		lv_a1_0_0=ruleee_keyletters		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBridge_invocationRule());
	        }
       		set(
       			$current, 
       			"a1",
        		lv_a1_0_0, 
        		"ee_keyletters");
	        afterParserOrEnumRuleCall();
	    }

)
)this_TOK_DOUBLECOLON_1=RULE_TOK_DOUBLECOLON
    { 
    newLeafNode(this_TOK_DOUBLECOLON_1, grammarAccess.getBridge_invocationAccess().getTOK_DOUBLECOLONTerminalRuleCall_1()); 
    }
this_TOK_LPAREN_2=RULE_TOK_LPAREN
    { 
    newLeafNode(this_TOK_LPAREN_2, grammarAccess.getBridge_invocationAccess().getTOK_LPARENTerminalRuleCall_2()); 
    }
this_TOK_RPAREN_3=RULE_TOK_RPAREN
    { 
    newLeafNode(this_TOK_RPAREN_3, grammarAccess.getBridge_invocationAccess().getTOK_RPARENTerminalRuleCall_3()); 
    }
)
;







// Entry rule entryRuleinvocation
entryRuleinvocation returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getInvocationRule()); } 
	 iv_ruleinvocation=ruleinvocation 
	 { $current=$iv_ruleinvocation.current.getText(); }  
	 EOF 
;

// Rule invocation
ruleinvocation returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='invocation rule' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInvocationAccess().getInvocationRuleKeyword()); 
    }

    ;











// Entry rule entryRuledebug_operand
entryRuledebug_operand returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getDebug_operandRule()); } 
	 iv_ruledebug_operand=ruledebug_operand 
	 { $current=$iv_ruledebug_operand.current.getText(); }  
	 EOF 
;

// Rule debug_operand
ruledebug_operand returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='_trace' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDebug_operandAccess().get_traceKeyword_0_0()); 
    }
(
	kw='_off' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDebug_operandAccess().get_offKeyword_0_1_0()); 
    }

    |
	kw='_on' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDebug_operandAccess().get_onKeyword_0_1_1()); 
    }
))
    |(
	kw='_dump' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDebug_operandAccess().get_dumpKeyword_1_0()); 
    }
(
	kw='_off' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDebug_operandAccess().get_offKeyword_1_1_0()); 
    }

    |
	kw='_on' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDebug_operandAccess().get_onKeyword_1_1_1()); 
    }
))
    |(
	kw='_sor' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDebug_operandAccess().get_sorKeyword_2_0()); 
    }
(
	kw='_off' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDebug_operandAccess().get_offKeyword_2_1_0()); 
    }

    |
	kw='_on' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDebug_operandAccess().get_onKeyword_2_1_1()); 
    }
))
    |
	kw='_on' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDebug_operandAccess().get_onKeyword_3()); 
    }

    |
	kw='_off' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDebug_operandAccess().get_offKeyword_4()); 
    }

    |
	kw='_stat' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDebug_operandAccess().get_statKeyword_5()); 
    }
)
    ;





// Entry rule entryRuleevent_spec
entryRuleevent_spec returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEvent_specRule()); } 
	 iv_ruleevent_spec=ruleevent_spec 
	 { $current=$iv_ruleevent_spec.current.getText(); }  
	 EOF 
;

// Rule event_spec
ruleevent_spec returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getEvent_specAccess().getEvent_labelParserRuleCall_0()); 
    }
    this_event_label_0=ruleevent_label    {
		$current.merge(this_event_label_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='to' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEvent_specAccess().getToKeyword_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getEvent_specAccess().getInst_ref_var_or_ee_keylettersParserRuleCall_2()); 
    }
    this_inst_ref_var_or_ee_keyletters_2=ruleinst_ref_var_or_ee_keyletters    {
		$current.merge(this_inst_ref_var_or_ee_keyletters_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;







// Entry rule entryRuleinst_ref_var_or_ee_keyletters
entryRuleinst_ref_var_or_ee_keyletters returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getInst_ref_var_or_ee_keylettersRule()); } 
	 iv_ruleinst_ref_var_or_ee_keyletters=ruleinst_ref_var_or_ee_keyletters 
	 { $current=$iv_ruleinst_ref_var_or_ee_keyletters.current.getText(); }  
	 EOF 
;

// Rule inst_ref_var_or_ee_keyletters
ruleinst_ref_var_or_ee_keyletters returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getInst_ref_var_or_ee_keylettersAccess().getLocal_variableParserRuleCall()); 
    }
    this_local_variable_0=rulelocal_variable    {
		$current.merge(this_local_variable_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    ;









// Entry rule entryRuleinstance_chain
entryRuleinstance_chain returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getInstance_chainRule()); } 
	 iv_ruleinstance_chain=ruleinstance_chain 
	 { $current=$iv_ruleinstance_chain.current.getText(); }  
	 EOF 
;

// Rule instance_chain
ruleinstance_chain returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='instance_chain' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInstance_chainAccess().getInstance_chainKeyword()); 
    }

    ;





// Entry rule entryRuleobject_spec
entryRuleobject_spec returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getObject_specRule()); } 
	 iv_ruleobject_spec=ruleobject_spec 
	 { $current=$iv_ruleobject_spec.current.getText(); }  
	 EOF 
;

// Rule object_spec
ruleobject_spec returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='related' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getObject_specAccess().getRelatedKeyword_0_0()); 
    }

	kw='by' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getObject_specAccess().getByKeyword_0_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getObject_specAccess().getLocal_variableParserRuleCall_0_2()); 
    }
    this_local_variable_2=rulelocal_variable    {
		$current.merge(this_local_variable_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getObject_specAccess().getInstance_chainParserRuleCall_0_3()); 
    }
    this_instance_chain_3=ruleinstance_chain    {
		$current.merge(this_instance_chain_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    |(
	kw='from' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getObject_specAccess().getFromKeyword_1_0()); 
    }
(
	kw='instances' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getObject_specAccess().getInstancesKeyword_1_1_0()); 
    }

	kw='of' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getObject_specAccess().getOfKeyword_1_1_1()); 
    }
)?
    { 
        newCompositeNode(grammarAccess.getObject_specAccess().getObject_keylettersParserRuleCall_1_2()); 
    }
    this_object_keyletters_7=ruleobject_keyletters    {
		$current.merge(this_object_keyletters_7);
    }

    { 
        afterParserOrEnumRuleCall();
    }
))
    ;





















// Entry rule entryRuledata_item
entryRuledata_item returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getData_itemRule()); } 
	 iv_ruledata_item=ruledata_item 
	 { $current=$iv_ruledata_item.current.getText(); }  
	 EOF 
;

// Rule data_item
ruledata_item returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getData_itemAccess().getData_item_nameParserRuleCall()); 
    }
    this_data_item_name_0=ruledata_item_name    {
		$current.merge(this_data_item_name_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    ;





// Entry rule entryRuledata_item_name
entryRuledata_item_name returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getData_item_nameRule()); } 
	 iv_ruledata_item_name=ruledata_item_name 
	 { $current=$iv_ruledata_item_name.current.getText(); }  
	 EOF 
;

// Rule data_item_name
ruledata_item_name returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getData_item_nameAccess().getGeneral_nameParserRuleCall()); 
    }
    this_general_name_0=rulegeneral_name    {
		$current.merge(this_general_name_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    ;









// Entry rule entryRulekeyletters
entryRulekeyletters returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getKeylettersRule()); } 
	 iv_rulekeyletters=rulekeyletters 
	 { $current=$iv_rulekeyletters.current.getText(); }  
	 EOF 
;

// Rule keyletters
rulekeyletters returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getKeylettersAccess().getGeneral_nameParserRuleCall()); 
    }
    this_general_name_0=rulegeneral_name    {
		$current.merge(this_general_name_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    ;





// Entry rule entryRuleee_keyletters
entryRuleee_keyletters returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEe_keylettersRule()); } 
	 iv_ruleee_keyletters=ruleee_keyletters 
	 { $current=$iv_ruleee_keyletters.current.getText(); }  
	 EOF 
;

// Rule ee_keyletters
ruleee_keyletters returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getEe_keylettersAccess().getKeylettersParserRuleCall()); 
    }
    this_keyletters_0=rulekeyletters    {
		$current.merge(this_keyletters_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    ;





// Entry rule entryRuleevent_label
entryRuleevent_label returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEvent_labelRule()); } 
	 iv_ruleevent_label=ruleevent_label 
	 { $current=$iv_ruleevent_label.current.getText(); }  
	 EOF 
;

// Rule event_label
ruleevent_label returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getEvent_labelAccess().getGeneral_nameParserRuleCall()); 
    }
    this_general_name_0=rulegeneral_name    {
		$current.merge(this_general_name_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    ;







// Entry rule entryRulegeneral_name
entryRulegeneral_name returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getGeneral_nameRule()); } 
	 iv_rulegeneral_name=rulegeneral_name 
	 { $current=$iv_rulegeneral_name.current.getText(); }  
	 EOF 
;

// Rule general_name
rulegeneral_name returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getGeneral_nameAccess().getLimited_nameParserRuleCall()); 
    }
    this_limited_name_0=rulelimited_name    {
		$current.merge(this_limited_name_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    ;





// Entry rule entryRulesvc_general_name
entryRulesvc_general_name returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getSvc_general_nameRule()); } 
	 iv_rulesvc_general_name=rulesvc_general_name 
	 { $current=$iv_rulesvc_general_name.current.getText(); }  
	 EOF 
;

// Rule svc_general_name
rulesvc_general_name returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getSvc_general_nameAccess().getLimited_nameParserRuleCall()); 
    }
    this_limited_name_0=rulelimited_name    {
		$current.merge(this_limited_name_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    ;





// Entry rule entryRulelimited_name
entryRulelimited_name returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getLimited_nameRule()); } 
	 iv_rulelimited_name=rulelimited_name 
	 { $current=$iv_rulelimited_name.current.getText(); }  
	 EOF 
;

// Rule limited_name
rulelimited_name returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getLimited_nameAccess().getIDTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleinst_ref_set_var
entryRuleinst_ref_set_var returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInst_ref_set_varRule()); }
	 iv_ruleinst_ref_set_var=ruleinst_ref_set_var 
	 { $current=$iv_ruleinst_ref_set_var.current; } 
	 EOF 
;

// Rule inst_ref_set_var
ruleinst_ref_set_var returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getInst_ref_set_varAccess().getA1Local_variableParserRuleCall_0()); 
	    }
		lv_a1_0_0=rulelocal_variable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInst_ref_set_varRule());
	        }
       		set(
       			$current, 
       			"a1",
        		lv_a1_0_0, 
        		"local_variable");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleinst_ref_var
entryRuleinst_ref_var returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInst_ref_varRule()); }
	 iv_ruleinst_ref_var=ruleinst_ref_var 
	 { $current=$iv_ruleinst_ref_var.current; } 
	 EOF 
;

// Rule inst_ref_var
ruleinst_ref_var returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getInst_ref_varAccess().getA1Local_variableParserRuleCall_0()); 
	    }
		lv_a1_0_0=rulelocal_variable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInst_ref_varRule());
	        }
       		set(
       			$current, 
       			"a1",
        		lv_a1_0_0, 
        		"local_variable");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRulelocal_variable
entryRulelocal_variable returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getLocal_variableRule()); } 
	 iv_rulelocal_variable=rulelocal_variable 
	 { $current=$iv_rulelocal_variable.current.getText(); }  
	 EOF 
;

// Rule local_variable
rulelocal_variable returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getLocal_variableAccess().getRoot_element_labelParserRuleCall()); 
    }
    this_root_element_label_0=ruleroot_element_label    {
		$current.merge(this_root_element_label_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    ;





// Entry rule entryRuleroot_element_label
entryRuleroot_element_label returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getRoot_element_labelRule()); } 
	 iv_ruleroot_element_label=ruleroot_element_label 
	 { $current=$iv_ruleroot_element_label.current.getText(); }  
	 EOF 
;

// Rule root_element_label
ruleroot_element_label returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='selected' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRoot_element_labelAccess().getSelectedKeyword_0()); 
    }

    |
	kw='self' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRoot_element_labelAccess().getSelfKeyword_1()); 
    }

    |
    { 
        newCompositeNode(grammarAccess.getRoot_element_labelAccess().getLimited_nameParserRuleCall_2()); 
    }
    this_limited_name_2=rulelimited_name    {
		$current.merge(this_limited_name_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleelement_label
entryRuleelement_label returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getElement_labelRule()); } 
	 iv_ruleelement_label=ruleelement_label 
	 { $current=$iv_ruleelement_label.current.getText(); }  
	 EOF 
;

// Rule element_label
ruleelement_label returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getElement_labelAccess().getGeneral_nameParserRuleCall()); 
    }
    this_general_name_0=rulegeneral_name    {
		$current.merge(this_general_name_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    ;





// Entry rule entryRulefunction_name
entryRulefunction_name returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunction_nameRule()); } 
	 iv_rulefunction_name=rulefunction_name 
	 { $current=$iv_rulefunction_name.current.getText(); }  
	 EOF 
;

// Rule function_name
rulefunction_name returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getFunction_nameAccess().getGeneral_nameParserRuleCall()); 
    }
    this_general_name_0=rulegeneral_name    {
		$current.merge(this_general_name_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    ;





// Entry rule entryRulesvc_function_name
entryRulesvc_function_name returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getSvc_function_nameRule()); } 
	 iv_rulesvc_function_name=rulesvc_function_name 
	 { $current=$iv_rulesvc_function_name.current.getText(); }  
	 EOF 
;

// Rule svc_function_name
rulesvc_function_name returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getSvc_function_nameAccess().getSvc_general_nameParserRuleCall()); 
    }
    this_svc_general_name_0=rulesvc_general_name    {
		$current.merge(this_svc_general_name_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    ;







// Entry rule entryRuleobject_keyletters
entryRuleobject_keyletters returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getObject_keylettersRule()); } 
	 iv_ruleobject_keyletters=ruleobject_keyletters 
	 { $current=$iv_ruleobject_keyletters.current.getText(); }  
	 EOF 
;

// Rule object_keyletters
ruleobject_keyletters returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getObject_keylettersAccess().getKeylettersParserRuleCall()); 
    }
    this_keyletters_0=rulekeyletters    {
		$current.merge(this_keyletters_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    ;





// Entry rule entryRulephrase
entryRulephrase returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getPhraseRule()); } 
	 iv_rulephrase=rulephrase 
	 { $current=$iv_rulephrase.current.getText(); }  
	 EOF 
;

// Rule phrase
rulephrase returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='phrase' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPhraseAccess().getPhraseKeyword()); 
    }

    ;





// Entry rule entryRulerelationship
entryRulerelationship returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getRelationshipRule()); } 
	 iv_rulerelationship=rulerelationship 
	 { $current=$iv_rulerelationship.current.getText(); }  
	 EOF 
;

// Rule relationship
rulerelationship returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getRelationshipAccess().getIDTerminalRuleCall()); 
    }

    ;





// Entry rule entryRulesupp_data_item
entryRulesupp_data_item returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getSupp_data_itemRule()); } 
	 iv_rulesupp_data_item=rulesupp_data_item 
	 { $current=$iv_rulesupp_data_item.current.getText(); }  
	 EOF 
;

// Rule supp_data_item
rulesupp_data_item returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getSupp_data_itemAccess().getData_item_nameParserRuleCall()); 
    }
    this_data_item_name_0=ruledata_item_name    {
		$current.merge(this_data_item_name_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    ;









// Entry rule entryRuleexpr
entryRuleexpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExprRule()); }
	 iv_ruleexpr=ruleexpr 
	 { $current=$iv_ruleexpr.current; } 
	 EOF 
;

// Rule expr
ruleexpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getExprAccess().getA1Sub_exprParserRuleCall_0()); 
	    }
		lv_a1_0_0=rulesub_expr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExprRule());
	        }
       		set(
       			$current, 
       			"a1",
        		lv_a1_0_0, 
        		"sub_expr");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRulesub_expr
entryRulesub_expr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSub_exprRule()); }
	 iv_rulesub_expr=rulesub_expr 
	 { $current=$iv_rulesub_expr.current; } 
	 EOF 
;

// Rule sub_expr
rulesub_expr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getSub_exprAccess().getA1ConjunctionParserRuleCall_0_0()); 
	    }
		lv_a1_0_0=ruleconjunction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSub_exprRule());
	        }
       		set(
       			$current, 
       			"a1",
        		lv_a1_0_0, 
        		"conjunction");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='or' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSub_exprAccess().getOrKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSub_exprAccess().getA2ConjunctionParserRuleCall_1_1_0()); 
	    }
		lv_a2_2_0=ruleconjunction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSub_exprRule());
	        }
       		add(
       			$current, 
       			"a2",
        		lv_a2_2_0, 
        		"conjunction");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleconjunction
entryRuleconjunction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConjunctionRule()); }
	 iv_ruleconjunction=ruleconjunction 
	 { $current=$iv_ruleconjunction.current; } 
	 EOF 
;

// Rule conjunction
ruleconjunction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getConjunctionAccess().getA1Relational_exprParserRuleCall_0_0()); 
	    }
		lv_a1_0_0=rulerelational_expr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConjunctionRule());
	        }
       		set(
       			$current, 
       			"a1",
        		lv_a1_0_0, 
        		"relational_expr");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='and' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getConjunctionAccess().getAndKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConjunctionAccess().getA2Relational_exprParserRuleCall_1_1_0()); 
	    }
		lv_a2_2_0=rulerelational_expr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConjunctionRule());
	        }
       		add(
       			$current, 
       			"a2",
        		lv_a2_2_0, 
        		"relational_expr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRulerelational_expr
entryRulerelational_expr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRelational_exprRule()); }
	 iv_rulerelational_expr=rulerelational_expr 
	 { $current=$iv_rulerelational_expr.current; } 
	 EOF 
;

// Rule relational_expr
rulerelational_expr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getRelational_exprAccess().getA1AdditionParserRuleCall_0_0()); 
	    }
		lv_a1_0_0=ruleaddition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelational_exprRule());
	        }
       		set(
       			$current, 
       			"a1",
        		lv_a1_0_0, 
        		"addition");
	        afterParserOrEnumRuleCall();
	    }

)
)(
    { 
        newCompositeNode(grammarAccess.getRelational_exprAccess().getComparison_operatorParserRuleCall_1_0()); 
    }
rulecomparison_operator
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRelational_exprAccess().getA2AdditionParserRuleCall_1_1_0()); 
	    }
		lv_a2_2_0=ruleaddition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelational_exprRule());
	        }
       		set(
       			$current, 
       			"a2",
        		lv_a2_2_0, 
        		"addition");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleaddition
entryRuleaddition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAdditionRule()); }
	 iv_ruleaddition=ruleaddition 
	 { $current=$iv_ruleaddition.current; } 
	 EOF 
;

// Rule addition
ruleaddition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAdditionAccess().getA1MultiplicationParserRuleCall_0_0()); 
	    }
		lv_a1_0_0=rulemultiplication		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAdditionRule());
	        }
       		set(
       			$current, 
       			"a1",
        		lv_a1_0_0, 
        		"multiplication");
	        afterParserOrEnumRuleCall();
	    }

)
)(
    { 
        newCompositeNode(grammarAccess.getAdditionAccess().getPlus_or_minusParserRuleCall_1_0()); 
    }
ruleplus_or_minus
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAdditionAccess().getA2MultiplicationParserRuleCall_1_1_0()); 
	    }
		lv_a2_2_0=rulemultiplication		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAdditionRule());
	        }
       		add(
       			$current, 
       			"a2",
        		lv_a2_2_0, 
        		"multiplication");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRulemultiplication
entryRulemultiplication returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMultiplicationRule()); }
	 iv_rulemultiplication=rulemultiplication 
	 { $current=$iv_rulemultiplication.current; } 
	 EOF 
;

// Rule multiplication
rulemultiplication returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getMultiplicationAccess().getA1Sign_exprParserRuleCall_0_0()); 
	    }
		lv_a1_0_0=rulesign_expr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiplicationRule());
	        }
       		set(
       			$current, 
       			"a1",
        		lv_a1_0_0, 
        		"sign_expr");
	        afterParserOrEnumRuleCall();
	    }

)
)(
    { 
        newCompositeNode(grammarAccess.getMultiplicationAccess().getMult_opParserRuleCall_1_0()); 
    }
rulemult_op
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMultiplicationAccess().getA2Sign_exprParserRuleCall_1_1_0()); 
	    }
		lv_a2_2_0=rulesign_expr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMultiplicationRule());
	        }
       		add(
       			$current, 
       			"a2",
        		lv_a2_2_0, 
        		"sign_expr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRulesign_expr
entryRulesign_expr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSign_exprRule()); }
	 iv_rulesign_expr=rulesign_expr 
	 { $current=$iv_rulesign_expr.current; } 
	 EOF 
;

// Rule sign_expr
rulesign_expr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getSign_exprAccess().getTermParserRuleCall()); 
    }
    this_term_0=ruleterm
    { 
        $current = $this_term_0.current; 
        afterParserOrEnumRuleCall();
    }

;







// Entry rule entryRuleterm
entryRuleterm returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTermRule()); }
	 iv_ruleterm=ruleterm 
	 { $current=$iv_ruleterm.current; } 
	 EOF 
;

// Rule term
ruleterm returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getTermAccess().getA1RvalParserRuleCall_0_0()); 
	    }
		lv_a1_0_0=rulerval		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTermRule());
	        }
       		set(
       			$current, 
       			"a1",
        		lv_a1_0_0, 
        		"rval");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(this_TOK_LPAREN_1=RULE_TOK_LPAREN
    { 
    newLeafNode(this_TOK_LPAREN_1, grammarAccess.getTermAccess().getTOK_LPARENTerminalRuleCall_1_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTermAccess().getA2ExprParserRuleCall_1_1_0()); 
	    }
		lv_a2_2_0=ruleexpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTermRule());
	        }
       		set(
       			$current, 
       			"a2",
        		lv_a2_2_0, 
        		"expr");
	        afterParserOrEnumRuleCall();
	    }

)
)this_TOK_RPAREN_3=RULE_TOK_RPAREN
    { 
    newLeafNode(this_TOK_RPAREN_3, grammarAccess.getTermAccess().getTOK_RPARENTerminalRuleCall_1_2()); 
    }
))
;











// Entry rule entryRuleinstance_start_segment
entryRuleinstance_start_segment returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInstance_start_segmentRule()); }
	 iv_ruleinstance_start_segment=ruleinstance_start_segment 
	 { $current=$iv_ruleinstance_start_segment.current; } 
	 EOF 
;

// Rule instance_start_segment
ruleinstance_start_segment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getInstance_start_segmentAccess().getRoot_element_labelParserRuleCall_0()); 
    }
ruleroot_element_label
    { 
        afterParserOrEnumRuleCall();
    }
(
    { 
        newCompositeNode(grammarAccess.getInstance_start_segmentAccess().getArray_refsParserRuleCall_1()); 
    }
    this_array_refs_1=rulearray_refs
    { 
        $current = $this_array_refs_1.current; 
        afterParserOrEnumRuleCall();
    }
)?)
;













// Entry rule entryRulearray_refs
entryRulearray_refs returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArray_refsRule()); }
	 iv_rulearray_refs=rulearray_refs 
	 { $current=$iv_rulearray_refs.current; } 
	 EOF 
;

// Rule array_refs
rulearray_refs returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(this_TOK_LSQBR_0=RULE_TOK_LSQBR
    { 
    newLeafNode(this_TOK_LSQBR_0, grammarAccess.getArray_refsAccess().getTOK_LSQBRTerminalRuleCall_0()); 
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArray_refsAccess().getA1ExprParserRuleCall_1_0()); 
	    }
		lv_a1_1_0=ruleexpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArray_refsRule());
	        }
       		add(
       			$current, 
       			"a1",
        		lv_a1_1_0, 
        		"expr");
	        afterParserOrEnumRuleCall();
	    }

)
)this_TOK_RSQBR_2=RULE_TOK_RSQBR
    { 
    newLeafNode(this_TOK_RSQBR_2, grammarAccess.getArray_refsAccess().getTOK_RSQBRTerminalRuleCall_2()); 
    }
)+
;





// Entry rule entryRulerval
entryRulerval returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getRvalRule()); } 
	 iv_rulerval=rulerval 
	 { $current=$iv_rulerval.current.getText(); }  
	 EOF 
;

// Rule rval
rulerval returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getRvalAccess().getConstant_valueParserRuleCall()); 
    }
    this_constant_value_0=ruleconstant_value    {
		$current.merge(this_constant_value_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    ;





// Entry rule entryRuleconstant_value
entryRuleconstant_value returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstant_valueRule()); } 
	 iv_ruleconstant_value=ruleconstant_value 
	 { $current=$iv_ruleconstant_value.current.getText(); }  
	 EOF 
;

// Rule constant_value
ruleconstant_value returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getConstant_valueAccess().getTOK_NUMBERParserRuleCall_0()); 
    }
    this_TOK_NUMBER_0=ruleTOK_NUMBER    {
		$current.merge(this_TOK_NUMBER_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |    this_TOK_STRING_1=RULE_TOK_STRING    {
		$current.merge(this_TOK_STRING_1);
    }

    { 
    newLeafNode(this_TOK_STRING_1, grammarAccess.getConstant_valueAccess().getTOK_STRINGTerminalRuleCall_1()); 
    }

    |
	kw='true' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getConstant_valueAccess().getTrueKeyword_2()); 
    }

    |
	kw='false' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getConstant_valueAccess().getFalseKeyword_3()); 
    }
)
    ;





// Entry rule entryRulecomparison_operator
entryRulecomparison_operator returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getComparison_operatorRule()); } 
	 iv_rulecomparison_operator=rulecomparison_operator 
	 { $current=$iv_rulecomparison_operator.current.getText(); }  
	 EOF 
;

// Rule comparison_operator
rulecomparison_operator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='==' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getComparison_operatorAccess().getEqualsSignEqualsSignKeyword_0()); 
    }

    |    this_TOK_NOTEQUAL_1=RULE_TOK_NOTEQUAL    {
		$current.merge(this_TOK_NOTEQUAL_1);
    }

    { 
    newLeafNode(this_TOK_NOTEQUAL_1, grammarAccess.getComparison_operatorAccess().getTOK_NOTEQUALTerminalRuleCall_1()); 
    }

    |    this_TOK_LESSTHAN_2=RULE_TOK_LESSTHAN    {
		$current.merge(this_TOK_LESSTHAN_2);
    }

    { 
    newLeafNode(this_TOK_LESSTHAN_2, grammarAccess.getComparison_operatorAccess().getTOK_LESSTHANTerminalRuleCall_2()); 
    }

    |    this_TOK_LE_3=RULE_TOK_LE    {
		$current.merge(this_TOK_LE_3);
    }

    { 
    newLeafNode(this_TOK_LE_3, grammarAccess.getComparison_operatorAccess().getTOK_LETerminalRuleCall_3()); 
    }

    |    this_TOK_GT_4=RULE_TOK_GT    {
		$current.merge(this_TOK_GT_4);
    }

    { 
    newLeafNode(this_TOK_GT_4, grammarAccess.getComparison_operatorAccess().getTOK_GTTerminalRuleCall_4()); 
    }

    |    this_TOK_GE_5=RULE_TOK_GE    {
		$current.merge(this_TOK_GE_5);
    }

    { 
    newLeafNode(this_TOK_GE_5, grammarAccess.getComparison_operatorAccess().getTOK_GETerminalRuleCall_5()); 
    }
)
    ;





// Entry rule entryRuleplus_or_minus
entryRuleplus_or_minus returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getPlus_or_minusRule()); } 
	 iv_ruleplus_or_minus=ruleplus_or_minus 
	 { $current=$iv_ruleplus_or_minus.current.getText(); }  
	 EOF 
;

// Rule plus_or_minus
ruleplus_or_minus returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_TOK_PLUS_0=RULE_TOK_PLUS    {
		$current.merge(this_TOK_PLUS_0);
    }

    { 
    newLeafNode(this_TOK_PLUS_0, grammarAccess.getPlus_or_minusAccess().getTOK_PLUSTerminalRuleCall_0()); 
    }

    |    this_TOK_MINUS_1=RULE_TOK_MINUS    {
		$current.merge(this_TOK_MINUS_1);
    }

    { 
    newLeafNode(this_TOK_MINUS_1, grammarAccess.getPlus_or_minusAccess().getTOK_MINUSTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRulemult_op
entryRulemult_op returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getMult_opRule()); } 
	 iv_rulemult_op=rulemult_op 
	 { $current=$iv_rulemult_op.current.getText(); }  
	 EOF 
;

// Rule mult_op
rulemult_op returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_TOK_TIMES_0=RULE_TOK_TIMES    {
		$current.merge(this_TOK_TIMES_0);
    }

    { 
    newLeafNode(this_TOK_TIMES_0, grammarAccess.getMult_opAccess().getTOK_TIMESTerminalRuleCall_0()); 
    }

    |    this_TOK_DIV_1=RULE_TOK_DIV    {
		$current.merge(this_TOK_DIV_1);
    }

    { 
    newLeafNode(this_TOK_DIV_1, grammarAccess.getMult_opAccess().getTOK_DIVTerminalRuleCall_1()); 
    }
)
    ;







// Entry rule entryRuleTOK_NUMBER
entryRuleTOK_NUMBER returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTOK_NUMBERRule()); } 
	 iv_ruleTOK_NUMBER=ruleTOK_NUMBER 
	 { $current=$iv_ruleTOK_NUMBER.current.getText(); }  
	 EOF 
;

// Rule TOK_NUMBER
ruleTOK_NUMBER returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    newLeafNode(this_INT_0, grammarAccess.getTOK_NUMBERAccess().getINTTerminalRuleCall()); 
    }

    ;





RULE_TOK_COLON : ':';

RULE_TOK_DOUBLECOLON : '::';

RULE_TOK_COMMA : ',';

RULE_TOK_DIV : '/';

RULE_TOK_DOT : '.';

RULE_TOK_EQUAL : '=';

RULE_TOK_GE : '>=';

RULE_TOK_GT : '>';

RULE_TOK_LE : '<=';

RULE_TOK_LESSTHAN : '<';

RULE_TOK_LPAREN : '(';

RULE_TOK_LSQBR : '[';

RULE_TOK_MINUS : '-';

RULE_TOK_NOTEQUAL : '!=';

RULE_TOK_PLUS : '+';

RULE_TOK_QMARK : '"';

RULE_TOK_RPAREN : ')';

RULE_TOK_RSQBR : ']';

RULE_TOK_STRING : '"' ('a'..'z')* '"';

RULE_TOK_TIMES : '*';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


