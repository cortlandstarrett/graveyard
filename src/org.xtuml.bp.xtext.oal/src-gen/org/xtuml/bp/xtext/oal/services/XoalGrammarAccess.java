/*
* generated by Xtext
*/

package org.xtuml.bp.xtext.oal.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class XoalGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class CodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Code");
		private final RuleCall cBlockParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Code:
		//	block;
		public ParserRule getRule() { return rule; }

		//block
		public RuleCall getBlockParserRuleCall() { return cBlockParserRuleCall; }
	}

	public class BlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "block");
		private final Assignment cStatementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cStatementsStatementParserRuleCall_0 = (RuleCall)cStatementsAssignment.eContents().get(0);
		
		//block:
		//	statements+=statement*;
		public ParserRule getRule() { return rule; }

		//statements+=statement*
		public Assignment getStatementsAssignment() { return cStatementsAssignment; }

		//statement
		public RuleCall getStatementsStatementParserRuleCall_0() { return cStatementsStatementParserRuleCall_0; }
	}

	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final RuleCall cImplicit_ib_transform_statementParserRuleCall_0_0_0 = (RuleCall)cGroup_0_0.eContents().get(0);
		private final RuleCall cFunction_statementParserRuleCall_0_0_1 = (RuleCall)cGroup_0_0.eContents().get(1);
		private final RuleCall cImplicit_assignment_statementParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cImplicit_invocation_statementParserRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final RuleCall cAssignment_statementParserRuleCall_0_3 = (RuleCall)cAlternatives_0.eContents().get(3);
		private final RuleCall cControl_statementParserRuleCall_0_4 = (RuleCall)cAlternatives_0.eContents().get(4);
		private final RuleCall cBreak_statementParserRuleCall_0_5 = (RuleCall)cAlternatives_0.eContents().get(5);
		private final RuleCall cBridge_statementParserRuleCall_0_6 = (RuleCall)cAlternatives_0.eContents().get(6);
		private final RuleCall cSend_statementParserRuleCall_0_7 = (RuleCall)cAlternatives_0.eContents().get(7);
		private final RuleCall cContinue_statementParserRuleCall_0_8 = (RuleCall)cAlternatives_0.eContents().get(8);
		private final RuleCall cCreate_object_statementParserRuleCall_0_9 = (RuleCall)cAlternatives_0.eContents().get(9);
		private final RuleCall cCreate_event_statementParserRuleCall_0_10 = (RuleCall)cAlternatives_0.eContents().get(10);
		private final RuleCall cDelete_statementParserRuleCall_0_11 = (RuleCall)cAlternatives_0.eContents().get(11);
		private final RuleCall cFor_statementParserRuleCall_0_12 = (RuleCall)cAlternatives_0.eContents().get(12);
		private final RuleCall cGenerate_statementParserRuleCall_0_13 = (RuleCall)cAlternatives_0.eContents().get(13);
		private final RuleCall cIf_statementParserRuleCall_0_14 = (RuleCall)cAlternatives_0.eContents().get(14);
		private final RuleCall cRelate_statementParserRuleCall_0_15 = (RuleCall)cAlternatives_0.eContents().get(15);
		private final RuleCall cReturn_statementParserRuleCall_0_16 = (RuleCall)cAlternatives_0.eContents().get(16);
		private final RuleCall cSelect_statementParserRuleCall_0_17 = (RuleCall)cAlternatives_0.eContents().get(17);
		private final RuleCall cTransform_statementParserRuleCall_0_18 = (RuleCall)cAlternatives_0.eContents().get(18);
		private final RuleCall cWhile_statementParserRuleCall_0_19 = (RuleCall)cAlternatives_0.eContents().get(19);
		private final RuleCall cUnrelate_statementParserRuleCall_0_20 = (RuleCall)cAlternatives_0.eContents().get(20);
		private final RuleCall cDebug_statementParserRuleCall_0_21 = (RuleCall)cAlternatives_0.eContents().get(21);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//statement: //  (implicit_ib_transform_statement )=>
		//	(implicit_ib_transform_statement //|
		//	//  (function_statement )=>
		//	function_statement //| empty_statement
		//	| implicit_assignment_statement | implicit_invocation_statement | assignment_statement | control_statement |
		//	break_statement | bridge_statement | send_statement | continue_statement | create_object_statement |
		//	create_event_statement | delete_statement | for_statement | generate_statement | if_statement | relate_statement |
		//	return_statement | select_statement | transform_statement | while_statement | unrelate_statement | debug_statement)
		//	";";
		public ParserRule getRule() { return rule; }

		////  (implicit_ib_transform_statement )=>
		//(implicit_ib_transform_statement //|
		////  (function_statement )=>
		//function_statement //| empty_statement
		//| implicit_assignment_statement | implicit_invocation_statement | assignment_statement | control_statement |
		//break_statement | bridge_statement | send_statement | continue_statement | create_object_statement |
		//create_event_statement | delete_statement | for_statement | generate_statement | if_statement | relate_statement |
		//return_statement | select_statement | transform_statement | while_statement | unrelate_statement | debug_statement) ";"
		public Group getGroup() { return cGroup; }

		////  (implicit_ib_transform_statement )=>
		//implicit_ib_transform_statement //|
		////  (function_statement )=>
		//function_statement //| empty_statement
		//| implicit_assignment_statement | implicit_invocation_statement | assignment_statement | control_statement |
		//break_statement | bridge_statement | send_statement | continue_statement | create_object_statement |
		//create_event_statement | delete_statement | for_statement | generate_statement | if_statement | relate_statement |
		//return_statement | select_statement | transform_statement | while_statement | unrelate_statement | debug_statement
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		////  (implicit_ib_transform_statement )=>
		//implicit_ib_transform_statement //|
		////  (function_statement )=>
		//function_statement
		public Group getGroup_0_0() { return cGroup_0_0; }

		////  (implicit_ib_transform_statement )=>
		//implicit_ib_transform_statement
		public RuleCall getImplicit_ib_transform_statementParserRuleCall_0_0_0() { return cImplicit_ib_transform_statementParserRuleCall_0_0_0; }

		////|
		////  (function_statement )=>
		//function_statement
		public RuleCall getFunction_statementParserRuleCall_0_0_1() { return cFunction_statementParserRuleCall_0_0_1; }

		//implicit_assignment_statement
		public RuleCall getImplicit_assignment_statementParserRuleCall_0_1() { return cImplicit_assignment_statementParserRuleCall_0_1; }

		//implicit_invocation_statement
		public RuleCall getImplicit_invocation_statementParserRuleCall_0_2() { return cImplicit_invocation_statementParserRuleCall_0_2; }

		//assignment_statement
		public RuleCall getAssignment_statementParserRuleCall_0_3() { return cAssignment_statementParserRuleCall_0_3; }

		//control_statement
		public RuleCall getControl_statementParserRuleCall_0_4() { return cControl_statementParserRuleCall_0_4; }

		//break_statement
		public RuleCall getBreak_statementParserRuleCall_0_5() { return cBreak_statementParserRuleCall_0_5; }

		//bridge_statement
		public RuleCall getBridge_statementParserRuleCall_0_6() { return cBridge_statementParserRuleCall_0_6; }

		//send_statement
		public RuleCall getSend_statementParserRuleCall_0_7() { return cSend_statementParserRuleCall_0_7; }

		//continue_statement
		public RuleCall getContinue_statementParserRuleCall_0_8() { return cContinue_statementParserRuleCall_0_8; }

		//create_object_statement
		public RuleCall getCreate_object_statementParserRuleCall_0_9() { return cCreate_object_statementParserRuleCall_0_9; }

		//create_event_statement
		public RuleCall getCreate_event_statementParserRuleCall_0_10() { return cCreate_event_statementParserRuleCall_0_10; }

		//delete_statement
		public RuleCall getDelete_statementParserRuleCall_0_11() { return cDelete_statementParserRuleCall_0_11; }

		//for_statement
		public RuleCall getFor_statementParserRuleCall_0_12() { return cFor_statementParserRuleCall_0_12; }

		//generate_statement
		public RuleCall getGenerate_statementParserRuleCall_0_13() { return cGenerate_statementParserRuleCall_0_13; }

		//if_statement
		public RuleCall getIf_statementParserRuleCall_0_14() { return cIf_statementParserRuleCall_0_14; }

		//relate_statement
		public RuleCall getRelate_statementParserRuleCall_0_15() { return cRelate_statementParserRuleCall_0_15; }

		//return_statement
		public RuleCall getReturn_statementParserRuleCall_0_16() { return cReturn_statementParserRuleCall_0_16; }

		//select_statement
		public RuleCall getSelect_statementParserRuleCall_0_17() { return cSelect_statementParserRuleCall_0_17; }

		//transform_statement
		public RuleCall getTransform_statementParserRuleCall_0_18() { return cTransform_statementParserRuleCall_0_18; }

		//while_statement
		public RuleCall getWhile_statementParserRuleCall_0_19() { return cWhile_statementParserRuleCall_0_19; }

		//unrelate_statement
		public RuleCall getUnrelate_statementParserRuleCall_0_20() { return cUnrelate_statementParserRuleCall_0_20; }

		//debug_statement
		public RuleCall getDebug_statementParserRuleCall_0_21() { return cDebug_statementParserRuleCall_0_21; }

		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}

	public class Assignment_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "assignment_statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAssignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cA1Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cA1Assignment_exprParserRuleCall_1_0 = (RuleCall)cA1Assignment_1.eContents().get(0);
		
		//assignment_statement:
		//	"assign" a1=assignment_expr;
		public ParserRule getRule() { return rule; }

		//"assign" a1=assignment_expr
		public Group getGroup() { return cGroup; }

		//"assign"
		public Keyword getAssignKeyword_0() { return cAssignKeyword_0; }

		//a1=assignment_expr
		public Assignment getA1Assignment_1() { return cA1Assignment_1; }

		//assignment_expr
		public RuleCall getA1Assignment_exprParserRuleCall_1_0() { return cA1Assignment_exprParserRuleCall_1_0; }
	}

	public class Break_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "break_statement");
		private final Assignment cA1Assignment = (Assignment)rule.eContents().get(1);
		private final Keyword cA1BreakKeyword_0 = (Keyword)cA1Assignment.eContents().get(0);
		
		//break_statement:
		//	a1="break";
		public ParserRule getRule() { return rule; }

		//a1="break"
		public Assignment getA1Assignment() { return cA1Assignment; }

		//"break"
		public Keyword getA1BreakKeyword_0() { return cA1BreakKeyword_0; }
	}

	public class Bridge_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "bridge_statement");
		private final Assignment cA1Assignment = (Assignment)rule.eContents().get(1);
		private final Keyword cA1BridgeKeyword_0 = (Keyword)cA1Assignment.eContents().get(0);
		
		////  (
		////    (
		////      ( member_access
		////      | param_data_access
		////      )
		////      TOK_EQUAL
		////      bridge_invocation
		////    )
		////|
		////    bridge_invocation
		////  )
		//bridge_statement:
		//	a1="bridge";
		public ParserRule getRule() { return rule; }

		//a1="bridge"
		public Assignment getA1Assignment() { return cA1Assignment; }

		//"bridge"
		public Keyword getA1BridgeKeyword_0() { return cA1BridgeKeyword_0; }
	}

	public class Send_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "send_statement");
		private final Assignment cA1Assignment = (Assignment)rule.eContents().get(1);
		private final Keyword cA1SendKeyword_0 = (Keyword)cA1Assignment.eContents().get(0);
		
		////  (
		////    (
		////      ( member_access
		////      | param_data_access
		////      )
		////      TOK_EQUAL
		////      message_invocation
		////    )
		////|
		////    message_invocation
		////  )
		//send_statement:
		//	a1="send";
		public ParserRule getRule() { return rule; }

		//a1="send"
		public Assignment getA1Assignment() { return cA1Assignment; }

		//"send"
		public Keyword getA1SendKeyword_0() { return cA1SendKeyword_0; }
	}

	public class Control_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "control_statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cA1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cA1ControlKeyword_0_0 = (Keyword)cA1Assignment_0.eContents().get(0);
		private final Keyword cStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//control_statement:
		//	a1="control" "stop";
		public ParserRule getRule() { return rule; }

		//a1="control" "stop"
		public Group getGroup() { return cGroup; }

		//a1="control"
		public Assignment getA1Assignment_0() { return cA1Assignment_0; }

		//"control"
		public Keyword getA1ControlKeyword_0_0() { return cA1ControlKeyword_0_0; }

		//"stop"
		public Keyword getStopKeyword_1() { return cStopKeyword_1; }
	}

	public class Continue_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "continue_statement");
		private final Assignment cA1Assignment = (Assignment)rule.eContents().get(1);
		private final Keyword cA1ContinueKeyword_0 = (Keyword)cA1Assignment.eContents().get(0);
		
		//continue_statement:
		//	a1="continue";
		public ParserRule getRule() { return rule; }

		//a1="continue"
		public Assignment getA1Assignment() { return cA1Assignment; }

		//"continue"
		public Keyword getA1ContinueKeyword_0() { return cA1ContinueKeyword_0; }
	}

	public class Create_event_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "create_event_statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCreateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEventKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cInstanceKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cA1Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cA1Local_variableParserRuleCall_3_0 = (RuleCall)cA1Assignment_3.eContents().get(0);
		private final Keyword cOfKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cA2Assignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cA2Event_specParserRuleCall_5_0 = (RuleCall)cA2Assignment_5.eContents().get(0);
		
		//create_event_statement:
		//	"create" "event" "instance" a1=local_variable "of" a2=event_spec;
		public ParserRule getRule() { return rule; }

		//"create" "event" "instance" a1=local_variable "of" a2=event_spec
		public Group getGroup() { return cGroup; }

		//"create"
		public Keyword getCreateKeyword_0() { return cCreateKeyword_0; }

		//"event"
		public Keyword getEventKeyword_1() { return cEventKeyword_1; }

		//"instance"
		public Keyword getInstanceKeyword_2() { return cInstanceKeyword_2; }

		//a1=local_variable
		public Assignment getA1Assignment_3() { return cA1Assignment_3; }

		//local_variable
		public RuleCall getA1Local_variableParserRuleCall_3_0() { return cA1Local_variableParserRuleCall_3_0; }

		//"of"
		public Keyword getOfKeyword_4() { return cOfKeyword_4; }

		//a2=event_spec
		public Assignment getA2Assignment_5() { return cA2Assignment_5; }

		//event_spec
		public RuleCall getA2Event_specParserRuleCall_5_0() { return cA2Event_specParserRuleCall_5_0; }
	}

	public class Create_object_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "create_object_statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCreateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cObjectKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cInstanceKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cA1Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cA1Local_variableParserRuleCall_3_0 = (RuleCall)cA1Assignment_3.eContents().get(0);
		private final Keyword cOfKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cA2Assignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cA2Object_keylettersParserRuleCall_5_0 = (RuleCall)cA2Assignment_5.eContents().get(0);
		
		//create_object_statement:
		//	"create" "object" "instance" //(
		//	//  (  local_variable "of" )=>
		//	a1=local_variable //)?
		//	"of" a2=object_keyletters;
		public ParserRule getRule() { return rule; }

		//"create" "object" "instance" //(
		////  (  local_variable "of" )=>
		//a1=local_variable //)?
		//"of" a2=object_keyletters
		public Group getGroup() { return cGroup; }

		//"create"
		public Keyword getCreateKeyword_0() { return cCreateKeyword_0; }

		//"object"
		public Keyword getObjectKeyword_1() { return cObjectKeyword_1; }

		//"instance"
		public Keyword getInstanceKeyword_2() { return cInstanceKeyword_2; }

		////(
		////  (  local_variable "of" )=>
		//a1=local_variable
		public Assignment getA1Assignment_3() { return cA1Assignment_3; }

		//local_variable
		public RuleCall getA1Local_variableParserRuleCall_3_0() { return cA1Local_variableParserRuleCall_3_0; }

		////)?
		//"of"
		public Keyword getOfKeyword_4() { return cOfKeyword_4; }

		//a2=object_keyletters
		public Assignment getA2Assignment_5() { return cA2Assignment_5; }

		//object_keyletters
		public RuleCall getA2Object_keylettersParserRuleCall_5_0() { return cA2Object_keylettersParserRuleCall_5_0; }
	}

	public class Debug_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "debug_statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword c_debugKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cDebug_operandParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//debug_statement:
		//	"_debug" debug_operand+;
		public ParserRule getRule() { return rule; }

		//"_debug" debug_operand+
		public Group getGroup() { return cGroup; }

		//"_debug"
		public Keyword get_debugKeyword_0() { return c_debugKeyword_0; }

		//debug_operand+
		public RuleCall getDebug_operandParserRuleCall_1() { return cDebug_operandParserRuleCall_1; }
	}

	public class Delete_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "delete_statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDeleteKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cObjectKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cInstanceKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cA1Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cA1Inst_ref_varParserRuleCall_3_0 = (RuleCall)cA1Assignment_3.eContents().get(0);
		
		//delete_statement:
		//	"delete" "object" "instance" a1=inst_ref_var;
		public ParserRule getRule() { return rule; }

		//"delete" "object" "instance" a1=inst_ref_var
		public Group getGroup() { return cGroup; }

		//"delete"
		public Keyword getDeleteKeyword_0() { return cDeleteKeyword_0; }

		//"object"
		public Keyword getObjectKeyword_1() { return cObjectKeyword_1; }

		//"instance"
		public Keyword getInstanceKeyword_2() { return cInstanceKeyword_2; }

		//a1=inst_ref_var
		public Assignment getA1Assignment_3() { return cA1Assignment_3; }

		//inst_ref_var
		public RuleCall getA1Inst_ref_varParserRuleCall_3_0() { return cA1Inst_ref_varParserRuleCall_3_0; }
	}

	public class For_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "for_statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEachKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cA1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cA1Local_variableParserRuleCall_2_0 = (RuleCall)cA1Assignment_2.eContents().get(0);
		private final Keyword cInKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cA2Assignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cA2Inst_ref_set_varParserRuleCall_4_0 = (RuleCall)cA2Assignment_4.eContents().get(0);
		private final Assignment cA3Assignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cA3BlockParserRuleCall_5_0 = (RuleCall)cA3Assignment_5.eContents().get(0);
		private final Keyword cEndKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cForKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		////empty_statement
		////  :
		////  ;
		//for_statement:
		//	"for" "each" a1=local_variable "in" a2=inst_ref_set_var a3=block "end" "for";
		public ParserRule getRule() { return rule; }

		//"for" "each" a1=local_variable "in" a2=inst_ref_set_var a3=block "end" "for"
		public Group getGroup() { return cGroup; }

		//"for"
		public Keyword getForKeyword_0() { return cForKeyword_0; }

		//"each"
		public Keyword getEachKeyword_1() { return cEachKeyword_1; }

		//a1=local_variable
		public Assignment getA1Assignment_2() { return cA1Assignment_2; }

		//local_variable
		public RuleCall getA1Local_variableParserRuleCall_2_0() { return cA1Local_variableParserRuleCall_2_0; }

		//"in"
		public Keyword getInKeyword_3() { return cInKeyword_3; }

		//a2=inst_ref_set_var
		public Assignment getA2Assignment_4() { return cA2Assignment_4; }

		//inst_ref_set_var
		public RuleCall getA2Inst_ref_set_varParserRuleCall_4_0() { return cA2Inst_ref_set_varParserRuleCall_4_0; }

		//a3=block
		public Assignment getA3Assignment_5() { return cA3Assignment_5; }

		//block
		public RuleCall getA3BlockParserRuleCall_5_0() { return cA3BlockParserRuleCall_5_0; }

		//"end"
		public Keyword getEndKeyword_6() { return cEndKeyword_6; }

		//"for"
		public Keyword getForKeyword_7() { return cForKeyword_7; }
	}

	public class Generate_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "generate_statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGenerateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cA1Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cA1Event_specParserRuleCall_1_0 = (RuleCall)cA1Assignment_1.eContents().get(0);
		
		//generate_statement:
		//	"generate" a1=event_spec //|
		//	//  member_access
		//;
		public ParserRule getRule() { return rule; }

		//"generate" a1=event_spec //|
		////  member_access
		public Group getGroup() { return cGroup; }

		//"generate"
		public Keyword getGenerateKeyword_0() { return cGenerateKeyword_0; }

		//a1=event_spec
		public Assignment getA1Assignment_1() { return cA1Assignment_1; }

		//event_spec
		public RuleCall getA1Event_specParserRuleCall_1_0() { return cA1Event_specParserRuleCall_1_0; }
	}

	public class If_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "if_statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cA1Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cA1ExprParserRuleCall_1_0 = (RuleCall)cA1Assignment_1.eContents().get(0);
		private final Assignment cA2Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cA2BlockParserRuleCall_2_0 = (RuleCall)cA2Assignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cElifKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cA3Assignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cA3ExprParserRuleCall_3_1_0 = (RuleCall)cA3Assignment_3_1.eContents().get(0);
		private final Assignment cA4Assignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cA4BlockParserRuleCall_3_2_0 = (RuleCall)cA4Assignment_3_2.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cElseKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cA5Assignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cA5BlockParserRuleCall_4_1_0 = (RuleCall)cA5Assignment_4_1.eContents().get(0);
		private final Keyword cEndKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cIfKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//if_statement:
		//	"if" a1=expr a2=block ("elif" a3+=expr a4+=block)? ("else" a5=block)? "end" "if";
		public ParserRule getRule() { return rule; }

		//"if" a1=expr a2=block ("elif" a3+=expr a4+=block)? ("else" a5=block)? "end" "if"
		public Group getGroup() { return cGroup; }

		//"if"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }

		//a1=expr
		public Assignment getA1Assignment_1() { return cA1Assignment_1; }

		//expr
		public RuleCall getA1ExprParserRuleCall_1_0() { return cA1ExprParserRuleCall_1_0; }

		//a2=block
		public Assignment getA2Assignment_2() { return cA2Assignment_2; }

		//block
		public RuleCall getA2BlockParserRuleCall_2_0() { return cA2BlockParserRuleCall_2_0; }

		//("elif" a3+=expr a4+=block)?
		public Group getGroup_3() { return cGroup_3; }

		//"elif"
		public Keyword getElifKeyword_3_0() { return cElifKeyword_3_0; }

		//a3+=expr
		public Assignment getA3Assignment_3_1() { return cA3Assignment_3_1; }

		//expr
		public RuleCall getA3ExprParserRuleCall_3_1_0() { return cA3ExprParserRuleCall_3_1_0; }

		//a4+=block
		public Assignment getA4Assignment_3_2() { return cA4Assignment_3_2; }

		//block
		public RuleCall getA4BlockParserRuleCall_3_2_0() { return cA4BlockParserRuleCall_3_2_0; }

		//("else" a5=block)?
		public Group getGroup_4() { return cGroup_4; }

		//"else"
		public Keyword getElseKeyword_4_0() { return cElseKeyword_4_0; }

		//a5=block
		public Assignment getA5Assignment_4_1() { return cA5Assignment_4_1; }

		//block
		public RuleCall getA5BlockParserRuleCall_4_1_0() { return cA5BlockParserRuleCall_4_1_0; }

		//"end"
		public Keyword getEndKeyword_5() { return cEndKeyword_5; }

		//"if"
		public Keyword getIfKeyword_6() { return cIfKeyword_6; }
	}

	public class Implicit_assignment_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "implicit_assignment_statement");
		private final Keyword cImplicit_assignment_statementKeyword = (Keyword)rule.eContents().get(1);
		
		//implicit_assignment_statement: //assignment_expr
		//	"implicit_assignment_statement";
		public ParserRule getRule() { return rule; }

		////assignment_expr
		//"implicit_assignment_statement"
		public Keyword getImplicit_assignment_statementKeyword() { return cImplicit_assignment_statementKeyword; }
	}

	public class Implicit_invocation_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "implicit_invocation_statement");
		private final Keyword cImplicit_invocation_statementKeyword = (Keyword)rule.eContents().get(1);
		
		//implicit_invocation_statement: //invocation
		//	"implicit_invocation_statement";
		public ParserRule getRule() { return rule; }

		////invocation
		//"implicit_invocation_statement"
		public Keyword getImplicit_invocation_statementKeyword() { return cImplicit_invocation_statementKeyword; }
	}

	public class Implicit_ib_transform_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "implicit_ib_transform_statement");
		private final Keyword cImplicit_ib_transform_statementKeyword = (Keyword)rule.eContents().get(1);
		
		//implicit_ib_transform_statement: //transform_ib_invocation
		//	"implicit_ib_transform_statement";
		public ParserRule getRule() { return rule; }

		////transform_ib_invocation
		//"implicit_ib_transform_statement"
		public Keyword getImplicit_ib_transform_statementKeyword() { return cImplicit_ib_transform_statementKeyword; }
	}

	public class Relate_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "relate_statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRelateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cA1Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cA1Inst_ref_varParserRuleCall_1_0 = (RuleCall)cA1Assignment_1.eContents().get(0);
		private final Keyword cToKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cA2Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cA2Inst_ref_varParserRuleCall_3_0 = (RuleCall)cA2Assignment_3.eContents().get(0);
		private final Keyword cAcrossKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cA3Assignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cA3RelationshipParserRuleCall_5_0 = (RuleCall)cA3Assignment_5.eContents().get(0);
		
		////  (
		////    TOK_DOT
		////    phrase
		////  )?
		////  (
		////    "using"
		////    assoc_obj_inst_ref_var
		////  )?
		//relate_statement:
		//	"relate" a1=inst_ref_var "to" a2=inst_ref_var "across" a3=relationship;
		public ParserRule getRule() { return rule; }

		//"relate" a1=inst_ref_var "to" a2=inst_ref_var "across" a3=relationship
		public Group getGroup() { return cGroup; }

		//"relate"
		public Keyword getRelateKeyword_0() { return cRelateKeyword_0; }

		//a1=inst_ref_var
		public Assignment getA1Assignment_1() { return cA1Assignment_1; }

		//inst_ref_var
		public RuleCall getA1Inst_ref_varParserRuleCall_1_0() { return cA1Inst_ref_varParserRuleCall_1_0; }

		//"to"
		public Keyword getToKeyword_2() { return cToKeyword_2; }

		//a2=inst_ref_var
		public Assignment getA2Assignment_3() { return cA2Assignment_3; }

		//inst_ref_var
		public RuleCall getA2Inst_ref_varParserRuleCall_3_0() { return cA2Inst_ref_varParserRuleCall_3_0; }

		//"across"
		public Keyword getAcrossKeyword_4() { return cAcrossKeyword_4; }

		//a3=relationship
		public Assignment getA3Assignment_5() { return cA3Assignment_5; }

		//relationship
		public RuleCall getA3RelationshipParserRuleCall_5_0() { return cA3RelationshipParserRuleCall_5_0; }
	}

	public class Return_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "return_statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cA1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cA1ReturnKeyword_0_0 = (Keyword)cA1Assignment_0.eContents().get(0);
		private final Assignment cA2Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cA2ExprParserRuleCall_1_0 = (RuleCall)cA2Assignment_1.eContents().get(0);
		
		//return_statement:
		//	a1="return" a2=expr?;
		public ParserRule getRule() { return rule; }

		//a1="return" a2=expr?
		public Group getGroup() { return cGroup; }

		//a1="return"
		public Assignment getA1Assignment_0() { return cA1Assignment_0; }

		//"return"
		public Keyword getA1ReturnKeyword_0_0() { return cA1ReturnKeyword_0_0; }

		//a2=expr?
		public Assignment getA2Assignment_1() { return cA2Assignment_1; }

		//expr
		public RuleCall getA2ExprParserRuleCall_1_0() { return cA2ExprParserRuleCall_1_0; }
	}

	public class Select_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "select_statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSelectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cOneKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final RuleCall cLocal_variableParserRuleCall_1_0_1 = (RuleCall)cGroup_1_0.eContents().get(1);
		private final Assignment cA1Assignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cA1Object_specParserRuleCall_1_0_2_0 = (RuleCall)cA1Assignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cAnyKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final RuleCall cLocal_variableParserRuleCall_1_1_1 = (RuleCall)cGroup_1_1.eContents().get(1);
		private final Assignment cA2Assignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cA2Object_specParserRuleCall_1_1_2_0 = (RuleCall)cA2Assignment_1_1_2.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Keyword cManyKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final RuleCall cLocal_variableParserRuleCall_1_2_1 = (RuleCall)cGroup_1_2.eContents().get(1);
		private final Assignment cA3Assignment_1_2_2 = (Assignment)cGroup_1_2.eContents().get(2);
		private final RuleCall cA3Object_specParserRuleCall_1_2_2_0 = (RuleCall)cA3Assignment_1_2_2.eContents().get(0);
		
		//select_statement:
		//	"select" ("one" local_variable a1=object_spec | "any" local_variable a2=object_spec | "many" local_variable
		//	a3=object_spec);
		public ParserRule getRule() { return rule; }

		//"select" ("one" local_variable a1=object_spec | "any" local_variable a2=object_spec | "many" local_variable
		//a3=object_spec)
		public Group getGroup() { return cGroup; }

		//"select"
		public Keyword getSelectKeyword_0() { return cSelectKeyword_0; }

		//"one" local_variable a1=object_spec | "any" local_variable a2=object_spec | "many" local_variable a3=object_spec
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"one" local_variable a1=object_spec
		public Group getGroup_1_0() { return cGroup_1_0; }

		//"one"
		public Keyword getOneKeyword_1_0_0() { return cOneKeyword_1_0_0; }

		//local_variable
		public RuleCall getLocal_variableParserRuleCall_1_0_1() { return cLocal_variableParserRuleCall_1_0_1; }

		//a1=object_spec
		public Assignment getA1Assignment_1_0_2() { return cA1Assignment_1_0_2; }

		//object_spec
		public RuleCall getA1Object_specParserRuleCall_1_0_2_0() { return cA1Object_specParserRuleCall_1_0_2_0; }

		//"any" local_variable a2=object_spec
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"any"
		public Keyword getAnyKeyword_1_1_0() { return cAnyKeyword_1_1_0; }

		//local_variable
		public RuleCall getLocal_variableParserRuleCall_1_1_1() { return cLocal_variableParserRuleCall_1_1_1; }

		//a2=object_spec
		public Assignment getA2Assignment_1_1_2() { return cA2Assignment_1_1_2; }

		//object_spec
		public RuleCall getA2Object_specParserRuleCall_1_1_2_0() { return cA2Object_specParserRuleCall_1_1_2_0; }

		//"many" local_variable a3=object_spec
		public Group getGroup_1_2() { return cGroup_1_2; }

		//"many"
		public Keyword getManyKeyword_1_2_0() { return cManyKeyword_1_2_0; }

		//local_variable
		public RuleCall getLocal_variableParserRuleCall_1_2_1() { return cLocal_variableParserRuleCall_1_2_1; }

		//a3=object_spec
		public Assignment getA3Assignment_1_2_2() { return cA3Assignment_1_2_2; }

		//object_spec
		public RuleCall getA3Object_specParserRuleCall_1_2_2_0() { return cA3Object_specParserRuleCall_1_2_2_0; }
	}

	public class Transform_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "transform_statement");
		private final Keyword cTransformKeyword = (Keyword)rule.eContents().get(1);
		
		////  (
		////    (
		////      ( member_access
		////      | param_data_access
		////      )
		////      TOK_EQUAL
		////      transform_invocation
		////    )
		////|
		////    transform_invocation
		////  )
		//transform_statement:
		//	"transform";
		public ParserRule getRule() { return rule; }

		//"transform"
		public Keyword getTransformKeyword() { return cTransformKeyword; }
	}

	public class Function_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "function_statement");
		private final Keyword cFunction_statementKeyword = (Keyword)rule.eContents().get(1);
		
		//function_statement: //TOK_DOUBLECOLON
		////function_invocation
		//	"function_statement";
		public ParserRule getRule() { return rule; }

		////TOK_DOUBLECOLON
		////function_invocation
		//"function_statement"
		public Keyword getFunction_statementKeyword() { return cFunction_statementKeyword; }
	}

	public class Unrelate_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "unrelate_statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUnrelateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cA1Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cA1Inst_ref_varParserRuleCall_1_0 = (RuleCall)cA1Assignment_1.eContents().get(0);
		private final Keyword cFromKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cA2Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cA2Inst_ref_varParserRuleCall_3_0 = (RuleCall)cA2Assignment_3.eContents().get(0);
		private final Keyword cAcrossKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cA3Assignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cA3RelationshipParserRuleCall_5_0 = (RuleCall)cA3Assignment_5.eContents().get(0);
		
		////  (
		////    TOK_DOT
		////    phrase
		////  )?
		////  (
		////    "using"
		////    assoc_obj_inst_ref_var
		////  )?
		//unrelate_statement:
		//	"unrelate" a1=inst_ref_var "from" a2=inst_ref_var "across" a3=relationship;
		public ParserRule getRule() { return rule; }

		//"unrelate" a1=inst_ref_var "from" a2=inst_ref_var "across" a3=relationship
		public Group getGroup() { return cGroup; }

		//"unrelate"
		public Keyword getUnrelateKeyword_0() { return cUnrelateKeyword_0; }

		//a1=inst_ref_var
		public Assignment getA1Assignment_1() { return cA1Assignment_1; }

		//inst_ref_var
		public RuleCall getA1Inst_ref_varParserRuleCall_1_0() { return cA1Inst_ref_varParserRuleCall_1_0; }

		//"from"
		public Keyword getFromKeyword_2() { return cFromKeyword_2; }

		//a2=inst_ref_var
		public Assignment getA2Assignment_3() { return cA2Assignment_3; }

		//inst_ref_var
		public RuleCall getA2Inst_ref_varParserRuleCall_3_0() { return cA2Inst_ref_varParserRuleCall_3_0; }

		//"across"
		public Keyword getAcrossKeyword_4() { return cAcrossKeyword_4; }

		//a3=relationship
		public Assignment getA3Assignment_5() { return cA3Assignment_5; }

		//relationship
		public RuleCall getA3RelationshipParserRuleCall_5_0() { return cA3RelationshipParserRuleCall_5_0; }
	}

	public class While_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "while_statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cA1Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cA1ExprParserRuleCall_1_0 = (RuleCall)cA1Assignment_1.eContents().get(0);
		private final Assignment cA2Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cA2BlockParserRuleCall_2_0 = (RuleCall)cA2Assignment_2.eContents().get(0);
		private final Keyword cEndKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cWhileKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//while_statement:
		//	"while" a1=expr a2=block "end" "while";
		public ParserRule getRule() { return rule; }

		//"while" a1=expr a2=block "end" "while"
		public Group getGroup() { return cGroup; }

		//"while"
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }

		//a1=expr
		public Assignment getA1Assignment_1() { return cA1Assignment_1; }

		//expr
		public RuleCall getA1ExprParserRuleCall_1_0() { return cA1ExprParserRuleCall_1_0; }

		//a2=block
		public Assignment getA2Assignment_2() { return cA2Assignment_2; }

		//block
		public RuleCall getA2BlockParserRuleCall_2_0() { return cA2BlockParserRuleCall_2_0; }

		//"end"
		public Keyword getEndKeyword_3() { return cEndKeyword_3; }

		//"while"
		public Keyword getWhileKeyword_4() { return cWhileKeyword_4; }
	}

	public class Assignment_exprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "assignment_expr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cTOK_EQUALTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cA1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cA1ExprParserRuleCall_2_0 = (RuleCall)cA1Assignment_2.eContents().get(0);
		
		////|
		////  ( "param" TOK_DOT )=>
		////  param_data_access
		////  TOK_EQUAL
		////  expr
		//assignment_expr: //member_access
		//	ID TOK_EQUAL a1=expr;
		public ParserRule getRule() { return rule; }

		////member_access
		//ID TOK_EQUAL a1=expr
		public Group getGroup() { return cGroup; }

		////member_access
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//TOK_EQUAL
		public RuleCall getTOK_EQUALTerminalRuleCall_1() { return cTOK_EQUALTerminalRuleCall_1; }

		//a1=expr
		public Assignment getA1Assignment_2() { return cA1Assignment_2; }

		//expr
		public RuleCall getA1ExprParserRuleCall_2_0() { return cA1ExprParserRuleCall_2_0; }
	}

	public class Bridge_invocationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "bridge_invocation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cA1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cA1Ee_keylettersParserRuleCall_0_0 = (RuleCall)cA1Assignment_0.eContents().get(0);
		private final RuleCall cTOK_DOUBLECOLONTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cTOK_LPARENTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cTOK_RPARENTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//bridge_invocation:
		//	a1=ee_keyletters TOK_DOUBLECOLON //  bridge_function
		//	TOK_LPAREN //  (
		//	//    invocation_parameters
		//	//  )?
		//	TOK_RPAREN;
		public ParserRule getRule() { return rule; }

		//a1=ee_keyletters TOK_DOUBLECOLON //  bridge_function
		//TOK_LPAREN //  (
		////    invocation_parameters
		////  )?
		//TOK_RPAREN
		public Group getGroup() { return cGroup; }

		//a1=ee_keyletters
		public Assignment getA1Assignment_0() { return cA1Assignment_0; }

		//ee_keyletters
		public RuleCall getA1Ee_keylettersParserRuleCall_0_0() { return cA1Ee_keylettersParserRuleCall_0_0; }

		//TOK_DOUBLECOLON
		public RuleCall getTOK_DOUBLECOLONTerminalRuleCall_1() { return cTOK_DOUBLECOLONTerminalRuleCall_1; }

		////  bridge_function
		//TOK_LPAREN
		public RuleCall getTOK_LPARENTerminalRuleCall_2() { return cTOK_LPARENTerminalRuleCall_2; }

		////  (
		////    invocation_parameters
		////  )?
		//TOK_RPAREN
		public RuleCall getTOK_RPARENTerminalRuleCall_3() { return cTOK_RPARENTerminalRuleCall_3; }
	}

	public class Message_invocationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "message_invocation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTOK_DOUBLECOLONTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cTOK_LPARENTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cTOK_RPARENTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		////  (
		////    "to"
		////    (
		////      rval
		////    )
		////  )?
		//message_invocation: //  interface_or_port_name
		//	TOK_DOUBLECOLON //  message_name
		//	TOK_LPAREN //  (
		//	//    invocation_parameters
		//	//  )?
		//	TOK_RPAREN;
		public ParserRule getRule() { return rule; }

		////  interface_or_port_name
		//TOK_DOUBLECOLON //  message_name
		//TOK_LPAREN //  (
		////    invocation_parameters
		////  )?
		//TOK_RPAREN
		public Group getGroup() { return cGroup; }

		////  interface_or_port_name
		//TOK_DOUBLECOLON
		public RuleCall getTOK_DOUBLECOLONTerminalRuleCall_0() { return cTOK_DOUBLECOLONTerminalRuleCall_0; }

		////  message_name
		//TOK_LPAREN
		public RuleCall getTOK_LPARENTerminalRuleCall_1() { return cTOK_LPARENTerminalRuleCall_1; }

		////  (
		////    invocation_parameters
		////  )?
		//TOK_RPAREN
		public RuleCall getTOK_RPARENTerminalRuleCall_2() { return cTOK_RPARENTerminalRuleCall_2; }
	}

	public class InvocationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "invocation");
		private final Keyword cInvocationRuleKeyword = (Keyword)rule.eContents().get(1);
		
		////  TOK_DOUBLECOLON
		////  invocation_function
		////  TOK_LPAREN
		////  (
		////    invocation_parameters
		////  )?
		////  TOK_RPAREN
		//invocation: //identifier
		//	"invocation rule";
		public ParserRule getRule() { return rule; }

		////identifier
		//"invocation rule"
		public Keyword getInvocationRuleKeyword() { return cInvocationRuleKeyword; }
	}

	public class Bridge_exprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "bridge_expr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBridgeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cA1Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cA1Bridge_invocationParserRuleCall_1_0 = (RuleCall)cA1Assignment_1.eContents().get(0);
		
		//bridge_expr:
		//	"bridge" a1=bridge_invocation;
		public ParserRule getRule() { return rule; }

		//"bridge" a1=bridge_invocation
		public Group getGroup() { return cGroup; }

		//"bridge"
		public Keyword getBridgeKeyword_0() { return cBridgeKeyword_0; }

		//a1=bridge_invocation
		public Assignment getA1Assignment_1() { return cA1Assignment_1; }

		//bridge_invocation
		public RuleCall getA1Bridge_invocationParserRuleCall_1_0() { return cA1Bridge_invocationParserRuleCall_1_0; }
	}

	public class Invocation_exprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "invocation_expr");
		private final RuleCall cInvocationParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//invocation_expr:
		//	invocation;
		public ParserRule getRule() { return rule; }

		//invocation
		public RuleCall getInvocationParserRuleCall() { return cInvocationParserRuleCall; }
	}

	public class Enumerator_accessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "enumerator_access");
		private final Keyword cEnumerator_accessKeyword = (Keyword)rule.eContents().get(1);
		
		////  TOK_DOUBLECOLON
		////  enumerator
		//enumerator_access: //enum_data_type
		//	"enumerator_access";
		public ParserRule getRule() { return rule; }

		////enum_data_type
		//"enumerator_access"
		public Keyword getEnumerator_accessKeyword() { return cEnumerator_accessKeyword; }
	}

	public class Debug_operandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "debug_operand");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword c_traceKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Alternatives cAlternatives_0_1 = (Alternatives)cGroup_0.eContents().get(1);
		private final Keyword c_offKeyword_0_1_0 = (Keyword)cAlternatives_0_1.eContents().get(0);
		private final Keyword c_onKeyword_0_1_1 = (Keyword)cAlternatives_0_1.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword c_dumpKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Keyword c_offKeyword_1_1_0 = (Keyword)cAlternatives_1_1.eContents().get(0);
		private final Keyword c_onKeyword_1_1_1 = (Keyword)cAlternatives_1_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword c_sorKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Alternatives cAlternatives_2_1 = (Alternatives)cGroup_2.eContents().get(1);
		private final Keyword c_offKeyword_2_1_0 = (Keyword)cAlternatives_2_1.eContents().get(0);
		private final Keyword c_onKeyword_2_1_1 = (Keyword)cAlternatives_2_1.eContents().get(1);
		private final Keyword c_onKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword c_offKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword c_statKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//debug_operand:
		//	"_trace" ("_off" | "_on") | "_dump" ("_off" | "_on") | "_sor" ("_off" | "_on") | "_on" | "_off" | "_stat";
		public ParserRule getRule() { return rule; }

		//"_trace" ("_off" | "_on") | "_dump" ("_off" | "_on") | "_sor" ("_off" | "_on") | "_on" | "_off" | "_stat"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"_trace" ("_off" | "_on")
		public Group getGroup_0() { return cGroup_0; }

		//"_trace"
		public Keyword get_traceKeyword_0_0() { return c_traceKeyword_0_0; }

		//"_off" | "_on"
		public Alternatives getAlternatives_0_1() { return cAlternatives_0_1; }

		//"_off"
		public Keyword get_offKeyword_0_1_0() { return c_offKeyword_0_1_0; }

		//"_on"
		public Keyword get_onKeyword_0_1_1() { return c_onKeyword_0_1_1; }

		//"_dump" ("_off" | "_on")
		public Group getGroup_1() { return cGroup_1; }

		//"_dump"
		public Keyword get_dumpKeyword_1_0() { return c_dumpKeyword_1_0; }

		//"_off" | "_on"
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }

		//"_off"
		public Keyword get_offKeyword_1_1_0() { return c_offKeyword_1_1_0; }

		//"_on"
		public Keyword get_onKeyword_1_1_1() { return c_onKeyword_1_1_1; }

		//"_sor" ("_off" | "_on")
		public Group getGroup_2() { return cGroup_2; }

		//"_sor"
		public Keyword get_sorKeyword_2_0() { return c_sorKeyword_2_0; }

		//"_off" | "_on"
		public Alternatives getAlternatives_2_1() { return cAlternatives_2_1; }

		//"_off"
		public Keyword get_offKeyword_2_1_0() { return c_offKeyword_2_1_0; }

		//"_on"
		public Keyword get_onKeyword_2_1_1() { return c_onKeyword_2_1_1; }

		//"_on"
		public Keyword get_onKeyword_3() { return c_onKeyword_3; }

		//"_off"
		public Keyword get_offKeyword_4() { return c_offKeyword_4; }

		//"_stat"
		public Keyword get_statKeyword_5() { return c_statKeyword_5; }
	}

	public class Event_specElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "event_spec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEvent_labelParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cToKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cInst_ref_var_or_ee_keylettersParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		////    )
		////  )
		//event_spec:
		//	event_label //  (
		//	//    TOK_TIMES
		//	//  )?
		//	//  (
		//	//    TOK_COLON
		//	//    event_meaning
		//	//  )?
		//	//  (
		//	//    TOK_LPAREN
		//	//    (
		//	//      supp_data
		//	//    )?
		//	//    TOK_RPAREN
		//	//  )?
		//	"to" //  (
		//	//    (
		//	//      ( object_keyletters (
		//	//        "assigner" | "class" ) )=>
		//	//      object_keyletters
		//	//      (
		//	//        "assigner"
		//	//      |
		//	//        "class"
		//	//      )
		//	//    |
		//	//      object_keyletters
		//	//      "creator"
		//	//    )
		//	//  |
		//	//    (
		//	inst_ref_var_or_ee_keyletters;
		public ParserRule getRule() { return rule; }

		//event_label //  (
		////    TOK_TIMES
		////  )?
		////  (
		////    TOK_COLON
		////    event_meaning
		////  )?
		////  (
		////    TOK_LPAREN
		////    (
		////      supp_data
		////    )?
		////    TOK_RPAREN
		////  )?
		//"to" //  (
		////    (
		////      ( object_keyletters (
		////        "assigner" | "class" ) )=>
		////      object_keyletters
		////      (
		////        "assigner"
		////      |
		////        "class"
		////      )
		////    |
		////      object_keyletters
		////      "creator"
		////    )
		////  |
		////    (
		//inst_ref_var_or_ee_keyletters
		public Group getGroup() { return cGroup; }

		//event_label
		public RuleCall getEvent_labelParserRuleCall_0() { return cEvent_labelParserRuleCall_0; }

		////  (
		////    TOK_TIMES
		////  )?
		////  (
		////    TOK_COLON
		////    event_meaning
		////  )?
		////  (
		////    TOK_LPAREN
		////    (
		////      supp_data
		////    )?
		////    TOK_RPAREN
		////  )?
		//"to"
		public Keyword getToKeyword_1() { return cToKeyword_1; }

		////  (
		////    (
		////      ( object_keyletters (
		////        "assigner" | "class" ) )=>
		////      object_keyletters
		////      (
		////        "assigner"
		////      |
		////        "class"
		////      )
		////    |
		////      object_keyletters
		////      "creator"
		////    )
		////  |
		////    (
		//inst_ref_var_or_ee_keyletters
		public RuleCall getInst_ref_var_or_ee_keylettersParserRuleCall_2() { return cInst_ref_var_or_ee_keylettersParserRuleCall_2; }
	}

	public class Invocation_parametersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "invocation_parameters");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cData_itemParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cTOK_COLONTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		////  expr
		////  (
		////    TOK_COMMA
		////    data_item
		////    TOK_COLON
		////    expr
		////  )*
		//invocation_parameters:
		//	data_item TOK_COLON;
		public ParserRule getRule() { return rule; }

		//data_item TOK_COLON
		public Group getGroup() { return cGroup; }

		//data_item
		public RuleCall getData_itemParserRuleCall_0() { return cData_itemParserRuleCall_0; }

		//TOK_COLON
		public RuleCall getTOK_COLONTerminalRuleCall_1() { return cTOK_COLONTerminalRuleCall_1; }
	}

	public class Inst_ref_var_or_ee_keylettersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "inst_ref_var_or_ee_keyletters");
		private final RuleCall cLocal_variableParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		////  |
		////    TOK_GENERAL_NAME
		//inst_ref_var_or_ee_keyletters:
		//	local_variable;
		public ParserRule getRule() { return rule; }

		//local_variable
		public RuleCall getLocal_variableParserRuleCall() { return cLocal_variableParserRuleCall; }
	}

	public class Interface_or_port_nameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "interface_or_port_name");
		private final RuleCall cGeneral_nameParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//interface_or_port_name:
		//	general_name;
		public ParserRule getRule() { return rule; }

		//general_name
		public RuleCall getGeneral_nameParserRuleCall() { return cGeneral_nameParserRuleCall; }
	}

	public class Message_nameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "message_name");
		private final RuleCall cGeneral_nameParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//message_name:
		//	general_name;
		public ParserRule getRule() { return rule; }

		//general_name
		public RuleCall getGeneral_nameParserRuleCall() { return cGeneral_nameParserRuleCall; }
	}

	public class Instance_chainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "instance_chain");
		private final Keyword cInstance_chainKeyword = (Keyword)rule.eContents().get(1);
		
		////    object_keyletters
		////    TOK_LSQBR
		////    relationship
		////    (
		////      TOK_DOT
		////      phrase
		////    )?
		////    TOK_RSQBR
		////  )+
		//instance_chain: //( TOK_ARROW
		//	"instance_chain";
		public ParserRule getRule() { return rule; }

		////( TOK_ARROW
		//"instance_chain"
		public Keyword getInstance_chainKeyword() { return cInstance_chainKeyword; }
	}

	public class Object_specElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "object_spec");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cRelatedKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cByKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cLocal_variableParserRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final RuleCall cInstance_chainParserRuleCall_0_3 = (RuleCall)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cFromKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cInstancesKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Keyword cOfKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final RuleCall cObject_keylettersParserRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		
		//object_spec:
		//	"related" "by" local_variable instance_chain //  ( where_spec )?
		//	//  ( where_spec )?
		//	| "from" ("instances" "of")? object_keyletters;
		public ParserRule getRule() { return rule; }

		//"related" "by" local_variable instance_chain //  ( where_spec )?
		////  ( where_spec )?
		//| "from" ("instances" "of")? object_keyletters
		public Alternatives getAlternatives() { return cAlternatives; }

		//"related" "by" local_variable instance_chain
		public Group getGroup_0() { return cGroup_0; }

		//"related"
		public Keyword getRelatedKeyword_0_0() { return cRelatedKeyword_0_0; }

		//"by"
		public Keyword getByKeyword_0_1() { return cByKeyword_0_1; }

		//local_variable
		public RuleCall getLocal_variableParserRuleCall_0_2() { return cLocal_variableParserRuleCall_0_2; }

		//instance_chain
		public RuleCall getInstance_chainParserRuleCall_0_3() { return cInstance_chainParserRuleCall_0_3; }

		//"from" ("instances" "of")? object_keyletters
		public Group getGroup_1() { return cGroup_1; }

		//"from"
		public Keyword getFromKeyword_1_0() { return cFromKeyword_1_0; }

		//("instances" "of")?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"instances"
		public Keyword getInstancesKeyword_1_1_0() { return cInstancesKeyword_1_1_0; }

		//"of"
		public Keyword getOfKeyword_1_1_1() { return cOfKeyword_1_1_1; }

		//object_keyletters
		public RuleCall getObject_keylettersParserRuleCall_1_2() { return cObject_keylettersParserRuleCall_1_2; }
	}

	public class Supp_dataElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "supp_data");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSupp_data_itemParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cTOK_COLONTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		////  expr
		////  (
		////    TOK_COMMA
		////    supp_data_item
		////    TOK_COLON
		////    expr
		////  )*
		//supp_data:
		//	supp_data_item TOK_COLON;
		public ParserRule getRule() { return rule; }

		//supp_data_item TOK_COLON
		public Group getGroup() { return cGroup; }

		//supp_data_item
		public RuleCall getSupp_data_itemParserRuleCall_0() { return cSupp_data_itemParserRuleCall_0; }

		//TOK_COLON
		public RuleCall getTOK_COLONTerminalRuleCall_1() { return cTOK_COLONTerminalRuleCall_1; }
	}

	public class Function_invocationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "function_invocation");
		private final Keyword cFunction_invocationKeyword = (Keyword)rule.eContents().get(1);
		
		////  TOK_LPAREN
		////  (
		////    invocation_parameters
		////  )?
		////  TOK_RPAREN
		//function_invocation: //function_function
		//	"function_invocation";
		public ParserRule getRule() { return rule; }

		////function_function
		//"function_invocation"
		public Keyword getFunction_invocationKeyword() { return cFunction_invocationKeyword; }
	}

	public class Transform_ib_invocationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "transform_ib_invocation");
		private final Keyword cTransform_ib_invocationKeyword = (Keyword)rule.eContents().get(1);
		
		////  TOK_DOT
		////  transformer_function
		////  TOK_LPAREN
		////  (
		////    invocation_parameters
		////  )?
		////  TOK_RPAREN
		//transform_ib_invocation: //inst_ref_var
		//	"transform_ib_invocation";
		public ParserRule getRule() { return rule; }

		////inst_ref_var
		//"transform_ib_invocation"
		public Keyword getTransform_ib_invocationKeyword() { return cTransform_ib_invocationKeyword; }
	}

	public class Transform_invocationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "transform_invocation");
		private final Keyword cTransform_invocationKeyword = (Keyword)rule.eContents().get(1);
		
		////  TOK_DOUBLECOLON
		////  transformer_function
		////  TOK_LPAREN
		////  (
		////    invocation_parameters
		////  )?
		////  TOK_RPAREN
		//transform_invocation: //object_keyletters
		//	"transform_invocation";
		public ParserRule getRule() { return rule; }

		////object_keyletters
		//"transform_invocation"
		public Keyword getTransform_invocationKeyword() { return cTransform_invocationKeyword; }
	}

	public class Where_specElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "where_spec");
		private final Keyword cWhereKeyword = (Keyword)rule.eContents().get(1);
		
		//where_spec: //expr
		//	"where";
		public ParserRule getRule() { return rule; }

		////expr
		//"where"
		public Keyword getWhereKeyword() { return cWhereKeyword; }
	}

	public class Assoc_obj_inst_ref_varElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "assoc_obj_inst_ref_var");
		private final RuleCall cInst_ref_varParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//assoc_obj_inst_ref_var:
		//	inst_ref_var;
		public ParserRule getRule() { return rule; }

		//inst_ref_var
		public RuleCall getInst_ref_varParserRuleCall() { return cInst_ref_varParserRuleCall; }
	}

	public class Bridge_functionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "bridge_function");
		private final RuleCall cFunction_nameParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//bridge_function:
		//	function_name;
		public ParserRule getRule() { return rule; }

		//function_name
		public RuleCall getFunction_nameParserRuleCall() { return cFunction_nameParserRuleCall; }
	}

	public class Invocation_functionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "invocation_function");
		private final RuleCall cFunction_nameParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//invocation_function:
		//	function_name;
		public ParserRule getRule() { return rule; }

		//function_name
		public RuleCall getFunction_nameParserRuleCall() { return cFunction_nameParserRuleCall; }
	}

	public class Data_itemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "data_item");
		private final RuleCall cData_item_nameParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//data_item:
		//	data_item_name;
		public ParserRule getRule() { return rule; }

		//data_item_name
		public RuleCall getData_item_nameParserRuleCall() { return cData_item_nameParserRuleCall; }
	}

	public class Data_item_nameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "data_item_name");
		private final RuleCall cGeneral_nameParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//data_item_name:
		//	general_name;
		public ParserRule getRule() { return rule; }

		//general_name
		public RuleCall getGeneral_nameParserRuleCall() { return cGeneral_nameParserRuleCall; }
	}

	public class Enum_data_typeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "enum_data_type");
		private final RuleCall cGeneral_nameParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//enum_data_type:
		//	general_name;
		public ParserRule getRule() { return rule; }

		//general_name
		public RuleCall getGeneral_nameParserRuleCall() { return cGeneral_nameParserRuleCall; }
	}

	public class EnumeratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "enumerator");
		private final RuleCall cGeneral_nameParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//enumerator:
		//	general_name;
		public ParserRule getRule() { return rule; }

		//general_name
		public RuleCall getGeneral_nameParserRuleCall() { return cGeneral_nameParserRuleCall; }
	}

	public class KeylettersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "keyletters");
		private final RuleCall cGeneral_nameParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//keyletters:
		//	general_name;
		public ParserRule getRule() { return rule; }

		//general_name
		public RuleCall getGeneral_nameParserRuleCall() { return cGeneral_nameParserRuleCall; }
	}

	public class Ee_keylettersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ee_keyletters");
		private final RuleCall cKeylettersParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ee_keyletters:
		//	keyletters;
		public ParserRule getRule() { return rule; }

		//keyletters
		public RuleCall getKeylettersParserRuleCall() { return cKeylettersParserRuleCall; }
	}

	public class Event_labelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "event_label");
		private final RuleCall cGeneral_nameParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//event_label:
		//	general_name;
		public ParserRule getRule() { return rule; }

		//general_name
		public RuleCall getGeneral_nameParserRuleCall() { return cGeneral_nameParserRuleCall; }
	}

	public class Event_meaningElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "event_meaning");
		private final RuleCall cPhraseParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//event_meaning:
		//	phrase;
		public ParserRule getRule() { return rule; }

		//phrase
		public RuleCall getPhraseParserRuleCall() { return cPhraseParserRuleCall; }
	}

	public class General_nameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "general_name");
		private final RuleCall cLimited_nameParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		////|
		////  TOK_GENERAL_NAME
		//general_name:
		//	limited_name;
		public ParserRule getRule() { return rule; }

		//limited_name
		public RuleCall getLimited_nameParserRuleCall() { return cLimited_nameParserRuleCall; }
	}

	public class Svc_general_nameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "svc_general_name");
		private final RuleCall cLimited_nameParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		////|
		////  TOK_GENERAL_NAME
		//svc_general_name:
		//	limited_name;
		public ParserRule getRule() { return rule; }

		//limited_name
		public RuleCall getLimited_nameParserRuleCall() { return cLimited_nameParserRuleCall; }
	}

	public class Limited_nameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "limited_name");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		////  |
		////   TOK_RELID
		//limited_name:
		//	ID;
		public ParserRule getRule() { return rule; }

		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}

	public class Inst_ref_set_varElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "inst_ref_set_var");
		private final Assignment cA1Assignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cA1Local_variableParserRuleCall_0 = (RuleCall)cA1Assignment.eContents().get(0);
		
		//inst_ref_set_var:
		//	a1=local_variable;
		public ParserRule getRule() { return rule; }

		//a1=local_variable
		public Assignment getA1Assignment() { return cA1Assignment; }

		//local_variable
		public RuleCall getA1Local_variableParserRuleCall_0() { return cA1Local_variableParserRuleCall_0; }
	}

	public class Inst_ref_varElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "inst_ref_var");
		private final Assignment cA1Assignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cA1Local_variableParserRuleCall_0 = (RuleCall)cA1Assignment.eContents().get(0);
		
		//inst_ref_var:
		//	a1=local_variable;
		public ParserRule getRule() { return rule; }

		//a1=local_variable
		public Assignment getA1Assignment() { return cA1Assignment; }

		//local_variable
		public RuleCall getA1Local_variableParserRuleCall_0() { return cA1Local_variableParserRuleCall_0; }
	}

	public class Local_variableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "local_variable");
		private final RuleCall cRoot_element_labelParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//local_variable:
		//	root_element_label;
		public ParserRule getRule() { return rule; }

		//root_element_label
		public RuleCall getRoot_element_labelParserRuleCall() { return cRoot_element_labelParserRuleCall; }
	}

	public class Root_element_labelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "root_element_label");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cSelectedKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cSelfKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final RuleCall cLimited_nameParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//root_element_label:
		//	"selected" | "self" | limited_name;
		public ParserRule getRule() { return rule; }

		//"selected" | "self" | limited_name
		public Alternatives getAlternatives() { return cAlternatives; }

		//"selected"
		public Keyword getSelectedKeyword_0() { return cSelectedKeyword_0; }

		//"self"
		public Keyword getSelfKeyword_1() { return cSelfKeyword_1; }

		//limited_name
		public RuleCall getLimited_nameParserRuleCall_2() { return cLimited_nameParserRuleCall_2; }
	}

	public class Element_labelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "element_label");
		private final RuleCall cGeneral_nameParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//element_label:
		//	general_name;
		public ParserRule getRule() { return rule; }

		//general_name
		public RuleCall getGeneral_nameParserRuleCall() { return cGeneral_nameParserRuleCall; }
	}

	public class Function_nameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "function_name");
		private final RuleCall cGeneral_nameParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//function_name:
		//	general_name;
		public ParserRule getRule() { return rule; }

		//general_name
		public RuleCall getGeneral_nameParserRuleCall() { return cGeneral_nameParserRuleCall; }
	}

	public class Svc_function_nameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "svc_function_name");
		private final RuleCall cSvc_general_nameParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//svc_function_name:
		//	svc_general_name;
		public ParserRule getRule() { return rule; }

		//svc_general_name
		public RuleCall getSvc_general_nameParserRuleCall() { return cSvc_general_nameParserRuleCall; }
	}

	public class IdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "identifier");
		private final RuleCall cGeneral_nameParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//identifier:
		//	general_name;
		public ParserRule getRule() { return rule; }

		//general_name
		public RuleCall getGeneral_nameParserRuleCall() { return cGeneral_nameParserRuleCall; }
	}

	public class Object_keylettersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "object_keyletters");
		private final RuleCall cKeylettersParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//object_keyletters:
		//	keyletters;
		public ParserRule getRule() { return rule; }

		//keyletters
		public RuleCall getKeylettersParserRuleCall() { return cKeylettersParserRuleCall; }
	}

	public class PhraseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "phrase");
		private final Keyword cPhraseKeyword = (Keyword)rule.eContents().get(1);
		
		////  TICKED_PHRASE
		////|
		////  svc_general_name
		////)
		//phrase: // (
		//	"phrase";
		public ParserRule getRule() { return rule; }

		//// (
		//"phrase"
		public Keyword getPhraseKeyword() { return cPhraseKeyword; }
	}

	public class RelationshipElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "relationship");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//relationship:
		//	ID;
		public ParserRule getRule() { return rule; }

		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}

	public class Supp_data_itemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "supp_data_item");
		private final RuleCall cData_item_nameParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//supp_data_item:
		//	data_item_name;
		public ParserRule getRule() { return rule; }

		//data_item_name
		public RuleCall getData_item_nameParserRuleCall() { return cData_item_nameParserRuleCall; }
	}

	public class Function_functionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "function_function");
		private final RuleCall cSvc_function_nameParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//function_function:
		//	svc_function_name;
		public ParserRule getRule() { return rule; }

		//svc_function_name
		public RuleCall getSvc_function_nameParserRuleCall() { return cSvc_function_nameParserRuleCall; }
	}

	public class Transformer_functionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "transformer_function");
		private final RuleCall cFunction_nameParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//transformer_function:
		//	function_name;
		public ParserRule getRule() { return rule; }

		//function_name
		public RuleCall getFunction_nameParserRuleCall() { return cFunction_nameParserRuleCall; }
	}

	public class ExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "expr");
		private final Assignment cA1Assignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cA1Sub_exprParserRuleCall_0 = (RuleCall)cA1Assignment.eContents().get(0);
		
		//expr:
		//	a1=sub_expr;
		public ParserRule getRule() { return rule; }

		//a1=sub_expr
		public Assignment getA1Assignment() { return cA1Assignment; }

		//sub_expr
		public RuleCall getA1Sub_exprParserRuleCall_0() { return cA1Sub_exprParserRuleCall_0; }
	}

	public class Sub_exprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sub_expr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cA1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cA1ConjunctionParserRuleCall_0_0 = (RuleCall)cA1Assignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cOrKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cA2Assignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cA2ConjunctionParserRuleCall_1_1_0 = (RuleCall)cA2Assignment_1_1.eContents().get(0);
		
		//sub_expr:
		//	a1=conjunction ("or" a2+=conjunction)*;
		public ParserRule getRule() { return rule; }

		//a1=conjunction ("or" a2+=conjunction)*
		public Group getGroup() { return cGroup; }

		//a1=conjunction
		public Assignment getA1Assignment_0() { return cA1Assignment_0; }

		//conjunction
		public RuleCall getA1ConjunctionParserRuleCall_0_0() { return cA1ConjunctionParserRuleCall_0_0; }

		//("or" a2+=conjunction)*
		public Group getGroup_1() { return cGroup_1; }

		//"or"
		public Keyword getOrKeyword_1_0() { return cOrKeyword_1_0; }

		//a2+=conjunction
		public Assignment getA2Assignment_1_1() { return cA2Assignment_1_1; }

		//conjunction
		public RuleCall getA2ConjunctionParserRuleCall_1_1_0() { return cA2ConjunctionParserRuleCall_1_1_0; }
	}

	public class ConjunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "conjunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cA1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cA1Relational_exprParserRuleCall_0_0 = (RuleCall)cA1Assignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAndKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cA2Assignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cA2Relational_exprParserRuleCall_1_1_0 = (RuleCall)cA2Assignment_1_1.eContents().get(0);
		
		//conjunction:
		//	a1=relational_expr ("and" a2+=relational_expr)*;
		public ParserRule getRule() { return rule; }

		//a1=relational_expr ("and" a2+=relational_expr)*
		public Group getGroup() { return cGroup; }

		//a1=relational_expr
		public Assignment getA1Assignment_0() { return cA1Assignment_0; }

		//relational_expr
		public RuleCall getA1Relational_exprParserRuleCall_0_0() { return cA1Relational_exprParserRuleCall_0_0; }

		//("and" a2+=relational_expr)*
		public Group getGroup_1() { return cGroup_1; }

		//"and"
		public Keyword getAndKeyword_1_0() { return cAndKeyword_1_0; }

		//a2+=relational_expr
		public Assignment getA2Assignment_1_1() { return cA2Assignment_1_1; }

		//relational_expr
		public RuleCall getA2Relational_exprParserRuleCall_1_1_0() { return cA2Relational_exprParserRuleCall_1_1_0; }
	}

	public class Relational_exprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "relational_expr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cA1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cA1AdditionParserRuleCall_0_0 = (RuleCall)cA1Assignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cComparison_operatorParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cA2Assignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cA2AdditionParserRuleCall_1_1_0 = (RuleCall)cA2Assignment_1_1.eContents().get(0);
		
		//relational_expr:
		//	a1=addition (comparison_operator a2=addition)?;
		public ParserRule getRule() { return rule; }

		//a1=addition (comparison_operator a2=addition)?
		public Group getGroup() { return cGroup; }

		//a1=addition
		public Assignment getA1Assignment_0() { return cA1Assignment_0; }

		//addition
		public RuleCall getA1AdditionParserRuleCall_0_0() { return cA1AdditionParserRuleCall_0_0; }

		//(comparison_operator a2=addition)?
		public Group getGroup_1() { return cGroup_1; }

		//comparison_operator
		public RuleCall getComparison_operatorParserRuleCall_1_0() { return cComparison_operatorParserRuleCall_1_0; }

		//a2=addition
		public Assignment getA2Assignment_1_1() { return cA2Assignment_1_1; }

		//addition
		public RuleCall getA2AdditionParserRuleCall_1_1_0() { return cA2AdditionParserRuleCall_1_1_0; }
	}

	public class AdditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "addition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cA1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cA1MultiplicationParserRuleCall_0_0 = (RuleCall)cA1Assignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cPlus_or_minusParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cA2Assignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cA2MultiplicationParserRuleCall_1_1_0 = (RuleCall)cA2Assignment_1_1.eContents().get(0);
		
		//addition:
		//	a1=multiplication (plus_or_minus a2+=multiplication)*;
		public ParserRule getRule() { return rule; }

		//a1=multiplication (plus_or_minus a2+=multiplication)*
		public Group getGroup() { return cGroup; }

		//a1=multiplication
		public Assignment getA1Assignment_0() { return cA1Assignment_0; }

		//multiplication
		public RuleCall getA1MultiplicationParserRuleCall_0_0() { return cA1MultiplicationParserRuleCall_0_0; }

		//(plus_or_minus a2+=multiplication)*
		public Group getGroup_1() { return cGroup_1; }

		//plus_or_minus
		public RuleCall getPlus_or_minusParserRuleCall_1_0() { return cPlus_or_minusParserRuleCall_1_0; }

		//a2+=multiplication
		public Assignment getA2Assignment_1_1() { return cA2Assignment_1_1; }

		//multiplication
		public RuleCall getA2MultiplicationParserRuleCall_1_1_0() { return cA2MultiplicationParserRuleCall_1_1_0; }
	}

	public class MultiplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "multiplication");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cA1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cA1Sign_exprParserRuleCall_0_0 = (RuleCall)cA1Assignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cMult_opParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cA2Assignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cA2Sign_exprParserRuleCall_1_1_0 = (RuleCall)cA2Assignment_1_1.eContents().get(0);
		
		//multiplication: //  ( boolean_negation )=>
		////  boolean_negation
		////|
		//	a1=sign_expr (mult_op a2+=sign_expr)*;
		public ParserRule getRule() { return rule; }

		////  ( boolean_negation )=>
		////  boolean_negation
		////|
		//a1=sign_expr (mult_op a2+=sign_expr)*
		public Group getGroup() { return cGroup; }

		////  ( boolean_negation )=>
		////  boolean_negation
		////|
		//a1=sign_expr
		public Assignment getA1Assignment_0() { return cA1Assignment_0; }

		//sign_expr
		public RuleCall getA1Sign_exprParserRuleCall_0_0() { return cA1Sign_exprParserRuleCall_0_0; }

		//(mult_op a2+=sign_expr)*
		public Group getGroup_1() { return cGroup_1; }

		//mult_op
		public RuleCall getMult_opParserRuleCall_1_0() { return cMult_opParserRuleCall_1_0; }

		//a2+=sign_expr
		public Assignment getA2Assignment_1_1() { return cA2Assignment_1_1; }

		//sign_expr
		public RuleCall getA2Sign_exprParserRuleCall_1_1_0() { return cA2Sign_exprParserRuleCall_1_1_0; }
	}

	public class Sign_exprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sign_expr");
		private final RuleCall cTermParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//sign_expr: //  (
		////    plus_or_minus
		////  )?
		//	term;
		public ParserRule getRule() { return rule; }

		////  (
		////    plus_or_minus
		////  )?
		//term
		public RuleCall getTermParserRuleCall() { return cTermParserRuleCall; }
	}

	public class Boolean_negationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "boolean_negation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNotKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cTermParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//boolean_negation:
		//	"not" term;
		public ParserRule getRule() { return rule; }

		//"not" term
		public Group getGroup() { return cGroup; }

		//"not"
		public Keyword getNotKeyword_0() { return cNotKeyword_0; }

		//term
		public RuleCall getTermParserRuleCall_1() { return cTermParserRuleCall_1; }
	}

	public class TermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "term");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cA1Assignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cA1RvalParserRuleCall_0_0 = (RuleCall)cA1Assignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cTOK_LPARENTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cA2Assignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cA2ExprParserRuleCall_1_1_0 = (RuleCall)cA2Assignment_1_1.eContents().get(0);
		private final RuleCall cTOK_RPARENTerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		
		//term: //  (cardinality_op) => cardinality_op
		////|
		////  (empty_op) => empty_op
		////|
		////  (not_empty_op) => not_empty_op
		////|
		//	a1=rval | TOK_LPAREN //  (
		//	//    ( assignment_expr )=>
		//	//    assignment_expr
		//	//  |
		//	a2=expr //  )
		//	TOK_RPAREN;
		public ParserRule getRule() { return rule; }

		////  (cardinality_op) => cardinality_op
		////|
		////  (empty_op) => empty_op
		////|
		////  (not_empty_op) => not_empty_op
		////|
		//a1=rval | TOK_LPAREN //  (
		////    ( assignment_expr )=>
		////    assignment_expr
		////  |
		//a2=expr //  )
		//TOK_RPAREN
		public Alternatives getAlternatives() { return cAlternatives; }

		////  (cardinality_op) => cardinality_op
		////|
		////  (empty_op) => empty_op
		////|
		////  (not_empty_op) => not_empty_op
		////|
		//a1=rval
		public Assignment getA1Assignment_0() { return cA1Assignment_0; }

		//rval
		public RuleCall getA1RvalParserRuleCall_0_0() { return cA1RvalParserRuleCall_0_0; }

		//TOK_LPAREN //  (
		////    ( assignment_expr )=>
		////    assignment_expr
		////  |
		//a2=expr //  )
		//TOK_RPAREN
		public Group getGroup_1() { return cGroup_1; }

		//TOK_LPAREN
		public RuleCall getTOK_LPARENTerminalRuleCall_1_0() { return cTOK_LPARENTerminalRuleCall_1_0; }

		////  (
		////    ( assignment_expr )=>
		////    assignment_expr
		////  |
		//a2=expr
		public Assignment getA2Assignment_1_1() { return cA2Assignment_1_1; }

		//expr
		public RuleCall getA2ExprParserRuleCall_1_1_0() { return cA2ExprParserRuleCall_1_1_0; }

		////  )
		//TOK_RPAREN
		public RuleCall getTOK_RPARENTerminalRuleCall_1_2() { return cTOK_RPARENTerminalRuleCall_1_2; }
	}

	public class Cardinality_opElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "cardinality_op");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCardinalityKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cLocal_variableParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//cardinality_op:
		//	"cardinality" local_variable;
		public ParserRule getRule() { return rule; }

		//"cardinality" local_variable
		public Group getGroup() { return cGroup; }

		//"cardinality"
		public Keyword getCardinalityKeyword_0() { return cCardinalityKeyword_0; }

		//local_variable
		public RuleCall getLocal_variableParserRuleCall_1() { return cLocal_variableParserRuleCall_1; }
	}

	public class Empty_opElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "empty_op");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEmptyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cLocal_variableParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//empty_op:
		//	"empty" local_variable;
		public ParserRule getRule() { return rule; }

		//"empty" local_variable
		public Group getGroup() { return cGroup; }

		//"empty"
		public Keyword getEmptyKeyword_0() { return cEmptyKeyword_0; }

		//local_variable
		public RuleCall getLocal_variableParserRuleCall_1() { return cLocal_variableParserRuleCall_1; }
	}

	public class Not_empty_opElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "not_empty_op");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNot_emptyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cLocal_variableParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//not_empty_op:
		//	"not_empty" local_variable;
		public ParserRule getRule() { return rule; }

		//"not_empty" local_variable
		public Group getGroup() { return cGroup; }

		//"not_empty"
		public Keyword getNot_emptyKeyword_0() { return cNot_emptyKeyword_0; }

		//local_variable
		public RuleCall getLocal_variableParserRuleCall_1() { return cLocal_variableParserRuleCall_1; }
	}

	public class Instance_start_segmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "instance_start_segment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRoot_element_labelParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cArray_refsParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//instance_start_segment:
		//	root_element_label array_refs?;
		public ParserRule getRule() { return rule; }

		//root_element_label array_refs?
		public Group getGroup() { return cGroup; }

		//root_element_label
		public RuleCall getRoot_element_labelParserRuleCall_0() { return cRoot_element_labelParserRuleCall_0; }

		//array_refs?
		public RuleCall getArray_refsParserRuleCall_1() { return cArray_refsParserRuleCall_1; }
	}

	public class Instance_access_segmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "instance_access_segment");
		private final RuleCall cElement_labelParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		////  (
		////    array_refs
		////  )?
		//instance_access_segment:
		//	element_label;
		public ParserRule getRule() { return rule; }

		//element_label
		public RuleCall getElement_labelParserRuleCall() { return cElement_labelParserRuleCall; }
	}

	public class Member_accessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "member_access");
		private final RuleCall cInstance_start_segmentParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		////(TOK_DOT
		//// instance_access_segment
		////)*
		//member_access:
		//	instance_start_segment;
		public ParserRule getRule() { return rule; }

		//instance_start_segment
		public RuleCall getInstance_start_segmentParserRuleCall() { return cInstance_start_segmentParserRuleCall; }
	}

	public class Param_data_accessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "param_data_access");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cParamKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cTOK_DOTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		////member_access
		//param_data_access:
		//	"param" TOK_DOT;
		public ParserRule getRule() { return rule; }

		//"param" TOK_DOT
		public Group getGroup() { return cGroup; }

		//"param"
		public Keyword getParamKeyword_0() { return cParamKeyword_0; }

		//TOK_DOT
		public RuleCall getTOK_DOTTerminalRuleCall_1() { return cTOK_DOTTerminalRuleCall_1; }
	}

	public class Event_data_accessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "event_data_access");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRcvd_evtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cTOK_DOTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		////member_access
		//event_data_access:
		//	"rcvd_evt" TOK_DOT;
		public ParserRule getRule() { return rule; }

		//"rcvd_evt" TOK_DOT
		public Group getGroup() { return cGroup; }

		//"rcvd_evt"
		public Keyword getRcvd_evtKeyword_0() { return cRcvd_evtKeyword_0; }

		//TOK_DOT
		public RuleCall getTOK_DOTTerminalRuleCall_1() { return cTOK_DOTTerminalRuleCall_1; }
	}

	public class Array_refsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "array_refs");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTOK_LSQBRTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cA1Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cA1ExprParserRuleCall_1_0 = (RuleCall)cA1Assignment_1.eContents().get(0);
		private final RuleCall cTOK_RSQBRTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//array_refs:
		//	(TOK_LSQBR a1+=expr TOK_RSQBR)+;
		public ParserRule getRule() { return rule; }

		//(TOK_LSQBR a1+=expr TOK_RSQBR)+
		public Group getGroup() { return cGroup; }

		//TOK_LSQBR
		public RuleCall getTOK_LSQBRTerminalRuleCall_0() { return cTOK_LSQBRTerminalRuleCall_0; }

		//a1+=expr
		public Assignment getA1Assignment_1() { return cA1Assignment_1; }

		//expr
		public RuleCall getA1ExprParserRuleCall_1_0() { return cA1ExprParserRuleCall_1_0; }

		//TOK_RSQBR
		public RuleCall getTOK_RSQBRTerminalRuleCall_2() { return cTOK_RSQBRTerminalRuleCall_2; }
	}

	public class RvalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "rval");
		private final RuleCall cConstant_valueParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		////|
		////  ("rcvd_evt" TOK_DOT) =>
		////  event_data_access
		////|
		////  bridge_expr
		////|
		////  ("param" TOK_DOT) =>
		////  param_data_access
		////|
		////  TOK_QMARK
		//rval: //  ( TOK_DOUBLECOLON )=>
		////  TOK_DOUBLECOLON
		////  function_invocation
		////|
		////  ( transform_ib_invocation )=>
		////  transform_ib_invocation
		////|
		////  ( invocation_expr )=>
		////  invocation_expr
		////|
		////  ( enumerator_access )=>
		////  enumerator_access
		////|
		////  member_access
		////|
		//	constant_value;
		public ParserRule getRule() { return rule; }

		////  ( TOK_DOUBLECOLON )=>
		////  TOK_DOUBLECOLON
		////  function_invocation
		////|
		////  ( transform_ib_invocation )=>
		////  transform_ib_invocation
		////|
		////  ( invocation_expr )=>
		////  invocation_expr
		////|
		////  ( enumerator_access )=>
		////  enumerator_access
		////|
		////  member_access
		////|
		//constant_value
		public RuleCall getConstant_valueParserRuleCall() { return cConstant_valueParserRuleCall; }
	}

	public class Constant_valueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "constant_value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTOK_NUMBERParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTOK_STRINGTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Keyword cTrueKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cFalseKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//constant_value: //    TOK_FRACTION
		////  |
		//	TOK_NUMBER | TOK_STRING | "true" | "false";
		public ParserRule getRule() { return rule; }

		////    TOK_FRACTION
		////  |
		//TOK_NUMBER | TOK_STRING | "true" | "false"
		public Alternatives getAlternatives() { return cAlternatives; }

		////    TOK_FRACTION
		////  |
		//TOK_NUMBER
		public RuleCall getTOK_NUMBERParserRuleCall_0() { return cTOK_NUMBERParserRuleCall_0; }

		//TOK_STRING
		public RuleCall getTOK_STRINGTerminalRuleCall_1() { return cTOK_STRINGTerminalRuleCall_1; }

		//"true"
		public Keyword getTrueKeyword_2() { return cTrueKeyword_2; }

		//"false"
		public Keyword getFalseKeyword_3() { return cFalseKeyword_3; }
	}

	public class Comparison_operatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "comparison_operator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final RuleCall cTOK_NOTEQUALTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTOK_LESSTHANTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cTOK_LETerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cTOK_GTTerminalRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cTOK_GETerminalRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//comparison_operator:
		//	"==" | TOK_NOTEQUAL | TOK_LESSTHAN | TOK_LE | TOK_GT | TOK_GE;
		public ParserRule getRule() { return rule; }

		//"==" | TOK_NOTEQUAL | TOK_LESSTHAN | TOK_LE | TOK_GT | TOK_GE
		public Alternatives getAlternatives() { return cAlternatives; }

		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_0() { return cEqualsSignEqualsSignKeyword_0; }

		//TOK_NOTEQUAL
		public RuleCall getTOK_NOTEQUALTerminalRuleCall_1() { return cTOK_NOTEQUALTerminalRuleCall_1; }

		//TOK_LESSTHAN
		public RuleCall getTOK_LESSTHANTerminalRuleCall_2() { return cTOK_LESSTHANTerminalRuleCall_2; }

		//TOK_LE
		public RuleCall getTOK_LETerminalRuleCall_3() { return cTOK_LETerminalRuleCall_3; }

		//TOK_GT
		public RuleCall getTOK_GTTerminalRuleCall_4() { return cTOK_GTTerminalRuleCall_4; }

		//TOK_GE
		public RuleCall getTOK_GETerminalRuleCall_5() { return cTOK_GETerminalRuleCall_5; }
	}

	public class Plus_or_minusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "plus_or_minus");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTOK_PLUSTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTOK_MINUSTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//plus_or_minus:
		//	TOK_PLUS | TOK_MINUS;
		public ParserRule getRule() { return rule; }

		//TOK_PLUS | TOK_MINUS
		public Alternatives getAlternatives() { return cAlternatives; }

		//TOK_PLUS
		public RuleCall getTOK_PLUSTerminalRuleCall_0() { return cTOK_PLUSTerminalRuleCall_0; }

		//TOK_MINUS
		public RuleCall getTOK_MINUSTerminalRuleCall_1() { return cTOK_MINUSTerminalRuleCall_1; }
	}

	public class Mult_opElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mult_op");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTOK_TIMESTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTOK_DIVTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		////  |
		////    TOK_MOD
		//mult_op:
		//	TOK_TIMES | TOK_DIV;
		public ParserRule getRule() { return rule; }

		//TOK_TIMES | TOK_DIV
		public Alternatives getAlternatives() { return cAlternatives; }

		//TOK_TIMES
		public RuleCall getTOK_TIMESTerminalRuleCall_0() { return cTOK_TIMESTerminalRuleCall_0; }

		//TOK_DIV
		public RuleCall getTOK_DIVTerminalRuleCall_1() { return cTOK_DIVTerminalRuleCall_1; }
	}

	public class TOK_GENERAL_NAMEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TOK_GENERAL_NAME");
		private final RuleCall cIDTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//TOK_GENERAL_NAME:
		//	ID;
		public ParserRule getRule() { return rule; }

		//ID
		public RuleCall getIDTerminalRuleCall() { return cIDTerminalRuleCall; }
	}

	public class TOK_NUMBERElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TOK_NUMBER");
		private final RuleCall cINTTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//TOK_NUMBER:
		//	INT;
		public ParserRule getRule() { return rule; }

		//INT
		public RuleCall getINTTerminalRuleCall() { return cINTTerminalRuleCall; }
	}
	
	
	private CodeElements pCode;
	private BlockElements pBlock;
	private StatementElements pStatement;
	private Assignment_statementElements pAssignment_statement;
	private Break_statementElements pBreak_statement;
	private Bridge_statementElements pBridge_statement;
	private Send_statementElements pSend_statement;
	private Control_statementElements pControl_statement;
	private Continue_statementElements pContinue_statement;
	private Create_event_statementElements pCreate_event_statement;
	private Create_object_statementElements pCreate_object_statement;
	private Debug_statementElements pDebug_statement;
	private Delete_statementElements pDelete_statement;
	private For_statementElements pFor_statement;
	private Generate_statementElements pGenerate_statement;
	private If_statementElements pIf_statement;
	private Implicit_assignment_statementElements pImplicit_assignment_statement;
	private Implicit_invocation_statementElements pImplicit_invocation_statement;
	private Implicit_ib_transform_statementElements pImplicit_ib_transform_statement;
	private Relate_statementElements pRelate_statement;
	private Return_statementElements pReturn_statement;
	private Select_statementElements pSelect_statement;
	private Transform_statementElements pTransform_statement;
	private Function_statementElements pFunction_statement;
	private Unrelate_statementElements pUnrelate_statement;
	private While_statementElements pWhile_statement;
	private Assignment_exprElements pAssignment_expr;
	private Bridge_invocationElements pBridge_invocation;
	private Message_invocationElements pMessage_invocation;
	private InvocationElements pInvocation;
	private Bridge_exprElements pBridge_expr;
	private Invocation_exprElements pInvocation_expr;
	private Enumerator_accessElements pEnumerator_access;
	private Debug_operandElements pDebug_operand;
	private Event_specElements pEvent_spec;
	private Invocation_parametersElements pInvocation_parameters;
	private Inst_ref_var_or_ee_keylettersElements pInst_ref_var_or_ee_keyletters;
	private Interface_or_port_nameElements pInterface_or_port_name;
	private Message_nameElements pMessage_name;
	private Instance_chainElements pInstance_chain;
	private Object_specElements pObject_spec;
	private Supp_dataElements pSupp_data;
	private Function_invocationElements pFunction_invocation;
	private Transform_ib_invocationElements pTransform_ib_invocation;
	private Transform_invocationElements pTransform_invocation;
	private Where_specElements pWhere_spec;
	private Assoc_obj_inst_ref_varElements pAssoc_obj_inst_ref_var;
	private Bridge_functionElements pBridge_function;
	private Invocation_functionElements pInvocation_function;
	private Data_itemElements pData_item;
	private Data_item_nameElements pData_item_name;
	private Enum_data_typeElements pEnum_data_type;
	private EnumeratorElements pEnumerator;
	private KeylettersElements pKeyletters;
	private Ee_keylettersElements pEe_keyletters;
	private Event_labelElements pEvent_label;
	private Event_meaningElements pEvent_meaning;
	private General_nameElements pGeneral_name;
	private Svc_general_nameElements pSvc_general_name;
	private Limited_nameElements pLimited_name;
	private Inst_ref_set_varElements pInst_ref_set_var;
	private Inst_ref_varElements pInst_ref_var;
	private Local_variableElements pLocal_variable;
	private Root_element_labelElements pRoot_element_label;
	private Element_labelElements pElement_label;
	private Function_nameElements pFunction_name;
	private Svc_function_nameElements pSvc_function_name;
	private IdentifierElements pIdentifier;
	private Object_keylettersElements pObject_keyletters;
	private PhraseElements pPhrase;
	private RelationshipElements pRelationship;
	private Supp_data_itemElements pSupp_data_item;
	private Function_functionElements pFunction_function;
	private Transformer_functionElements pTransformer_function;
	private ExprElements pExpr;
	private Sub_exprElements pSub_expr;
	private ConjunctionElements pConjunction;
	private Relational_exprElements pRelational_expr;
	private AdditionElements pAddition;
	private MultiplicationElements pMultiplication;
	private Sign_exprElements pSign_expr;
	private Boolean_negationElements pBoolean_negation;
	private TermElements pTerm;
	private Cardinality_opElements pCardinality_op;
	private Empty_opElements pEmpty_op;
	private Not_empty_opElements pNot_empty_op;
	private Instance_start_segmentElements pInstance_start_segment;
	private Instance_access_segmentElements pInstance_access_segment;
	private Member_accessElements pMember_access;
	private Param_data_accessElements pParam_data_access;
	private Event_data_accessElements pEvent_data_access;
	private Array_refsElements pArray_refs;
	private RvalElements pRval;
	private Constant_valueElements pConstant_value;
	private Comparison_operatorElements pComparison_operator;
	private Plus_or_minusElements pPlus_or_minus;
	private Mult_opElements pMult_op;
	private TerminalRule tTOK_COLON;
	private TerminalRule tTOK_DOUBLECOLON;
	private TerminalRule tTOK_COMMA;
	private TerminalRule tTOK_DIV;
	private TerminalRule tTOK_DOT;
	private TerminalRule tTOK_EQUAL;
	private TerminalRule tTOK_GE;
	private TOK_GENERAL_NAMEElements pTOK_GENERAL_NAME;
	private TerminalRule tTOK_GT;
	private TerminalRule tTOK_LE;
	private TerminalRule tTOK_LESSTHAN;
	private TerminalRule tTOK_LPAREN;
	private TerminalRule tTOK_LSQBR;
	private TerminalRule tTOK_MINUS;
	private TerminalRule tTOK_NOTEQUAL;
	private TOK_NUMBERElements pTOK_NUMBER;
	private TerminalRule tTOK_PLUS;
	private TerminalRule tTOK_QMARK;
	private TerminalRule tTOK_RPAREN;
	private TerminalRule tTOK_RSQBR;
	private TerminalRule tTOK_STRING;
	private TerminalRule tTOK_TIMES;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public XoalGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Code:
	//	block;
	public CodeElements getCodeAccess() {
		return (pCode != null) ? pCode : (pCode = new CodeElements());
	}
	
	public ParserRule getCodeRule() {
		return getCodeAccess().getRule();
	}

	//block:
	//	statements+=statement*;
	public BlockElements getBlockAccess() {
		return (pBlock != null) ? pBlock : (pBlock = new BlockElements());
	}
	
	public ParserRule getBlockRule() {
		return getBlockAccess().getRule();
	}

	//statement: //  (implicit_ib_transform_statement )=>
	//	(implicit_ib_transform_statement //|
	//	//  (function_statement )=>
	//	function_statement //| empty_statement
	//	| implicit_assignment_statement | implicit_invocation_statement | assignment_statement | control_statement |
	//	break_statement | bridge_statement | send_statement | continue_statement | create_object_statement |
	//	create_event_statement | delete_statement | for_statement | generate_statement | if_statement | relate_statement |
	//	return_statement | select_statement | transform_statement | while_statement | unrelate_statement | debug_statement)
	//	";";
	public StatementElements getStatementAccess() {
		return (pStatement != null) ? pStatement : (pStatement = new StatementElements());
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}

	//assignment_statement:
	//	"assign" a1=assignment_expr;
	public Assignment_statementElements getAssignment_statementAccess() {
		return (pAssignment_statement != null) ? pAssignment_statement : (pAssignment_statement = new Assignment_statementElements());
	}
	
	public ParserRule getAssignment_statementRule() {
		return getAssignment_statementAccess().getRule();
	}

	//break_statement:
	//	a1="break";
	public Break_statementElements getBreak_statementAccess() {
		return (pBreak_statement != null) ? pBreak_statement : (pBreak_statement = new Break_statementElements());
	}
	
	public ParserRule getBreak_statementRule() {
		return getBreak_statementAccess().getRule();
	}

	////  (
	////    (
	////      ( member_access
	////      | param_data_access
	////      )
	////      TOK_EQUAL
	////      bridge_invocation
	////    )
	////|
	////    bridge_invocation
	////  )
	//bridge_statement:
	//	a1="bridge";
	public Bridge_statementElements getBridge_statementAccess() {
		return (pBridge_statement != null) ? pBridge_statement : (pBridge_statement = new Bridge_statementElements());
	}
	
	public ParserRule getBridge_statementRule() {
		return getBridge_statementAccess().getRule();
	}

	////  (
	////    (
	////      ( member_access
	////      | param_data_access
	////      )
	////      TOK_EQUAL
	////      message_invocation
	////    )
	////|
	////    message_invocation
	////  )
	//send_statement:
	//	a1="send";
	public Send_statementElements getSend_statementAccess() {
		return (pSend_statement != null) ? pSend_statement : (pSend_statement = new Send_statementElements());
	}
	
	public ParserRule getSend_statementRule() {
		return getSend_statementAccess().getRule();
	}

	//control_statement:
	//	a1="control" "stop";
	public Control_statementElements getControl_statementAccess() {
		return (pControl_statement != null) ? pControl_statement : (pControl_statement = new Control_statementElements());
	}
	
	public ParserRule getControl_statementRule() {
		return getControl_statementAccess().getRule();
	}

	//continue_statement:
	//	a1="continue";
	public Continue_statementElements getContinue_statementAccess() {
		return (pContinue_statement != null) ? pContinue_statement : (pContinue_statement = new Continue_statementElements());
	}
	
	public ParserRule getContinue_statementRule() {
		return getContinue_statementAccess().getRule();
	}

	//create_event_statement:
	//	"create" "event" "instance" a1=local_variable "of" a2=event_spec;
	public Create_event_statementElements getCreate_event_statementAccess() {
		return (pCreate_event_statement != null) ? pCreate_event_statement : (pCreate_event_statement = new Create_event_statementElements());
	}
	
	public ParserRule getCreate_event_statementRule() {
		return getCreate_event_statementAccess().getRule();
	}

	//create_object_statement:
	//	"create" "object" "instance" //(
	//	//  (  local_variable "of" )=>
	//	a1=local_variable //)?
	//	"of" a2=object_keyletters;
	public Create_object_statementElements getCreate_object_statementAccess() {
		return (pCreate_object_statement != null) ? pCreate_object_statement : (pCreate_object_statement = new Create_object_statementElements());
	}
	
	public ParserRule getCreate_object_statementRule() {
		return getCreate_object_statementAccess().getRule();
	}

	//debug_statement:
	//	"_debug" debug_operand+;
	public Debug_statementElements getDebug_statementAccess() {
		return (pDebug_statement != null) ? pDebug_statement : (pDebug_statement = new Debug_statementElements());
	}
	
	public ParserRule getDebug_statementRule() {
		return getDebug_statementAccess().getRule();
	}

	//delete_statement:
	//	"delete" "object" "instance" a1=inst_ref_var;
	public Delete_statementElements getDelete_statementAccess() {
		return (pDelete_statement != null) ? pDelete_statement : (pDelete_statement = new Delete_statementElements());
	}
	
	public ParserRule getDelete_statementRule() {
		return getDelete_statementAccess().getRule();
	}

	////empty_statement
	////  :
	////  ;
	//for_statement:
	//	"for" "each" a1=local_variable "in" a2=inst_ref_set_var a3=block "end" "for";
	public For_statementElements getFor_statementAccess() {
		return (pFor_statement != null) ? pFor_statement : (pFor_statement = new For_statementElements());
	}
	
	public ParserRule getFor_statementRule() {
		return getFor_statementAccess().getRule();
	}

	//generate_statement:
	//	"generate" a1=event_spec //|
	//	//  member_access
	//;
	public Generate_statementElements getGenerate_statementAccess() {
		return (pGenerate_statement != null) ? pGenerate_statement : (pGenerate_statement = new Generate_statementElements());
	}
	
	public ParserRule getGenerate_statementRule() {
		return getGenerate_statementAccess().getRule();
	}

	//if_statement:
	//	"if" a1=expr a2=block ("elif" a3+=expr a4+=block)? ("else" a5=block)? "end" "if";
	public If_statementElements getIf_statementAccess() {
		return (pIf_statement != null) ? pIf_statement : (pIf_statement = new If_statementElements());
	}
	
	public ParserRule getIf_statementRule() {
		return getIf_statementAccess().getRule();
	}

	//implicit_assignment_statement: //assignment_expr
	//	"implicit_assignment_statement";
	public Implicit_assignment_statementElements getImplicit_assignment_statementAccess() {
		return (pImplicit_assignment_statement != null) ? pImplicit_assignment_statement : (pImplicit_assignment_statement = new Implicit_assignment_statementElements());
	}
	
	public ParserRule getImplicit_assignment_statementRule() {
		return getImplicit_assignment_statementAccess().getRule();
	}

	//implicit_invocation_statement: //invocation
	//	"implicit_invocation_statement";
	public Implicit_invocation_statementElements getImplicit_invocation_statementAccess() {
		return (pImplicit_invocation_statement != null) ? pImplicit_invocation_statement : (pImplicit_invocation_statement = new Implicit_invocation_statementElements());
	}
	
	public ParserRule getImplicit_invocation_statementRule() {
		return getImplicit_invocation_statementAccess().getRule();
	}

	//implicit_ib_transform_statement: //transform_ib_invocation
	//	"implicit_ib_transform_statement";
	public Implicit_ib_transform_statementElements getImplicit_ib_transform_statementAccess() {
		return (pImplicit_ib_transform_statement != null) ? pImplicit_ib_transform_statement : (pImplicit_ib_transform_statement = new Implicit_ib_transform_statementElements());
	}
	
	public ParserRule getImplicit_ib_transform_statementRule() {
		return getImplicit_ib_transform_statementAccess().getRule();
	}

	////  (
	////    TOK_DOT
	////    phrase
	////  )?
	////  (
	////    "using"
	////    assoc_obj_inst_ref_var
	////  )?
	//relate_statement:
	//	"relate" a1=inst_ref_var "to" a2=inst_ref_var "across" a3=relationship;
	public Relate_statementElements getRelate_statementAccess() {
		return (pRelate_statement != null) ? pRelate_statement : (pRelate_statement = new Relate_statementElements());
	}
	
	public ParserRule getRelate_statementRule() {
		return getRelate_statementAccess().getRule();
	}

	//return_statement:
	//	a1="return" a2=expr?;
	public Return_statementElements getReturn_statementAccess() {
		return (pReturn_statement != null) ? pReturn_statement : (pReturn_statement = new Return_statementElements());
	}
	
	public ParserRule getReturn_statementRule() {
		return getReturn_statementAccess().getRule();
	}

	//select_statement:
	//	"select" ("one" local_variable a1=object_spec | "any" local_variable a2=object_spec | "many" local_variable
	//	a3=object_spec);
	public Select_statementElements getSelect_statementAccess() {
		return (pSelect_statement != null) ? pSelect_statement : (pSelect_statement = new Select_statementElements());
	}
	
	public ParserRule getSelect_statementRule() {
		return getSelect_statementAccess().getRule();
	}

	////  (
	////    (
	////      ( member_access
	////      | param_data_access
	////      )
	////      TOK_EQUAL
	////      transform_invocation
	////    )
	////|
	////    transform_invocation
	////  )
	//transform_statement:
	//	"transform";
	public Transform_statementElements getTransform_statementAccess() {
		return (pTransform_statement != null) ? pTransform_statement : (pTransform_statement = new Transform_statementElements());
	}
	
	public ParserRule getTransform_statementRule() {
		return getTransform_statementAccess().getRule();
	}

	//function_statement: //TOK_DOUBLECOLON
	////function_invocation
	//	"function_statement";
	public Function_statementElements getFunction_statementAccess() {
		return (pFunction_statement != null) ? pFunction_statement : (pFunction_statement = new Function_statementElements());
	}
	
	public ParserRule getFunction_statementRule() {
		return getFunction_statementAccess().getRule();
	}

	////  (
	////    TOK_DOT
	////    phrase
	////  )?
	////  (
	////    "using"
	////    assoc_obj_inst_ref_var
	////  )?
	//unrelate_statement:
	//	"unrelate" a1=inst_ref_var "from" a2=inst_ref_var "across" a3=relationship;
	public Unrelate_statementElements getUnrelate_statementAccess() {
		return (pUnrelate_statement != null) ? pUnrelate_statement : (pUnrelate_statement = new Unrelate_statementElements());
	}
	
	public ParserRule getUnrelate_statementRule() {
		return getUnrelate_statementAccess().getRule();
	}

	//while_statement:
	//	"while" a1=expr a2=block "end" "while";
	public While_statementElements getWhile_statementAccess() {
		return (pWhile_statement != null) ? pWhile_statement : (pWhile_statement = new While_statementElements());
	}
	
	public ParserRule getWhile_statementRule() {
		return getWhile_statementAccess().getRule();
	}

	////|
	////  ( "param" TOK_DOT )=>
	////  param_data_access
	////  TOK_EQUAL
	////  expr
	//assignment_expr: //member_access
	//	ID TOK_EQUAL a1=expr;
	public Assignment_exprElements getAssignment_exprAccess() {
		return (pAssignment_expr != null) ? pAssignment_expr : (pAssignment_expr = new Assignment_exprElements());
	}
	
	public ParserRule getAssignment_exprRule() {
		return getAssignment_exprAccess().getRule();
	}

	//bridge_invocation:
	//	a1=ee_keyletters TOK_DOUBLECOLON //  bridge_function
	//	TOK_LPAREN //  (
	//	//    invocation_parameters
	//	//  )?
	//	TOK_RPAREN;
	public Bridge_invocationElements getBridge_invocationAccess() {
		return (pBridge_invocation != null) ? pBridge_invocation : (pBridge_invocation = new Bridge_invocationElements());
	}
	
	public ParserRule getBridge_invocationRule() {
		return getBridge_invocationAccess().getRule();
	}

	////  (
	////    "to"
	////    (
	////      rval
	////    )
	////  )?
	//message_invocation: //  interface_or_port_name
	//	TOK_DOUBLECOLON //  message_name
	//	TOK_LPAREN //  (
	//	//    invocation_parameters
	//	//  )?
	//	TOK_RPAREN;
	public Message_invocationElements getMessage_invocationAccess() {
		return (pMessage_invocation != null) ? pMessage_invocation : (pMessage_invocation = new Message_invocationElements());
	}
	
	public ParserRule getMessage_invocationRule() {
		return getMessage_invocationAccess().getRule();
	}

	////  TOK_DOUBLECOLON
	////  invocation_function
	////  TOK_LPAREN
	////  (
	////    invocation_parameters
	////  )?
	////  TOK_RPAREN
	//invocation: //identifier
	//	"invocation rule";
	public InvocationElements getInvocationAccess() {
		return (pInvocation != null) ? pInvocation : (pInvocation = new InvocationElements());
	}
	
	public ParserRule getInvocationRule() {
		return getInvocationAccess().getRule();
	}

	//bridge_expr:
	//	"bridge" a1=bridge_invocation;
	public Bridge_exprElements getBridge_exprAccess() {
		return (pBridge_expr != null) ? pBridge_expr : (pBridge_expr = new Bridge_exprElements());
	}
	
	public ParserRule getBridge_exprRule() {
		return getBridge_exprAccess().getRule();
	}

	//invocation_expr:
	//	invocation;
	public Invocation_exprElements getInvocation_exprAccess() {
		return (pInvocation_expr != null) ? pInvocation_expr : (pInvocation_expr = new Invocation_exprElements());
	}
	
	public ParserRule getInvocation_exprRule() {
		return getInvocation_exprAccess().getRule();
	}

	////  TOK_DOUBLECOLON
	////  enumerator
	//enumerator_access: //enum_data_type
	//	"enumerator_access";
	public Enumerator_accessElements getEnumerator_accessAccess() {
		return (pEnumerator_access != null) ? pEnumerator_access : (pEnumerator_access = new Enumerator_accessElements());
	}
	
	public ParserRule getEnumerator_accessRule() {
		return getEnumerator_accessAccess().getRule();
	}

	//debug_operand:
	//	"_trace" ("_off" | "_on") | "_dump" ("_off" | "_on") | "_sor" ("_off" | "_on") | "_on" | "_off" | "_stat";
	public Debug_operandElements getDebug_operandAccess() {
		return (pDebug_operand != null) ? pDebug_operand : (pDebug_operand = new Debug_operandElements());
	}
	
	public ParserRule getDebug_operandRule() {
		return getDebug_operandAccess().getRule();
	}

	////    )
	////  )
	//event_spec:
	//	event_label //  (
	//	//    TOK_TIMES
	//	//  )?
	//	//  (
	//	//    TOK_COLON
	//	//    event_meaning
	//	//  )?
	//	//  (
	//	//    TOK_LPAREN
	//	//    (
	//	//      supp_data
	//	//    )?
	//	//    TOK_RPAREN
	//	//  )?
	//	"to" //  (
	//	//    (
	//	//      ( object_keyletters (
	//	//        "assigner" | "class" ) )=>
	//	//      object_keyletters
	//	//      (
	//	//        "assigner"
	//	//      |
	//	//        "class"
	//	//      )
	//	//    |
	//	//      object_keyletters
	//	//      "creator"
	//	//    )
	//	//  |
	//	//    (
	//	inst_ref_var_or_ee_keyletters;
	public Event_specElements getEvent_specAccess() {
		return (pEvent_spec != null) ? pEvent_spec : (pEvent_spec = new Event_specElements());
	}
	
	public ParserRule getEvent_specRule() {
		return getEvent_specAccess().getRule();
	}

	////  expr
	////  (
	////    TOK_COMMA
	////    data_item
	////    TOK_COLON
	////    expr
	////  )*
	//invocation_parameters:
	//	data_item TOK_COLON;
	public Invocation_parametersElements getInvocation_parametersAccess() {
		return (pInvocation_parameters != null) ? pInvocation_parameters : (pInvocation_parameters = new Invocation_parametersElements());
	}
	
	public ParserRule getInvocation_parametersRule() {
		return getInvocation_parametersAccess().getRule();
	}

	////  |
	////    TOK_GENERAL_NAME
	//inst_ref_var_or_ee_keyletters:
	//	local_variable;
	public Inst_ref_var_or_ee_keylettersElements getInst_ref_var_or_ee_keylettersAccess() {
		return (pInst_ref_var_or_ee_keyletters != null) ? pInst_ref_var_or_ee_keyletters : (pInst_ref_var_or_ee_keyletters = new Inst_ref_var_or_ee_keylettersElements());
	}
	
	public ParserRule getInst_ref_var_or_ee_keylettersRule() {
		return getInst_ref_var_or_ee_keylettersAccess().getRule();
	}

	//interface_or_port_name:
	//	general_name;
	public Interface_or_port_nameElements getInterface_or_port_nameAccess() {
		return (pInterface_or_port_name != null) ? pInterface_or_port_name : (pInterface_or_port_name = new Interface_or_port_nameElements());
	}
	
	public ParserRule getInterface_or_port_nameRule() {
		return getInterface_or_port_nameAccess().getRule();
	}

	//message_name:
	//	general_name;
	public Message_nameElements getMessage_nameAccess() {
		return (pMessage_name != null) ? pMessage_name : (pMessage_name = new Message_nameElements());
	}
	
	public ParserRule getMessage_nameRule() {
		return getMessage_nameAccess().getRule();
	}

	////    object_keyletters
	////    TOK_LSQBR
	////    relationship
	////    (
	////      TOK_DOT
	////      phrase
	////    )?
	////    TOK_RSQBR
	////  )+
	//instance_chain: //( TOK_ARROW
	//	"instance_chain";
	public Instance_chainElements getInstance_chainAccess() {
		return (pInstance_chain != null) ? pInstance_chain : (pInstance_chain = new Instance_chainElements());
	}
	
	public ParserRule getInstance_chainRule() {
		return getInstance_chainAccess().getRule();
	}

	//object_spec:
	//	"related" "by" local_variable instance_chain //  ( where_spec )?
	//	//  ( where_spec )?
	//	| "from" ("instances" "of")? object_keyletters;
	public Object_specElements getObject_specAccess() {
		return (pObject_spec != null) ? pObject_spec : (pObject_spec = new Object_specElements());
	}
	
	public ParserRule getObject_specRule() {
		return getObject_specAccess().getRule();
	}

	////  expr
	////  (
	////    TOK_COMMA
	////    supp_data_item
	////    TOK_COLON
	////    expr
	////  )*
	//supp_data:
	//	supp_data_item TOK_COLON;
	public Supp_dataElements getSupp_dataAccess() {
		return (pSupp_data != null) ? pSupp_data : (pSupp_data = new Supp_dataElements());
	}
	
	public ParserRule getSupp_dataRule() {
		return getSupp_dataAccess().getRule();
	}

	////  TOK_LPAREN
	////  (
	////    invocation_parameters
	////  )?
	////  TOK_RPAREN
	//function_invocation: //function_function
	//	"function_invocation";
	public Function_invocationElements getFunction_invocationAccess() {
		return (pFunction_invocation != null) ? pFunction_invocation : (pFunction_invocation = new Function_invocationElements());
	}
	
	public ParserRule getFunction_invocationRule() {
		return getFunction_invocationAccess().getRule();
	}

	////  TOK_DOT
	////  transformer_function
	////  TOK_LPAREN
	////  (
	////    invocation_parameters
	////  )?
	////  TOK_RPAREN
	//transform_ib_invocation: //inst_ref_var
	//	"transform_ib_invocation";
	public Transform_ib_invocationElements getTransform_ib_invocationAccess() {
		return (pTransform_ib_invocation != null) ? pTransform_ib_invocation : (pTransform_ib_invocation = new Transform_ib_invocationElements());
	}
	
	public ParserRule getTransform_ib_invocationRule() {
		return getTransform_ib_invocationAccess().getRule();
	}

	////  TOK_DOUBLECOLON
	////  transformer_function
	////  TOK_LPAREN
	////  (
	////    invocation_parameters
	////  )?
	////  TOK_RPAREN
	//transform_invocation: //object_keyletters
	//	"transform_invocation";
	public Transform_invocationElements getTransform_invocationAccess() {
		return (pTransform_invocation != null) ? pTransform_invocation : (pTransform_invocation = new Transform_invocationElements());
	}
	
	public ParserRule getTransform_invocationRule() {
		return getTransform_invocationAccess().getRule();
	}

	//where_spec: //expr
	//	"where";
	public Where_specElements getWhere_specAccess() {
		return (pWhere_spec != null) ? pWhere_spec : (pWhere_spec = new Where_specElements());
	}
	
	public ParserRule getWhere_specRule() {
		return getWhere_specAccess().getRule();
	}

	//assoc_obj_inst_ref_var:
	//	inst_ref_var;
	public Assoc_obj_inst_ref_varElements getAssoc_obj_inst_ref_varAccess() {
		return (pAssoc_obj_inst_ref_var != null) ? pAssoc_obj_inst_ref_var : (pAssoc_obj_inst_ref_var = new Assoc_obj_inst_ref_varElements());
	}
	
	public ParserRule getAssoc_obj_inst_ref_varRule() {
		return getAssoc_obj_inst_ref_varAccess().getRule();
	}

	//bridge_function:
	//	function_name;
	public Bridge_functionElements getBridge_functionAccess() {
		return (pBridge_function != null) ? pBridge_function : (pBridge_function = new Bridge_functionElements());
	}
	
	public ParserRule getBridge_functionRule() {
		return getBridge_functionAccess().getRule();
	}

	//invocation_function:
	//	function_name;
	public Invocation_functionElements getInvocation_functionAccess() {
		return (pInvocation_function != null) ? pInvocation_function : (pInvocation_function = new Invocation_functionElements());
	}
	
	public ParserRule getInvocation_functionRule() {
		return getInvocation_functionAccess().getRule();
	}

	//data_item:
	//	data_item_name;
	public Data_itemElements getData_itemAccess() {
		return (pData_item != null) ? pData_item : (pData_item = new Data_itemElements());
	}
	
	public ParserRule getData_itemRule() {
		return getData_itemAccess().getRule();
	}

	//data_item_name:
	//	general_name;
	public Data_item_nameElements getData_item_nameAccess() {
		return (pData_item_name != null) ? pData_item_name : (pData_item_name = new Data_item_nameElements());
	}
	
	public ParserRule getData_item_nameRule() {
		return getData_item_nameAccess().getRule();
	}

	//enum_data_type:
	//	general_name;
	public Enum_data_typeElements getEnum_data_typeAccess() {
		return (pEnum_data_type != null) ? pEnum_data_type : (pEnum_data_type = new Enum_data_typeElements());
	}
	
	public ParserRule getEnum_data_typeRule() {
		return getEnum_data_typeAccess().getRule();
	}

	//enumerator:
	//	general_name;
	public EnumeratorElements getEnumeratorAccess() {
		return (pEnumerator != null) ? pEnumerator : (pEnumerator = new EnumeratorElements());
	}
	
	public ParserRule getEnumeratorRule() {
		return getEnumeratorAccess().getRule();
	}

	//keyletters:
	//	general_name;
	public KeylettersElements getKeylettersAccess() {
		return (pKeyletters != null) ? pKeyletters : (pKeyletters = new KeylettersElements());
	}
	
	public ParserRule getKeylettersRule() {
		return getKeylettersAccess().getRule();
	}

	//ee_keyletters:
	//	keyletters;
	public Ee_keylettersElements getEe_keylettersAccess() {
		return (pEe_keyletters != null) ? pEe_keyletters : (pEe_keyletters = new Ee_keylettersElements());
	}
	
	public ParserRule getEe_keylettersRule() {
		return getEe_keylettersAccess().getRule();
	}

	//event_label:
	//	general_name;
	public Event_labelElements getEvent_labelAccess() {
		return (pEvent_label != null) ? pEvent_label : (pEvent_label = new Event_labelElements());
	}
	
	public ParserRule getEvent_labelRule() {
		return getEvent_labelAccess().getRule();
	}

	//event_meaning:
	//	phrase;
	public Event_meaningElements getEvent_meaningAccess() {
		return (pEvent_meaning != null) ? pEvent_meaning : (pEvent_meaning = new Event_meaningElements());
	}
	
	public ParserRule getEvent_meaningRule() {
		return getEvent_meaningAccess().getRule();
	}

	////|
	////  TOK_GENERAL_NAME
	//general_name:
	//	limited_name;
	public General_nameElements getGeneral_nameAccess() {
		return (pGeneral_name != null) ? pGeneral_name : (pGeneral_name = new General_nameElements());
	}
	
	public ParserRule getGeneral_nameRule() {
		return getGeneral_nameAccess().getRule();
	}

	////|
	////  TOK_GENERAL_NAME
	//svc_general_name:
	//	limited_name;
	public Svc_general_nameElements getSvc_general_nameAccess() {
		return (pSvc_general_name != null) ? pSvc_general_name : (pSvc_general_name = new Svc_general_nameElements());
	}
	
	public ParserRule getSvc_general_nameRule() {
		return getSvc_general_nameAccess().getRule();
	}

	////  |
	////   TOK_RELID
	//limited_name:
	//	ID;
	public Limited_nameElements getLimited_nameAccess() {
		return (pLimited_name != null) ? pLimited_name : (pLimited_name = new Limited_nameElements());
	}
	
	public ParserRule getLimited_nameRule() {
		return getLimited_nameAccess().getRule();
	}

	//inst_ref_set_var:
	//	a1=local_variable;
	public Inst_ref_set_varElements getInst_ref_set_varAccess() {
		return (pInst_ref_set_var != null) ? pInst_ref_set_var : (pInst_ref_set_var = new Inst_ref_set_varElements());
	}
	
	public ParserRule getInst_ref_set_varRule() {
		return getInst_ref_set_varAccess().getRule();
	}

	//inst_ref_var:
	//	a1=local_variable;
	public Inst_ref_varElements getInst_ref_varAccess() {
		return (pInst_ref_var != null) ? pInst_ref_var : (pInst_ref_var = new Inst_ref_varElements());
	}
	
	public ParserRule getInst_ref_varRule() {
		return getInst_ref_varAccess().getRule();
	}

	//local_variable:
	//	root_element_label;
	public Local_variableElements getLocal_variableAccess() {
		return (pLocal_variable != null) ? pLocal_variable : (pLocal_variable = new Local_variableElements());
	}
	
	public ParserRule getLocal_variableRule() {
		return getLocal_variableAccess().getRule();
	}

	//root_element_label:
	//	"selected" | "self" | limited_name;
	public Root_element_labelElements getRoot_element_labelAccess() {
		return (pRoot_element_label != null) ? pRoot_element_label : (pRoot_element_label = new Root_element_labelElements());
	}
	
	public ParserRule getRoot_element_labelRule() {
		return getRoot_element_labelAccess().getRule();
	}

	//element_label:
	//	general_name;
	public Element_labelElements getElement_labelAccess() {
		return (pElement_label != null) ? pElement_label : (pElement_label = new Element_labelElements());
	}
	
	public ParserRule getElement_labelRule() {
		return getElement_labelAccess().getRule();
	}

	//function_name:
	//	general_name;
	public Function_nameElements getFunction_nameAccess() {
		return (pFunction_name != null) ? pFunction_name : (pFunction_name = new Function_nameElements());
	}
	
	public ParserRule getFunction_nameRule() {
		return getFunction_nameAccess().getRule();
	}

	//svc_function_name:
	//	svc_general_name;
	public Svc_function_nameElements getSvc_function_nameAccess() {
		return (pSvc_function_name != null) ? pSvc_function_name : (pSvc_function_name = new Svc_function_nameElements());
	}
	
	public ParserRule getSvc_function_nameRule() {
		return getSvc_function_nameAccess().getRule();
	}

	//identifier:
	//	general_name;
	public IdentifierElements getIdentifierAccess() {
		return (pIdentifier != null) ? pIdentifier : (pIdentifier = new IdentifierElements());
	}
	
	public ParserRule getIdentifierRule() {
		return getIdentifierAccess().getRule();
	}

	//object_keyletters:
	//	keyletters;
	public Object_keylettersElements getObject_keylettersAccess() {
		return (pObject_keyletters != null) ? pObject_keyletters : (pObject_keyletters = new Object_keylettersElements());
	}
	
	public ParserRule getObject_keylettersRule() {
		return getObject_keylettersAccess().getRule();
	}

	////  TICKED_PHRASE
	////|
	////  svc_general_name
	////)
	//phrase: // (
	//	"phrase";
	public PhraseElements getPhraseAccess() {
		return (pPhrase != null) ? pPhrase : (pPhrase = new PhraseElements());
	}
	
	public ParserRule getPhraseRule() {
		return getPhraseAccess().getRule();
	}

	//relationship:
	//	ID;
	public RelationshipElements getRelationshipAccess() {
		return (pRelationship != null) ? pRelationship : (pRelationship = new RelationshipElements());
	}
	
	public ParserRule getRelationshipRule() {
		return getRelationshipAccess().getRule();
	}

	//supp_data_item:
	//	data_item_name;
	public Supp_data_itemElements getSupp_data_itemAccess() {
		return (pSupp_data_item != null) ? pSupp_data_item : (pSupp_data_item = new Supp_data_itemElements());
	}
	
	public ParserRule getSupp_data_itemRule() {
		return getSupp_data_itemAccess().getRule();
	}

	//function_function:
	//	svc_function_name;
	public Function_functionElements getFunction_functionAccess() {
		return (pFunction_function != null) ? pFunction_function : (pFunction_function = new Function_functionElements());
	}
	
	public ParserRule getFunction_functionRule() {
		return getFunction_functionAccess().getRule();
	}

	//transformer_function:
	//	function_name;
	public Transformer_functionElements getTransformer_functionAccess() {
		return (pTransformer_function != null) ? pTransformer_function : (pTransformer_function = new Transformer_functionElements());
	}
	
	public ParserRule getTransformer_functionRule() {
		return getTransformer_functionAccess().getRule();
	}

	//expr:
	//	a1=sub_expr;
	public ExprElements getExprAccess() {
		return (pExpr != null) ? pExpr : (pExpr = new ExprElements());
	}
	
	public ParserRule getExprRule() {
		return getExprAccess().getRule();
	}

	//sub_expr:
	//	a1=conjunction ("or" a2+=conjunction)*;
	public Sub_exprElements getSub_exprAccess() {
		return (pSub_expr != null) ? pSub_expr : (pSub_expr = new Sub_exprElements());
	}
	
	public ParserRule getSub_exprRule() {
		return getSub_exprAccess().getRule();
	}

	//conjunction:
	//	a1=relational_expr ("and" a2+=relational_expr)*;
	public ConjunctionElements getConjunctionAccess() {
		return (pConjunction != null) ? pConjunction : (pConjunction = new ConjunctionElements());
	}
	
	public ParserRule getConjunctionRule() {
		return getConjunctionAccess().getRule();
	}

	//relational_expr:
	//	a1=addition (comparison_operator a2=addition)?;
	public Relational_exprElements getRelational_exprAccess() {
		return (pRelational_expr != null) ? pRelational_expr : (pRelational_expr = new Relational_exprElements());
	}
	
	public ParserRule getRelational_exprRule() {
		return getRelational_exprAccess().getRule();
	}

	//addition:
	//	a1=multiplication (plus_or_minus a2+=multiplication)*;
	public AdditionElements getAdditionAccess() {
		return (pAddition != null) ? pAddition : (pAddition = new AdditionElements());
	}
	
	public ParserRule getAdditionRule() {
		return getAdditionAccess().getRule();
	}

	//multiplication: //  ( boolean_negation )=>
	////  boolean_negation
	////|
	//	a1=sign_expr (mult_op a2+=sign_expr)*;
	public MultiplicationElements getMultiplicationAccess() {
		return (pMultiplication != null) ? pMultiplication : (pMultiplication = new MultiplicationElements());
	}
	
	public ParserRule getMultiplicationRule() {
		return getMultiplicationAccess().getRule();
	}

	//sign_expr: //  (
	////    plus_or_minus
	////  )?
	//	term;
	public Sign_exprElements getSign_exprAccess() {
		return (pSign_expr != null) ? pSign_expr : (pSign_expr = new Sign_exprElements());
	}
	
	public ParserRule getSign_exprRule() {
		return getSign_exprAccess().getRule();
	}

	//boolean_negation:
	//	"not" term;
	public Boolean_negationElements getBoolean_negationAccess() {
		return (pBoolean_negation != null) ? pBoolean_negation : (pBoolean_negation = new Boolean_negationElements());
	}
	
	public ParserRule getBoolean_negationRule() {
		return getBoolean_negationAccess().getRule();
	}

	//term: //  (cardinality_op) => cardinality_op
	////|
	////  (empty_op) => empty_op
	////|
	////  (not_empty_op) => not_empty_op
	////|
	//	a1=rval | TOK_LPAREN //  (
	//	//    ( assignment_expr )=>
	//	//    assignment_expr
	//	//  |
	//	a2=expr //  )
	//	TOK_RPAREN;
	public TermElements getTermAccess() {
		return (pTerm != null) ? pTerm : (pTerm = new TermElements());
	}
	
	public ParserRule getTermRule() {
		return getTermAccess().getRule();
	}

	//cardinality_op:
	//	"cardinality" local_variable;
	public Cardinality_opElements getCardinality_opAccess() {
		return (pCardinality_op != null) ? pCardinality_op : (pCardinality_op = new Cardinality_opElements());
	}
	
	public ParserRule getCardinality_opRule() {
		return getCardinality_opAccess().getRule();
	}

	//empty_op:
	//	"empty" local_variable;
	public Empty_opElements getEmpty_opAccess() {
		return (pEmpty_op != null) ? pEmpty_op : (pEmpty_op = new Empty_opElements());
	}
	
	public ParserRule getEmpty_opRule() {
		return getEmpty_opAccess().getRule();
	}

	//not_empty_op:
	//	"not_empty" local_variable;
	public Not_empty_opElements getNot_empty_opAccess() {
		return (pNot_empty_op != null) ? pNot_empty_op : (pNot_empty_op = new Not_empty_opElements());
	}
	
	public ParserRule getNot_empty_opRule() {
		return getNot_empty_opAccess().getRule();
	}

	//instance_start_segment:
	//	root_element_label array_refs?;
	public Instance_start_segmentElements getInstance_start_segmentAccess() {
		return (pInstance_start_segment != null) ? pInstance_start_segment : (pInstance_start_segment = new Instance_start_segmentElements());
	}
	
	public ParserRule getInstance_start_segmentRule() {
		return getInstance_start_segmentAccess().getRule();
	}

	////  (
	////    array_refs
	////  )?
	//instance_access_segment:
	//	element_label;
	public Instance_access_segmentElements getInstance_access_segmentAccess() {
		return (pInstance_access_segment != null) ? pInstance_access_segment : (pInstance_access_segment = new Instance_access_segmentElements());
	}
	
	public ParserRule getInstance_access_segmentRule() {
		return getInstance_access_segmentAccess().getRule();
	}

	////(TOK_DOT
	//// instance_access_segment
	////)*
	//member_access:
	//	instance_start_segment;
	public Member_accessElements getMember_accessAccess() {
		return (pMember_access != null) ? pMember_access : (pMember_access = new Member_accessElements());
	}
	
	public ParserRule getMember_accessRule() {
		return getMember_accessAccess().getRule();
	}

	////member_access
	//param_data_access:
	//	"param" TOK_DOT;
	public Param_data_accessElements getParam_data_accessAccess() {
		return (pParam_data_access != null) ? pParam_data_access : (pParam_data_access = new Param_data_accessElements());
	}
	
	public ParserRule getParam_data_accessRule() {
		return getParam_data_accessAccess().getRule();
	}

	////member_access
	//event_data_access:
	//	"rcvd_evt" TOK_DOT;
	public Event_data_accessElements getEvent_data_accessAccess() {
		return (pEvent_data_access != null) ? pEvent_data_access : (pEvent_data_access = new Event_data_accessElements());
	}
	
	public ParserRule getEvent_data_accessRule() {
		return getEvent_data_accessAccess().getRule();
	}

	//array_refs:
	//	(TOK_LSQBR a1+=expr TOK_RSQBR)+;
	public Array_refsElements getArray_refsAccess() {
		return (pArray_refs != null) ? pArray_refs : (pArray_refs = new Array_refsElements());
	}
	
	public ParserRule getArray_refsRule() {
		return getArray_refsAccess().getRule();
	}

	////|
	////  ("rcvd_evt" TOK_DOT) =>
	////  event_data_access
	////|
	////  bridge_expr
	////|
	////  ("param" TOK_DOT) =>
	////  param_data_access
	////|
	////  TOK_QMARK
	//rval: //  ( TOK_DOUBLECOLON )=>
	////  TOK_DOUBLECOLON
	////  function_invocation
	////|
	////  ( transform_ib_invocation )=>
	////  transform_ib_invocation
	////|
	////  ( invocation_expr )=>
	////  invocation_expr
	////|
	////  ( enumerator_access )=>
	////  enumerator_access
	////|
	////  member_access
	////|
	//	constant_value;
	public RvalElements getRvalAccess() {
		return (pRval != null) ? pRval : (pRval = new RvalElements());
	}
	
	public ParserRule getRvalRule() {
		return getRvalAccess().getRule();
	}

	//constant_value: //    TOK_FRACTION
	////  |
	//	TOK_NUMBER | TOK_STRING | "true" | "false";
	public Constant_valueElements getConstant_valueAccess() {
		return (pConstant_value != null) ? pConstant_value : (pConstant_value = new Constant_valueElements());
	}
	
	public ParserRule getConstant_valueRule() {
		return getConstant_valueAccess().getRule();
	}

	//comparison_operator:
	//	"==" | TOK_NOTEQUAL | TOK_LESSTHAN | TOK_LE | TOK_GT | TOK_GE;
	public Comparison_operatorElements getComparison_operatorAccess() {
		return (pComparison_operator != null) ? pComparison_operator : (pComparison_operator = new Comparison_operatorElements());
	}
	
	public ParserRule getComparison_operatorRule() {
		return getComparison_operatorAccess().getRule();
	}

	//plus_or_minus:
	//	TOK_PLUS | TOK_MINUS;
	public Plus_or_minusElements getPlus_or_minusAccess() {
		return (pPlus_or_minus != null) ? pPlus_or_minus : (pPlus_or_minus = new Plus_or_minusElements());
	}
	
	public ParserRule getPlus_or_minusRule() {
		return getPlus_or_minusAccess().getRule();
	}

	////  |
	////    TOK_MOD
	//mult_op:
	//	TOK_TIMES | TOK_DIV;
	public Mult_opElements getMult_opAccess() {
		return (pMult_op != null) ? pMult_op : (pMult_op = new Mult_opElements());
	}
	
	public ParserRule getMult_opRule() {
		return getMult_opAccess().getRule();
	}

	//terminal TOK_COLON:
	//	":";
	public TerminalRule getTOK_COLONRule() {
		return (tTOK_COLON != null) ? tTOK_COLON : (tTOK_COLON = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "TOK_COLON"));
	} 

	//terminal TOK_DOUBLECOLON:
	//	"::";
	public TerminalRule getTOK_DOUBLECOLONRule() {
		return (tTOK_DOUBLECOLON != null) ? tTOK_DOUBLECOLON : (tTOK_DOUBLECOLON = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "TOK_DOUBLECOLON"));
	} 

	//terminal TOK_COMMA:
	//	",";
	public TerminalRule getTOK_COMMARule() {
		return (tTOK_COMMA != null) ? tTOK_COMMA : (tTOK_COMMA = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "TOK_COMMA"));
	} 

	//terminal TOK_DIV:
	//	"/";
	public TerminalRule getTOK_DIVRule() {
		return (tTOK_DIV != null) ? tTOK_DIV : (tTOK_DIV = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "TOK_DIV"));
	} 

	//terminal TOK_DOT:
	//	".";
	public TerminalRule getTOK_DOTRule() {
		return (tTOK_DOT != null) ? tTOK_DOT : (tTOK_DOT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "TOK_DOT"));
	} 

	//terminal TOK_EQUAL:
	//	"=";
	public TerminalRule getTOK_EQUALRule() {
		return (tTOK_EQUAL != null) ? tTOK_EQUAL : (tTOK_EQUAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "TOK_EQUAL"));
	} 

	////terminal TOK_FRACTION: ('0'..'9')+'/';
	//terminal TOK_GE:
	//	">=";
	public TerminalRule getTOK_GERule() {
		return (tTOK_GE != null) ? tTOK_GE : (tTOK_GE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "TOK_GE"));
	} 

	//TOK_GENERAL_NAME:
	//	ID;
	public TOK_GENERAL_NAMEElements getTOK_GENERAL_NAMEAccess() {
		return (pTOK_GENERAL_NAME != null) ? pTOK_GENERAL_NAME : (pTOK_GENERAL_NAME = new TOK_GENERAL_NAMEElements());
	}
	
	public ParserRule getTOK_GENERAL_NAMERule() {
		return getTOK_GENERAL_NAMEAccess().getRule();
	}

	//terminal TOK_GT:
	//	">";
	public TerminalRule getTOK_GTRule() {
		return (tTOK_GT != null) ? tTOK_GT : (tTOK_GT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "TOK_GT"));
	} 

	////         TOK_ID: ID;
	//terminal TOK_LE:
	//	"<=";
	public TerminalRule getTOK_LERule() {
		return (tTOK_LE != null) ? tTOK_LE : (tTOK_LE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "TOK_LE"));
	} 

	//terminal TOK_LESSTHAN:
	//	"<";
	public TerminalRule getTOK_LESSTHANRule() {
		return (tTOK_LESSTHAN != null) ? tTOK_LESSTHAN : (tTOK_LESSTHAN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "TOK_LESSTHAN"));
	} 

	//terminal TOK_LPAREN:
	//	"(";
	public TerminalRule getTOK_LPARENRule() {
		return (tTOK_LPAREN != null) ? tTOK_LPAREN : (tTOK_LPAREN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "TOK_LPAREN"));
	} 

	//terminal TOK_LSQBR:
	//	"[";
	public TerminalRule getTOK_LSQBRRule() {
		return (tTOK_LSQBR != null) ? tTOK_LSQBR : (tTOK_LSQBR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "TOK_LSQBR"));
	} 

	//terminal TOK_MINUS:
	//	"-";
	public TerminalRule getTOK_MINUSRule() {
		return (tTOK_MINUS != null) ? tTOK_MINUS : (tTOK_MINUS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "TOK_MINUS"));
	} 

	////terminal TOK_MOD: '\';
	//terminal TOK_NOTEQUAL:
	//	"!=";
	public TerminalRule getTOK_NOTEQUALRule() {
		return (tTOK_NOTEQUAL != null) ? tTOK_NOTEQUAL : (tTOK_NOTEQUAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "TOK_NOTEQUAL"));
	} 

	//TOK_NUMBER:
	//	INT;
	public TOK_NUMBERElements getTOK_NUMBERAccess() {
		return (pTOK_NUMBER != null) ? pTOK_NUMBER : (pTOK_NUMBER = new TOK_NUMBERElements());
	}
	
	public ParserRule getTOK_NUMBERRule() {
		return getTOK_NUMBERAccess().getRule();
	}

	//terminal TOK_PLUS:
	//	"+";
	public TerminalRule getTOK_PLUSRule() {
		return (tTOK_PLUS != null) ? tTOK_PLUS : (tTOK_PLUS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "TOK_PLUS"));
	} 

	//terminal TOK_QMARK:
	//	"\"";
	public TerminalRule getTOK_QMARKRule() {
		return (tTOK_QMARK != null) ? tTOK_QMARK : (tTOK_QMARK = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "TOK_QMARK"));
	} 

	////terminal TOK_RELID: 'R' INT;
	//terminal TOK_RPAREN:
	//	")";
	public TerminalRule getTOK_RPARENRule() {
		return (tTOK_RPAREN != null) ? tTOK_RPAREN : (tTOK_RPAREN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "TOK_RPAREN"));
	} 

	//terminal TOK_RSQBR:
	//	"]";
	public TerminalRule getTOK_RSQBRRule() {
		return (tTOK_RSQBR != null) ? tTOK_RSQBR : (tTOK_RSQBR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "TOK_RSQBR"));
	} 

	//terminal TOK_STRING:
	//	"\"" "a".."z"* "\"";
	public TerminalRule getTOK_STRINGRule() {
		return (tTOK_STRING != null) ? tTOK_STRING : (tTOK_STRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "TOK_STRING"));
	} 

	//terminal TOK_TIMES:
	//	"*";
	public TerminalRule getTOK_TIMESRule() {
		return (tTOK_TIMES != null) ? tTOK_TIMES : (tTOK_TIMES = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "TOK_TIMES"));
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
