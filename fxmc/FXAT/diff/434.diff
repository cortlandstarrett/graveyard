Index: arc/fx_domain_debug_utility.arc
===================================================================
--- arc/fx_domain_debug_utility.arc	(revision 394)
+++ arc/fx_domain_debug_utility.arc	(revision 434)
@@ -7,7 +7,7 @@
 .function fx_generate_domain_debug_utility_file_prologue
 .param inst_ref te_c
 .param boolean p_gen_decl
-    .assign file_name = "${te_c.Name}_dbg_utility_full"
+    .assign file_name = te_c.Name + "_dbg_utility_full"
     .select any te_file from instances of TE_FILE
     .select any te_sys from instances of TE_SYS
 /******************************************************************************
@@ -41,7 +41,7 @@
 .param boolean p_gen_decl
     .//
     .if (p_gen_decl )
-    .assign file_name = "${te_c.Name}_dbg_utility_full"
+    .assign file_name = te_c.Name + "_dbg_utility_full"
     .select any te_file from instances of TE_FILE;
 #ifdef __cplusplus
 }
@@ -53,30 +53,215 @@
 .end function
 .//
 .//
+.//--033:20140609 Add Start (saitou) 
+.//============================================================================
+.function fx_get_dbgshow_func_name .// string
+.param inst_ref te_c
+.param inst_ref te_class
+  .//
+  .assign attr_result = ( te_c.Name + "_dbgShow_" ) + te_class.Key_Lett
+.end function
+.//========================================
+.function fx_generate_dbgshow_func
+.param inst_ref te_c
+.param inst_ref te_class
+  .//
+  .assign if_params = ""
+  .assign func_params = ""
+  .assign show_params = ""
+  .//
+  .select any id1 related by te_class->O_OBJ[R2019]->O_ID[R104] where ( selected.Oid_ID == 0 )
+  .if( not_empty id1 )
+    .//
+    .// make function's arguments and "if" params from identity attrs
+    .//
+    .select many id1_te_attrs related by id1->O_OIDA[R105]->O_ATTR[R105]->TE_ATTR[R2033]
+    .for each id1_te_attr in id1_te_attrs
+      .if( "${func_params}" != "" )
+        .assign func_params = func_params + ", "
+      .end if
+      .assign func_params = func_params + ( id1_te_attr.GeneratedType + ( " arg_" + id1_te_attr.GeneratedName ) )
+      .//
+      .if( "${if_params}" != "" )
+        .assign if_params = if_params + " && "
+      .end if
+      .assign if_params = if_params + (((( "( arg_" + id1_te_attr.GeneratedName ) + " == ptr->" ) + id1_te_attr.GeneratedName ) + ")" )
+      .//
+    .end for
+    .//
+    .// make show attrs
+    .//
+    .select many te_attrs related by te_class->TE_ATTR[R2061]
+    .for each te_attr in te_attrs
+      .assign show_param = ""
+      .select one o_ratter related by te_attr->O_ATTR[R2033]->O_RATTR[R106]
+      .if( empty o_ratter )
+.//      .assign show_params = show_params + "printf(""${te_attr.GeneratedName}: normal = %d\\n"", ptr->${te_attr.GeneratedName} );"
+        .assign show_params = show_params + ((( "    printf(""${te_attr.GeneratedName}: normal = %d" ) + "\" ) + "n"", ptr->${te_attr.GeneratedName} );\n" )
+        .// "
+      .else
+        .assign prn_rels = ""
+        .select many r_rels related by o_ratter->O_REF[R108]->R_RGO[R111]->R_OIR[R203]->R_REL[R201]
+        .for each r_rel in r_rels
+          .if ( "${prn_rels}" != "" )
+            .assign prn_rels = prn_rels + ", "
+          .end if
+          .assign prn_rels = prn_rels + "R${r_rel.Numb}"
+        .end for
+        .assign prn_rels = "{" + ( prn_rels + "}" )
+.//        .assign show_params = show_params + "  printf(""${te_attr.GeneratedName}: ${prn_rels} = %d\\n"", ptr->${te_attr.GeneratedName} );\n"
+        .assign show_params = show_params + (((((((( "    printf(""" + te_attr.GeneratedName ) + ": " ) + prn_rels ) + " = %d" ) + "\" ) + "n"", ptr->" ) + te_attr.GeneratedName ) + ");\n" )
+        .// "
+      .end  if
+    .end for
+    .//
+    .// make show state detail
+    .//
+    .assign show_state = ""
+    .select any te_state related by te_class->TE_SM[R2072]->SM_SM[R2043]->SM_STATE[R501]->TE_STATE[R2037]
+    .if( not_empty te_state )
+      .invoke state_tbl_name = fx_get_state_detail_table_name(te_c, te_class)
+      .invoke state_tbl_type = fx_get_state_detail_type( te_c )
+      .//
+      .assign show_state = show_state + "    {\n"
+      .assign show_state = show_state + (((( "      const " + state_tbl_type.result ) + "* pStateDetail = getStateDetail( " ) + state_tbl_name.result ) + ", ptr->current_state );\n" )
+      .assign show_state = show_state + "      if( pStateDetail ){\n"
+      .assign show_state = show_state + ((("        printf(""CurrentState : %s = %d" ) + "\" ) + "n"", pStateDetail->stName, pStateDetail->stNum);\n" )
+      .// "
+      .assign show_state = show_state + "      }\n"
+      .assign show_state = show_state + "    }\n"
+    .end if
+    .//
+    .//
+    .select any te_set from instances of TE_SET
+    .invoke class_ext = GetFixedSizeClassExtentInfo(te_class)
+    .invoke func_name = fx_get_dbgshow_func_name(te_c, te_class)
+    .//
+
+void ${func_name.result}(${func_params})
+{
+  ${te_class.GeneratedName}* ptr = 0;
+  ${te_set.iterator_class_name} ite;
+
+  ${te_set.iterator_reset}(&ite,&${class_ext.result}.active);
+  while ( (ptr=(${te_class.GeneratedName}*)(${te_set.iterator_next}(&ite))) != 0 ){
+  .if ("${if_params}" != "" )
+    if ( (${if_params}) ){
+      break;
+    }
+  .else
+    // identity attr none.
+    break;
+  .end if
+  }
+  if ( ptr == 0 ){
+    printf("None!\n");
+  } else {
+    /* show information */
+${show_params}
+${show_state}
+  }
+}
+  .else
+    .// no identity. not create.
+    .print "[myDbg] [${te_class.Key_Lett}] no identity. not create."
+  .end if
+  .//
+.end function
+.//========================================
+.function fx_get_showinst_func_name .// string
+.param inst_ref te_c
+.param inst_ref te_class
+  .//
+  .assign attr_result = ( te_c.Name + "_dbgFullShowInst_" ) + te_class.Key_Lett
+.end function
+.//========================================
+.function fx_generate_showinst_func
+.param inst_ref te_c
+.param inst_ref te_class
+  .//
+  .assign prn_ids = ""
+  .assign prn_literal = ""
+  .assign prn_params = ""
+  .select any id1 related by te_class->O_OBJ[R2019]->O_ID[R104] where ( selected.Oid_ID == 0 )
+  .if( not_empty id1 )
+    .select many o_attrs related by id1->O_OIDA[R105]->O_ATTR[R105]
+    .for each o_attr in o_attrs
+      .if( "${prn_literal}" != "" )
+        .assign prn_literal = prn_literal + ", "
+      .end if
+      .assign prn_literal = prn_literal + ( o_attr.Name + ":%d" )
+      .assign prn_params = prn_params + ( ", " + ( "ptr->" + o_attr.Name ) )
+      .//
+      .//.assign prn_ids = ((( "printf("" " + prn_literal ) + "\\n """ ) + prn_params ) + " );"
+      .assign prn_ids = (((( "printf("" " + prn_literal ) + "\" ) + "n""" ) + prn_params ) + " );"
+      .// "
+    .end for
+  .end if
+  .//
+  .select any te_instance from instances of TE_INSTANCE
+  .select any te_set from instances of TE_SET
+  .invoke class_ext = GetFixedSizeClassExtentInfo(te_class)
+  .invoke func_name = fx_get_showinst_func_name(te_c, te_class)
+
+void ${func_name.result}(void)
+{
+  ${te_class.GeneratedName}* ptr = 0;
+  ${te_set.iterator_class_name} ite;
+  int instNo = ${te_set.element_count}(&${class_ext.result}.active);
+  
+  printf("Class Set Recovery Unit Total Instance No = %d\n",instNo);
+  ${te_set.iterator_reset}(&ite,&${class_ext.result}.active);
+  while ( (ptr=(${te_class.GeneratedName}*)(${te_set.iterator_next}(&ite))) != 0 ){
+    printf("[Addr] %p\n", ptr);
+.//    printf(" ${prn_literal}\n"${prn_params});
+  .if( "${prn_ids}" != "" )
+    ${prn_ids}
+  .end if
+  }
+}
+  .//
+.end function
+.//========================================
+.function fx_generate_show_debug_funcs
+.param inst_ref te_c
+  .//
+  .select many te_classes related by te_c->TE_CLASS[R2064] where ( not selected.ExcludeFromGen )
+  .for each te_class in te_classes
+    .invoke r = fx_generate_showinst_func(te_c, te_class)
+${r.body}
+    .invoke r = fx_generate_dbgshow_func(te_c, te_class)
+${r.body}
+  .end for
+  .//
+.end function
+.//============================================================================
+.//--033:20140609 Add End (saitou) 
 .//--028:20140415 Add Start (saitou) 
 .//============================================================================
 .// 状態詳細テーブル生成
 .//   { 状態ID(配列index), 状態番号, 状態名 }
 .//============================================================================
-.function fx_get_state_detail_type
-.param inst_ref te_c  // te_c
+.function fx_get_state_detail_type .// string
+.param inst_ref te_c
   .//
-  .assign attr_result = "${te_c.Name}_StateDetail_t"
+  .assign attr_result = te_c.Name + "_StateDetail_t"
 .end function
 .//========================================
-.function fx_get_state_detail_table_name
-.param inst_ref te_c  		// te_c
-.param inst_ref te_class	// te_class
+.function fx_get_state_detail_table_name .// string
+.param inst_ref te_c
+.param inst_ref te_class
   .//
-  .assign attr_result = ""
+  .assign table_name = ""
   .select many te_states related by te_class->TE_SM[R2072]->SM_SM[R2043]->SM_STATE[R501]->TE_STATE[R2037]
   .if( not_empty te_states )
-    .assign attr_result = ( "${te_c.Name}" + "_" ) + ( "${te_class.Key_Lett}" + "_StateDetail" )
+    .assign table_name = ( te_c.Name + "_" ) + ( te_class.Key_Lett + "_StateDetail" )
   .end if
+  .assign attr_result = table_name
 .end function
 .//========================================
 .function fx_generate_state_detail_type
-.param inst_ref te_c  // te_c
+.param inst_ref te_c
   .//
   .invoke stDetailTblType = fx_get_state_detail_type( te_c )
   .//
@@ -89,8 +274,8 @@
 .end function
 .//========================================
 .function fx_generate_state_detail_table
-.param inst_ref te_c  		// te_c
-.param inst_ref te_class	// te_class
+.param inst_ref te_c
+.param inst_ref te_class
   .//
   .invoke type = fx_get_state_detail_type( te_c )
   .invoke tableName = fx_get_state_detail_table_name( te_c, te_class )
@@ -118,7 +303,7 @@
 .end function
 .//========================================
 .function fx_generate_state_detail
-.param inst_ref te_c	// te_c
+.param inst_ref te_c
   .//
   .invoke r = fx_generate_state_detail_type( te_c )
 ${r.body}
@@ -135,25 +320,26 @@
 .// イベント詳細テーブル生成
 .//   { イベントID(配列index), イベント略称, イベント名 }
 .//============================================================================
-.function fx_get_event_detail_type
-.param inst_ref te_c  // te_c
+.function fx_get_event_detail_type .// string
+.param inst_ref te_c
   .//
-  .assign attr_result = "${te_c.Name}_EventDetail_t"
+  .assign attr_result = te_c.Name + "_EventDetail_t"
 .end function
 .//========================================
-.function fx_get_event_detail_table_name
-.param inst_ref te_c  		// te_c
-.param inst_ref te_class	// te_class
+.function fx_get_event_detail_table_name .// string
+.param inst_ref te_c
+.param inst_ref te_class
   .//
-  .assign attr_result = ""
+  .assign table_name = ""
   .select many te_evts related by te_class->TE_SM[R2072]->TE_EVT[R2071] where ( selected.Used )
   .if( not_empty te_evts )
-    .assign attr_result = ( "${te_c.Name}" + "_" ) + ( "${te_class.Key_Lett}" + "_EventDetail" )
+    .assign table_name = ( te_c.Name + "_" ) + ( te_class.Key_Lett + "_EventDetail" )
   .end if
+  .assign attr_result = table_name
 .end function
 .//========================================
 .function fx_generate_event_detail_type
-.param inst_ref te_c  // te_c
+.param inst_ref te_c
   .//
   .invoke eventDetailTblType = fx_get_event_detail_type( te_c )
   .//
@@ -166,8 +352,8 @@
 .end function
 .//========================================
 .function fx_generate_event_detail_table
-.param inst_ref te_c  		// te_c
-.param inst_ref te_class	// te_class
+.param inst_ref te_c
+.param inst_ref te_class
   .//
   .invoke type = fx_get_event_detail_type( te_c )
   .invoke tableName = fx_get_event_detail_table_name( te_c, te_class )
@@ -196,7 +382,7 @@
 .end function
 .//========================================
 .function fx_generate_event_detail
-.param inst_ref te_c	// te_c
+.param inst_ref te_c
   .//
   .invoke r = fx_generate_event_detail_type( te_c )
 ${r.body}
@@ -215,20 +401,20 @@
 .//   { クラスID, クラス名, 状態詳細テーブル, イベント詳細テーブル }
 .//============================================================================
 .//============================================================================
-.function fx_get_SEM_detail_type
-.param inst_ref te_c  // te_c
+.function fx_get_SEM_detail_type .// string
+.param inst_ref te_c
   .//
-  .assign attr_result = "${te_c.Name}_SEM_Detail_t"
+  .assign attr_result = te_c.Name + "_SEM_Detail_t"
 .end function
 .//========================================
-.function fx_get_SEM_detail_table_name
-.param inst_ref te_c  		// te_c
+.function fx_get_SEM_detail_table_name .// string
+.param inst_ref te_c
   .//
-  .assign attr_result = ( "${te_c.Name}" + "_" ) + ( "SEM_DetailTable" )
+  .assign attr_result = te_c.Name + "_SEM_DetailTable"
 .end function
 .//========================================
 .function fx_generate_SEM_detail_type
-.param inst_ref te_c  // te_c
+.param inst_ref te_c
   .//
   .invoke stateDetailType = fx_get_state_detail_type( te_c )
   .invoke eventDetailType = fx_get_event_detail_type( te_c )
@@ -244,7 +430,7 @@
 .end function
 .//========================================
 .function fx_generate_SEM_detail_table
-.param inst_ref te_c  		// te_c
+.param inst_ref te_c
   .//
   .invoke type = fx_get_SEM_detail_type( te_c )
   .invoke tableName = fx_get_SEM_detail_table_name( te_c )
@@ -258,12 +444,12 @@
   .select many te_classes related by te_c->TE_CLASS[R2064] where ( not selected.ExcludeFromGen )
   .for each te_class in te_classes
     .invoke stateTableName = fx_get_state_detail_table_name( te_c, te_class )
-    .assign stTblName = "${stateTableName.result}"
+    .assign stTblName = stateTableName.result
     .if( "" == "${stTblName}" )
       .assign stTblName = "NULL"
     .end if
     .invoke eventTableName = fx_get_event_detail_table_name( te_c, te_class )
-    .assign evtTblName = "${eventTableName.result}"
+    .assign evtTblName = eventTableName.result
     .if( "" == "${evtTblName}" )
       .assign evtTblName = "NULL"
     .end if
@@ -281,7 +467,7 @@
 .end function
 .//========================================
 .function fx_generate_SEM_detail
-.param inst_ref te_c  		// te_c
+.param inst_ref te_c
   .//
   .invoke r = fx_generate_SEM_detail_type( te_c )
 ${r.body}
@@ -295,7 +481,7 @@
 .// イベント垂れ流し関数生成
 .//============================================================================
 .function fx_generate_func_getStateDetail
-.param inst_ref te_c		// te_c
+.param inst_ref te_c
   .//
   .invoke type = fx_get_state_detail_type( te_c )
   .//
@@ -321,7 +507,7 @@
 .end function
 .//========================================
 .function fx_generate_func_getEventDetail
-.param inst_ref te_c		// te_c
+.param inst_ref te_c
   .//
   .invoke type = fx_get_event_detail_type( te_c )
   .//
@@ -347,7 +533,7 @@
 .end function
 .//========================================
 .function fx_generate_func_getSEMDetail
-.param inst_ref te_c		// te_c
+.param inst_ref te_c
   .//
   .invoke type      = fx_get_SEM_detail_type( te_c )
   .invoke tableName = fx_get_SEM_detail_table_name( te_c )
@@ -371,7 +557,7 @@
 .end function
 .//========================================
 .function fx_generate_func_ShowEventInfo
-.param inst_ref te_c		// te_c
+.param inst_ref te_c
   .//
   .invoke sem_type = fx_get_SEM_detail_type( te_c )
   .invoke sem_tbl  = fx_get_SEM_detail_table_name( te_c )
@@ -379,7 +565,7 @@
   .invoke event_detail_type = fx_get_event_detail_type( te_c )
   .//
 typedef int (*RedirFuncP)(const char*, ... );
-static RedirFuncP gpRedirFunc = printf; // // 初期値としてとりあえずprintfを登録しておく
+static RedirFuncP gpRedirFunc = printf; // 初期値としてとりあえずprintfを登録しておく
 
 // イベント垂れ流しの出力先を登録。戻り値で現在登録されている関数のアドレスを返す
 void* ${te_c.Name}_dbg_SetRedirFunc( void* pNewRedirFunc )
@@ -434,7 +620,7 @@
 .end function
 .//========================================
 .function fx_generate_printEventFunc
-.param inst_ref te_c		// te_c
+.param inst_ref te_c
   .//
   .invoke r = fx_generate_func_getStateDetail( te_c )
 ${r.body}
@@ -456,7 +642,7 @@
   .if (te_c.Name == "") then
       .print "unnamed component te_c ID:${te_c.ID}"
   .else 
-    .assign file_name = "${te_c.Name}_dbg_utility_full"
+    .assign file_name = te_c.Name + "_dbg_utility_full"
     .//
     .// source file
     .invoke prologue = fx_generate_domain_debug_file_prologue(te_c, false)
@@ -465,6 +651,9 @@
     .invoke event_detail = fx_generate_event_detail( te_c )
     .invoke sem_detail = fx_generate_SEM_detail( te_c )
     .invoke prnEvtFunc = fx_generate_printEventFunc( te_c )
+.//--033:20140609 Add Start (saitou) 
+    .invoke show_debug_funcs = fx_generate_show_debug_funcs( te_c )
+.//--033:20140609 Add End (saitou) 
     .//
 ${prologue.body}
     .// include file
@@ -480,6 +669,9 @@
 ${event_detail.body}
 ${sem_detail.body}
 ${prnEvtFunc.body}
+.//--033:20140609 Add Start (saitou) 
+${show_debug_funcs.body}
+.//--033:20140609 Add End (saitou) 
     .//
     .emit to file "${te_file.domain_source_path}/${file_name}.${te_file.src_file_ext}"
     .//
