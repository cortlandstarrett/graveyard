-- BP 7.1.6 content: ModelClass syschar: 3 persistence-version: 7.1.6

INSERT INTO O_OBJ
	VALUES ("c6f29e4c-6e1b-4b20-9422-3252981294c1",
	'Verify Set Recovery Unit',
	528,
	'V_SR_SRU',
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_TFR
	VALUES ("2d774738-d35d-4e13-9c19-2c76fa947294",
	"c6f29e4c-6e1b-4b20-9422-3252981294c1",
	'UT',
	'',
	"ba5eda7a-def5-0000-0000-000000000000",
	0,
	'if (param.testCase == 1000)

	// SRUを複数生成したときに正しくChainができることの確認
	// next to をたどってアクセスできることの確認

	create object instance dummyEJob of J_EJOB;
	create object instance dummyJob of J_JOB;
	create object instance dummSet of V_SSI;
	dummyJob.jobID = 1;
	relate dummyJob to dummyEJob across R104;

	jobID = dummyJob.jobID;
	setID = dummSet.setID;
	setNum = 1;
	divideSetNum = 1;
	unitNum = 10;

	i = 0;
	while (i < unitNum)
		createdSetUnitID = SR_SRU::createInstance(jobID:jobID);
		select any aSetUnit from instances of SR_SRU
			where (selected.ID == createdSetUnitID);
		aSetUnit.jobID = jobID;
		aSetUnit.setID = setID;
		aSetUnit.setNum = setNum;
		aSetUnit.divideSetNum = divideSetNum + i;
		i = i + 1;
	end while;
	select many setRecoveryUnits from instances of SR_SRU;
	FER::assert(expression : cardinality setRecoveryUnits == unitNum);

	select any aSetRecoveryUnit from instances of SR_SRU
		where (selected.divideSetNum == divideSetNum);

	aNextRecoveryUnit = aSetRecoveryUnit;
	while (not_empty aNextRecoveryUnit)
		select one aNextRecoveryUnit related by aSetRecoveryUnit->SR_SRU[R706.''is next to''];
		SR_SRU::delete(id : aSetRecoveryUnit.ID);
		if (not_empty aNextRecoveryUnit)
			aSetRecoveryUnit = aNextRecoveryUnit;
		end if;
	end while;
	select many setRecoveryUnits from instances of SR_SRU;
	FER::assert(expression : cardinality setRecoveryUnits == 0);

elif (param.testCase == 1001)

	// SRUを複数生成したときに正しくChainができることの確認
	// previous to をたどってアクセスできることの確認

	create object instance dummyEJob of J_EJOB;
	create object instance dummyJob of J_JOB;
	create object instance dummSet of V_SSI;
	dummyJob.jobID = 1;
	relate dummyJob to dummyEJob across R104;

	jobID = dummyJob.jobID;
	setID = dummSet.setID;
	setNum = 1;
	divideSetNum = 1;
	unitNum = 10;

	i = 0;
	while (i < unitNum)
		createdSetUnitID = SR_SRU::createInstance(jobID:jobID);
		select any aSetUnit from instances of SR_SRU
			where (selected.ID == createdSetUnitID);
		aSetUnit.jobID = jobID;
		aSetUnit.setID = setID;
		aSetUnit.setNum = setNum;
		aSetUnit.divideSetNum = divideSetNum + i;
		i = i + 1;
	end while;

	select many setRecoveryUnits from instances of SR_SRU;
	FER::assert(expression : cardinality setRecoveryUnits == unitNum);

	select any aSetRecoveryUnit from instances of SR_SRU
		where (selected.divideSetNum == unitNum);

	aPrevRecoveryUnit = aSetRecoveryUnit;
	while (not_empty aPrevRecoveryUnit)
		select one aPrevRecoveryUnit related by aSetRecoveryUnit->SR_SRU[R706.''is previous to''];
		SR_SRU::delete(id : aSetRecoveryUnit.ID);
		if (not_empty aPrevRecoveryUnit)
			aSetRecoveryUnit = aPrevRecoveryUnit;
		end if;
	end while;
	select many setRecoveryUnits from instances of SR_SRU;
	FER::assert(expression : cardinality setRecoveryUnits == 0);

elif (param.testCase == 1002)

	// ひとつのSRUに10シート追加してRecoverySheetが10できることを確認
	// SRUを削除したときにRecoverySheetが消滅していることを確認

	create object instance dummyEJob of J_EJOB;
	create object instance dummyJob of J_JOB;
	create object instance dummSet of V_SSI;
	dummyJob.jobID = 1;
	relate dummyJob to dummyEJob across R104;

	jobID = dummyJob.jobID;
	setID = dummSet.setID;
	setNum = 1;
	divideSetNum = 1;
	sheetNum = 10;

	createdSetUnitID = SR_SRU::createInstance(jobID:jobID);
	select any aSetRecoveryUnit from instances of SR_SRU
		where (selected.ID == createdSetUnitID);
	aSetRecoveryUnit.jobID = jobID;
	aSetRecoveryUnit.setID = setID;
	aSetRecoveryUnit.setNum = setNum;
	aSetRecoveryUnit.divideSetNum = divideSetNum;

	select any aSetRecoveryUnit from instances of SR_SRU;
	i = sheetNum;
	while (i > 0)
		create object instance aSheet of P_PSHT;
		relate aSheet to dummyEJob across R429;
		SR_SRU::addSheet(sheetID : aSheet.ID);
		i = i - 1;
	end while;

	select many recoverySheets related by aSetRecoveryUnit->SR_RSHT[R707];
	FER::assert(expression : cardinality recoverySheets == sheetNum);

	SR_SRU::delete(id : aSetRecoveryUnit.ID);
	select many recoverySheets related by aSetRecoveryUnit->SR_RSHT[R707];
	FER::assert(expression : cardinality recoverySheets == 0);

elif (param.testCase == 1003)

	// 2つ目のSRUに10シート追加
	// 3つ目のSRUを追加ご、2つめのSRUを削除したとき、RecoverySheetが消滅していることを確認

	create object instance dummyEJob of J_EJOB;
	create object instance dummyJob of J_JOB;
	create object instance dummSet of V_SSI;
	dummyJob.jobID = 1;
	relate dummyJob to dummyEJob across R104;

	jobID = dummyJob.jobID;
	setID = dummSet.setID;
	setNum = 1;
	divideSetNum = 1;
	sheetNum = 10;

	createdSetUnitID = SR_SRU::createInstance(jobID:jobID);
	select any aSetUnit from instances of SR_SRU
		where (selected.ID == createdSetUnitID);
	aSetUnit.jobID = jobID;
	aSetUnit.setID = setID;
	aSetUnit.setNum = setNum;
	aSetUnit.divideSetNum = divideSetNum;

	createdSetUnitID = SR_SRU::createInstance(jobID:jobID);
	select any aSetUnit from instances of SR_SRU
		where (selected.ID == createdSetUnitID);
	aSetUnit.jobID = jobID;
	aSetUnit.setID = setID;
	aSetUnit.setNum = setNum;
	aSetUnit.divideSetNum = divideSetNum+1;

	select any aSetRecoveryUnit from instances of SR_SRU 
		where (selected.divideSetNum == divideSetNum+1);
	targetID = aSetRecoveryUnit.ID;
	i = sheetNum;
	while (i > 0)
		create object instance aSheet of P_PSHT;
		relate aSheet to dummyEJob across R429;
		SR_SRU::addSheet(sheetID : aSheet.ID);
		i = i - 1;
	end while;

	createdSetUnitID = SR_SRU::createInstance(jobID:jobID);
	select any aSetUnit from instances of SR_SRU
		where (selected.ID == createdSetUnitID);
	aSetUnit.jobID = jobID;
	aSetUnit.setID = setID;
	aSetUnit.setNum = setNum;
	aSetUnit.divideSetNum = divideSetNum+2;

	select many recoverySheets related by aSetRecoveryUnit->SR_RSHT[R707];
	FER::assert(expression : cardinality recoverySheets == sheetNum);

	SR_SRU::delete(id : targetID);
	select many recoverySheets related by aSetRecoveryUnit->SR_RSHT[R707];
	FER::assert(expression : cardinality recoverySheets == 0);

elif (param.testCase == 6900)
	//SR_SRU::needCreateSetRecoveryUnitの全4通りの結果を正しく出力しているか確認
	isSetRecovery = TRUE;
	isSheetParse = TRUE;
	needCreateSRU = SR_SRU::needCreateSetRecoveryUnit(
				isSetRecovery : isSetRecovery,
				isSheetParse : isSheetParse);
	FER::assert(expression : needCreateSRU == TRUE);

	isSetRecovery = TRUE;
	isSheetParse = FALSE;
	needCreateSRU = SR_SRU::needCreateSetRecoveryUnit(
				isSetRecovery : isSetRecovery,
				isSheetParse : isSheetParse);
	FER::assert(expression : needCreateSRU == TRUE);

	isSetRecovery = FALSE;
	isSheetParse = TRUE;
	needCreateSRU = SR_SRU::needCreateSetRecoveryUnit(
				isSetRecovery : isSetRecovery,
				isSheetParse : isSheetParse);
	FER::assert(expression : needCreateSRU == TRUE);

	isSetRecovery = FALSE;
	isSheetParse = FALSE;
	needCreateSRU = SR_SRU::needCreateSetRecoveryUnit(
				isSetRecovery : isSetRecovery,
				isSheetParse : isSheetParse);
	FER::assert(expression : needCreateSRU == FALSE);

elif (param.testCase == 6901)
	//セット内の物理シートの枚数を数えるクラスオペレーション(SR_SRU::getSheetNumInPysicalSet)の追加に対するテスト
	//SR_SRUのインスタンスがない場合に0を返しているかチェック

	create object instance dummyEJob of J_EJOB;
	create object instance dummyJob of J_JOB;
	create object instance dummySet of V_SSI;
	dummyJob.jobID = 1;
	relate dummyJob to dummyEJob across R104;

	jobID = dummyJob.jobID;
	setID = dummySet.setID;
	setNum = 1;
	divideSetNum = 1;

	getSheetNum = SR_SRU::getSheetNumInPysicalSet(
				jobID : jobID,
				setID : setID,
				setNum : setNum,
				divideSetNum : divideSetNum);
	FER::assert(expression : getSheetNum == 0);

elif (param.testCase == 6902)
	//セット内の物理シートの枚数を数えるクラスオペレーション(SR_SRU::getSheetNumInPysicalSet)の追加に対するテスト		//セット内に物理シートをn枚生成し、結果が正しく返ってくるかチェックを行う（n=0）

	//テストで生成するシート枚数を設定	
	sheetNum = 0;

	create object instance dummyEJob of J_EJOB;
	create object instance dummyJob of J_JOB;
	create object instance dummySet of V_SSI;
	dummyJob.jobID = 1;
	relate dummyJob to dummyEJob across R104;

	jobID = dummyJob.jobID;
	setID = dummySet.setID;
	setNum = 1;
	divideSetNum = 1;

	createdSetUnitID = SR_SRU::createInstance(jobID:jobID);
	select any aSetRecoveryUnit from instances of SR_SRU
		where (selected.ID == createdSetUnitID);
	aSetRecoveryUnit.jobID = jobID;
	aSetRecoveryUnit.setID = setID;
	aSetRecoveryUnit.setNum = setNum;
	aSetRecoveryUnit.divideSetNum = divideSetNum;

	i = sheetNum;
	while (i  > 0)
		create object instance aSheet of P_PSHT;
		relate aSheet to dummyEJob across R429;
		SR_SRU::addSheet(sheetID : aSheet.ID);
		i = i - 1;
	end while;

	getSheetNum = SR_SRU::getSheetNumInPysicalSet(
				jobID : jobID,
				setID : setID,
				setNum : setNum,
				divideSetNum : divideSetNum);
	FER::assert(expression : getSheetNum == sheetNum);  

elif (param.testCase == 6903)
	//セット内の物理シートの枚数を数えるクラスオペレーション(SR_SRU::getSheetNumInPysicalSet)の追加に対するテスト		//セット内に物理シートをn枚生成し、結果が正しく返ってくるかチェックを行う（n=1）

	//テストで生成するシート枚数を設定	
	sheetNum = 1;

	create object instance dummyEJob of J_EJOB;
	create object instance dummyJob of J_JOB;
	create object instance dummySet of V_SSI;
	dummyJob.jobID = 1;
	relate dummyJob to dummyEJob across R104;

	jobID = dummyJob.jobID;
	setID = dummySet.setID;
	setNum = 1;
	divideSetNum = 1;

	createdSetUnitID = SR_SRU::createInstance(jobID : jobID);
	select any aSetRecoveryUnit from instances of SR_SRU
		where(selected.ID == createdSetUnitID);
	aSetRecoveryUnit.jobID = jobID;
	aSetRecoveryUnit.setID = setID;
	aSetRecoveryUnit.setNum = setNum;
	aSetRecoveryUnit.divideSetNum = divideSetNum;

	i  = sheetNum;
	while (i > 0)
		create object instance aSheet of P_PSHT;
		relate aSheet to dummyEJob across R429;
		SR_SRU::addSheet(sheetID : aSheet.ID);
		i = i - 1;
	end while;

	getSheetNum = SR_SRU::getSheetNumInPysicalSet(
				jobID :jobID,
				setID : setID,
				setNum : setNum,
				divideSetNum : divideSetNum);
	FER::assert(expression : getSheetNum == sheetNum);

elif (param.testCase == 6904)
	//セット内の物理シートの枚数を数えるクラスオペレーション(SR_SRU::getSheetNumInPysicalSet)の追加に対するテスト		//セット内に物理シートをn枚生成し、結果が正しく返ってくるかチェックを行う（n=10）

	//テストで生成するシート枚数を設定	
	sheetNum = 10;

	create object instance dummyEJob of J_EJOB;
	create object instance dummyJob of J_JOB;
	create object instance dummySet of V_SSI;
	dummyJob.jobID = 1;
	relate dummyJob to dummyEJob across R104;
	
	jobID = dummyJob.jobID;
	setID = dummySet.setID;
	setNum = 1;
	divideSetNum = 1;

	createdSetUnitID = SR_SRU::createInstance(jobID:jobID);
	select any aSetRecoveryUnit from instances of SR_SRU
		where (selected.ID == createdSetUnitID);
	aSetRecoveryUnit.jobID = jobID;
	aSetRecoveryUnit.setID = setID;
	aSetRecoveryUnit.setNum = setNum;
	aSetRecoveryUnit.divideSetNum = divideSetNum;

	i = sheetNum;
	while (i > 0)
		create object instance aSheet of P_PSHT;
		relate aSheet to dummyEJob across R429;
		SR_SRU::addSheet(sheetID : aSheet.ID);
		i = i -1;
	end while;

	getSheetNum = SR_SRU::getSheetNumInPysicalSet(
			jobID : jobID,
			setID : setID,
			setNum : setNum,
			divideSetNum : divideSetNum);
	FER::assert(expression : getSheetNum == sheetNum);

elif(param.testCase == 6905)
//DMからnextSheetReqが来たらアサートする機能の追加に対するテスト
//DMからnextSheetReqを受け取った時に正しくアサートするかチェックを行う
//（シートパースモードのP_RCSAが存在するとき）

	create object instance dummyJob of J_JOB;
	create object instance dummyEJob of J_EJOB;
	create object instance dummyNPrintStep of S_NPS;
	create object instance dummyExeOriginSet of S_EOS;
	create object instance dummyCollateSet of S_CS;
	create object instance dummyRCSetAccepter of P_RCSA;

	dummyJob.jobID = 1;
	relate dummyJob to dummyEJob across R104;
	relate dummyEJob to dummyNPrintStep across R252;
	relate dummyNPrintStep to dummyExeOriginSet across R231;
	relate dummyExeOriginSet to dummyCollateSet across R232;
	relate dummyCollateSet to dummyRCSetAccepter across R443;

	dummyRCSetAccepter.isSheetParse = TRUE;

elif(param.testCase == 6906)
//DMからnextSheetReqが来たらアサートする機能の追加に対するテスト
//DMからnextSheetReqを受け取った時に正しくアサートするかチェックを行う
//（シートパースモードのP_RCSAが存在しないとき）

	create object instance dummyJob of J_JOB;
	create object instance dummyEJob of J_EJOB;
	create object instance dummyNPrintStep of S_NPS;
	create object instance dummyExeOriginSet of S_EOS;
	create object instance dummyCollateSet of S_CS;
	create object instance dummyRCSetAccepter of P_RCSA;

	dummyJob.jobID = 1;
	relate dummyJob to dummyEJob across R104;
	relate dummyEJob to dummyNPrintStep across R252;
	relate dummyNPrintStep to dummyExeOriginSet across R231;
	relate dummyExeOriginSet to dummyCollateSet across R232;
	relate dummyCollateSet to dummyRCSetAccepter across R443;

	dummyRCSetAccepter.isSheetParse = FALSE;

//-- 635:20110124 Add Start (sasaki_r) 
elif (param.testCase == 6907)
//P_PISRのisSheetParseに、引数で渡されたisSheetParseを正しく代入しているかチェックを行う

	create object instance dummyJob of J_JOB;
	create object instance dummyEJob of J_EJOB;
	create object instance dummyInfoAccepter of P_PIA;
	create object instance dummyLogicalSheet of S_SHT;
	dummyJob.jobID = 1;
	relate dummyJob to dummyEJob across R104;
	relate dummyEJob to dummyInfoAccepter across R415;
	create object instance aSheet of P_PSHT;
	relate aSheet to dummyEJob across R429;


	sheetInfoReqID = P_SIR::createInstance(
			sheetID : aSheet.ID,
			jobID : dummyJob.jobID,
			sheetType : dummyLogicalSheet.type,
			isUncollateDevide : TRUE,
			isSheetParse : TRUE );

	select any aInfoSendReq from instances of P_PISR
		where ( selected.isSheetParse == TRUE );
	FER::assert( expression : not_empty aInfoSendReq);

elif (param.testCase == 6908)
//P_PISRのisSheetParseに、引数で渡されたisSheetParseを正しく代入しているかチェックを行う

	create object instance dummyJob of J_JOB;
	create object instance dummyEJob of J_EJOB;
	create object instance dummyInfoAccepter of P_PIA;
	create object instance dummyLogicalSheet of S_SHT;
	dummyJob.jobID = 1;
	relate dummyJob to dummyEJob across R104;
	relate dummyEJob to dummyInfoAccepter across R415;
	create object instance aSheet of P_PSHT;
	relate aSheet to dummyEJob across R429;


	sheetInfoReqID = P_SIR::createInstance(
			sheetID : aSheet.ID,
			jobID : dummyJob.jobID,
			sheetType : dummyLogicalSheet.type,
			isUncollateDevide : TRUE,
			isSheetParse : FALSE );

	select any aInfoSendReq from instances of P_PISR
		where ( selected.isSheetParse == FALSE );
	FER::assert( expression : not_empty aInfoSendReq);

elif (param.testCase == 6909)
//P_PISRのisSheetParseに、引数で渡されたisSheetParseを正しく代入しているかチェックを行う(TRUE)

	jobID = 1;
	V_JOB::createInstance(jobID : jobID);
	select any aJob from instances of V_JOB 
		where( selected.jobID == jobID );
	create object instance aSetStartInfo of V_SSI;
	setID = aSetStartInfo.setID;

	sheetInfoReqID = P_BSRS::createInstance(
			sheetType :  IotSc_SheetType::eNSet,
			collateSetID : setID,
			runLength : aJob.runLength,
			traySelectID : setID,
			isSheetParse : TRUE);

	select any aInfoSendReq from instances of P_PISR
		where ( selected.isSheetParse == TRUE );
	FER::assert( expression : not_empty aInfoSendReq );


elif (param.testCase == 6910)
//P_PISRのisSheetParseに、引数で渡されたisSheetParseを正しく代入しているかチェックを行う(FALSE)

	jobID = 1;
	V_JOB::createInstance(jobID : jobID);
	select any aJob from instances of V_JOB 
		where( selected.jobID == jobID );
	create object instance aSetStartInfo of V_SSI;
	setID = aSetStartInfo.setID;

	sheetInfoReqID = P_BSRS::createInstance(
			sheetType :  IotSc_SheetType::eNSet,
			collateSetID : setID,
			runLength : aJob.runLength,
			traySelectID : setID,
			isSheetParse : FALSE);

	select any aInfoSendReq from instances of P_PISR
		where ( selected.isSheetParse == FALSE );
	FER::assert( expression : not_empty aInfoSendReq );

//-- 635:20110125 Add End (sasaki_r) 

elif (param.testCase == 6915)
//P_NPSにおいてIOTD::sendSetStartInfo及びSR_SRUの生成について、正常に行われていることを確認する

	create object instance dummyNomalPSheet of P_NPS;
	create object instance dummySheet of S_SHT;
	create object instance dummyCollateSet of S_CS;
	create object instance dummyExeOriginSet of S_EOS;
	create object instance dummyRCSetAccepter of P_RCSA;

	relate dummyNomalPSheet to dummySheet across R435;
	relate dummySheet to dummyCollateSet across R213;
	relate dummyCollateSet to dummyExeOriginSet across R232;
	relate dummyCollateSet to dummyRCSetAccepter across R443;

	dummyCollateSet.collateMode = "IOT_COLLATE_ON";
	//以下の値を変えて全通り試す
	dummyExeOriginSet.isSetRecovery = TRUE;
	dummyRCSetAccepter.isSheetParse = TRUE;
	
	//Veryfireで状態をState[3] に変更して実行


end if;
',
	1,
	'',
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_TPARM
	VALUES ("a833fcdf-82c7-44c8-a0f1-1ec7ed7e03c4",
	"2d774738-d35d-4e13-9c19-2c76fa947294",
	'testCase',
	"ba5eda7a-def5-0000-0000-000000000002",
	0,
	'',
	"00000000-0000-0000-0000-000000000000",
	'');
INSERT INTO O_NBATTR
	VALUES ("c12d95a6-75e2-4c30-b3af-267b5980a401",
	"c6f29e4c-6e1b-4b20-9422-3252981294c1");
INSERT INTO O_BATTR
	VALUES ("c12d95a6-75e2-4c30-b3af-267b5980a401",
	"c6f29e4c-6e1b-4b20-9422-3252981294c1");
INSERT INTO O_ATTR
	VALUES ("c12d95a6-75e2-4c30-b3af-267b5980a401",
	"c6f29e4c-6e1b-4b20-9422-3252981294c1",
	"00000000-0000-0000-0000-000000000000",
	'current_state',
	'',
	'',
	'current_state',
	0,
	"ba5eda7a-def5-0000-0000-000000000006",
	'',
	'');
INSERT INTO O_ID
	VALUES (0,
	"c6f29e4c-6e1b-4b20-9422-3252981294c1");
INSERT INTO O_ID
	VALUES (1,
	"c6f29e4c-6e1b-4b20-9422-3252981294c1");
INSERT INTO O_ID
	VALUES (2,
	"c6f29e4c-6e1b-4b20-9422-3252981294c1");
INSERT INTO PE_PE
	VALUES ("c6f29e4c-6e1b-4b20-9422-3252981294c1",
	1,
	"f249cc43-4e9f-46e0-a3e8-3e11ce7e2ee3",
	"00000000-0000-0000-0000-000000000000",
	4);
INSERT INTO EP_PKG_PROXY
	VALUES ("f249cc43-4e9f-46e0-a3e8-3e11ce7e2ee3",
	"00000000-0000-0000-0000-000000000000",
	"fd41c346-e09d-469b-a4ca-1610b026ce44",
	'Verify',
	'',
	500,
	'../Verify.xtuml');
